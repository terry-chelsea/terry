// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_login.proto

#ifndef PROTOBUF_ca_5flogin_2eproto__INCLUDED
#define PROTOBUF_ca_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace CA {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ca_5flogin_2eproto();
void protobuf_AssignDesc_ca_5flogin_2eproto();
void protobuf_ShutdownFile_ca_5flogin_2eproto();

class pb_MSG_SYS_CA_USER_LOGIN;
class pb_MSG_SYS_CA_USER_LOGIN_ACK;

// ===================================================================

class pb_MSG_SYS_CA_USER_LOGIN : public ::google::protobuf::Message {
 public:
  pb_MSG_SYS_CA_USER_LOGIN();
  virtual ~pb_MSG_SYS_CA_USER_LOGIN();
  
  pb_MSG_SYS_CA_USER_LOGIN(const pb_MSG_SYS_CA_USER_LOGIN& from);
  
  inline pb_MSG_SYS_CA_USER_LOGIN& operator=(const pb_MSG_SYS_CA_USER_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_SYS_CA_USER_LOGIN& default_instance();
  
  void Swap(pb_MSG_SYS_CA_USER_LOGIN* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_SYS_CA_USER_LOGIN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_SYS_CA_USER_LOGIN& from);
  void MergeFrom(const pb_MSG_SYS_CA_USER_LOGIN& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:CA.pb_MSG_SYS_CA_USER_LOGIN)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ca_5flogin_2eproto();
  friend void protobuf_AssignDesc_ca_5flogin_2eproto();
  friend void protobuf_ShutdownFile_ca_5flogin_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_SYS_CA_USER_LOGIN* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_SYS_CA_USER_LOGIN_ACK : public ::google::protobuf::Message {
 public:
  pb_MSG_SYS_CA_USER_LOGIN_ACK();
  virtual ~pb_MSG_SYS_CA_USER_LOGIN_ACK();
  
  pb_MSG_SYS_CA_USER_LOGIN_ACK(const pb_MSG_SYS_CA_USER_LOGIN_ACK& from);
  
  inline pb_MSG_SYS_CA_USER_LOGIN_ACK& operator=(const pb_MSG_SYS_CA_USER_LOGIN_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_SYS_CA_USER_LOGIN_ACK& default_instance();
  
  void Swap(pb_MSG_SYS_CA_USER_LOGIN_ACK* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_SYS_CA_USER_LOGIN_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_SYS_CA_USER_LOGIN_ACK& from);
  void MergeFrom(const pb_MSG_SYS_CA_USER_LOGIN_ACK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required uint64 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CA.pb_MSG_SYS_CA_USER_LOGIN_ACK)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* token_;
  ::std::string* password_;
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ca_5flogin_2eproto();
  friend void protobuf_AssignDesc_ca_5flogin_2eproto();
  friend void protobuf_ShutdownFile_ca_5flogin_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_SYS_CA_USER_LOGIN_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_MSG_SYS_CA_USER_LOGIN

// required string name = 1;
inline bool pb_MSG_SYS_CA_USER_LOGIN::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_SYS_CA_USER_LOGIN::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pb_MSG_SYS_CA_USER_LOGIN::name() const {
  return *name_;
}
inline void pb_MSG_SYS_CA_USER_LOGIN::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pb_MSG_SYS_CA_USER_LOGIN::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pb_MSG_SYS_CA_USER_LOGIN::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_SYS_CA_USER_LOGIN::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pb_MSG_SYS_CA_USER_LOGIN::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// pb_MSG_SYS_CA_USER_LOGIN_ACK

// required string token = 1;
inline bool pb_MSG_SYS_CA_USER_LOGIN_ACK::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& pb_MSG_SYS_CA_USER_LOGIN_ACK::token() const {
  return *token_;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_SYS_CA_USER_LOGIN_ACK::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* pb_MSG_SYS_CA_USER_LOGIN_ACK::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool pb_MSG_SYS_CA_USER_LOGIN_ACK::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& pb_MSG_SYS_CA_USER_LOGIN_ACK::password() const {
  return *password_;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_SYS_CA_USER_LOGIN_ACK::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* pb_MSG_SYS_CA_USER_LOGIN_ACK::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 user_id = 3;
inline bool pb_MSG_SYS_CA_USER_LOGIN_ACK::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 pb_MSG_SYS_CA_USER_LOGIN_ACK::user_id() const {
  return user_id_;
}
inline void pb_MSG_SYS_CA_USER_LOGIN_ACK::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CA

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ca_5flogin_2eproto__INCLUDED
