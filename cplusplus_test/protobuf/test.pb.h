// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace terry {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class person;
class team;

// ===================================================================

class person : public ::google::protobuf::Message {
 public:
  person();
  virtual ~person();
  
  person(const person& from);
  
  inline person& operator=(const person& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const person& default_instance();
  
  void Swap(person* other);
  
  // implements Message ----------------------------------------------
  
  person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const person& from);
  void MergeFrom(const person& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 age = 1;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 1;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);
  
  // required uint32 weigh = 2;
  inline bool has_weigh() const;
  inline void clear_weigh();
  static const int kWeighFieldNumber = 2;
  inline ::google::protobuf::uint32 weigh() const;
  inline void set_weigh(::google::protobuf::uint32 value);
  
  // required string team = 3;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 3;
  inline const ::std::string& team() const;
  inline void set_team(const ::std::string& value);
  inline void set_team(const char* value);
  inline void set_team(const char* value, size_t size);
  inline ::std::string* mutable_team();
  inline ::std::string* release_team();
  
  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:terry.person)
 private:
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_weigh();
  inline void clear_has_weigh();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 weigh_;
  ::std::string* team_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  void InitAsDefaultInstance();
  static person* default_instance_;
};
// -------------------------------------------------------------------

class team : public ::google::protobuf::Message {
 public:
  team();
  virtual ~team();
  
  team(const team& from);
  
  inline team& operator=(const team& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const team& default_instance();
  
  void Swap(team* other);
  
  // implements Message ----------------------------------------------
  
  team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team& from);
  void MergeFrom(const team& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string playes = 1;
  inline int playes_size() const;
  inline void clear_playes();
  static const int kPlayesFieldNumber = 1;
  inline const ::std::string& playes(int index) const;
  inline ::std::string* mutable_playes(int index);
  inline void set_playes(int index, const ::std::string& value);
  inline void set_playes(int index, const char* value);
  inline void set_playes(int index, const char* value, size_t size);
  inline ::std::string* add_playes();
  inline void add_playes(const ::std::string& value);
  inline void add_playes(const char* value);
  inline void add_playes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& playes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_playes();
  
  // required uint32 older = 2;
  inline bool has_older() const;
  inline void clear_older();
  static const int kOlderFieldNumber = 2;
  inline ::google::protobuf::uint32 older() const;
  inline void set_older(::google::protobuf::uint32 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:terry.team)
 private:
  inline void set_has_older();
  inline void clear_has_older();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> playes_;
  ::std::string* name_;
  ::google::protobuf::uint32 older_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  void InitAsDefaultInstance();
  static team* default_instance_;
};
// ===================================================================


// ===================================================================

// person

// required uint32 age = 1;
inline bool person::has_age() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void person::set_has_age() {
  _has_bits_[0] |= 0x00000001u;
}
inline void person::clear_has_age() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void person::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 person::age() const {
  return age_;
}
inline void person::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// required uint32 weigh = 2;
inline bool person::has_weigh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void person::set_has_weigh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void person::clear_has_weigh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void person::clear_weigh() {
  weigh_ = 0u;
  clear_has_weigh();
}
inline ::google::protobuf::uint32 person::weigh() const {
  return weigh_;
}
inline void person::set_weigh(::google::protobuf::uint32 value) {
  set_has_weigh();
  weigh_ = value;
}

// required string team = 3;
inline bool person::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void person::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void person::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void person::clear_team() {
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    team_->clear();
  }
  clear_has_team();
}
inline const ::std::string& person::team() const {
  return *team_;
}
inline void person::set_team(const ::std::string& value) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(value);
}
inline void person::set_team(const char* value) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(value);
}
inline void person::set_team(const char* value, size_t size) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* person::mutable_team() {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  return team_;
}
inline ::std::string* person::release_team() {
  clear_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_;
    team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 4;
inline bool person::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void person::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void person::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void person::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& person::name() const {
  return *name_;
}
inline void person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// team

// repeated string playes = 1;
inline int team::playes_size() const {
  return playes_.size();
}
inline void team::clear_playes() {
  playes_.Clear();
}
inline const ::std::string& team::playes(int index) const {
  return playes_.Get(index);
}
inline ::std::string* team::mutable_playes(int index) {
  return playes_.Mutable(index);
}
inline void team::set_playes(int index, const ::std::string& value) {
  playes_.Mutable(index)->assign(value);
}
inline void team::set_playes(int index, const char* value) {
  playes_.Mutable(index)->assign(value);
}
inline void team::set_playes(int index, const char* value, size_t size) {
  playes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* team::add_playes() {
  return playes_.Add();
}
inline void team::add_playes(const ::std::string& value) {
  playes_.Add()->assign(value);
}
inline void team::add_playes(const char* value) {
  playes_.Add()->assign(value);
}
inline void team::add_playes(const char* value, size_t size) {
  playes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
team::playes() const {
  return playes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
team::mutable_playes() {
  return &playes_;
}

// required uint32 older = 2;
inline bool team::has_older() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team::set_has_older() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team::clear_has_older() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team::clear_older() {
  older_ = 0u;
  clear_has_older();
}
inline ::google::protobuf::uint32 team::older() const {
  return older_;
}
inline void team::set_older(::google::protobuf::uint32 value) {
  set_has_older();
  older_ = value;
}

// required string name = 3;
inline bool team::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& team::name() const {
  return *name_;
}
inline void team::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void team::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void team::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* team::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* team::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace terry

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
