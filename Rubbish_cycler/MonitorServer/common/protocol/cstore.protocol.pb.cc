// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cstore.protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cstore {

namespace {

const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_CHK_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_SU_CHK_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_PUT_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_SU_PUT_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_GET_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_SU_GET_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_DEL_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_SU_DEL_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_DEL_BLOCK2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_SU_DEL_BLOCK2_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_GET_BLOCK_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_PUT_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_PUT_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_GET_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_DEL_BLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_DEL_BLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_DEL_BLOCK2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_DEL_BLOCK2_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_CURRENT_SEQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_GET_CURRENT_SEQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_HEARTBEAT_BUILD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_SU_HEARTBEAT_BUILD_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_EXTENT_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_SU_EXTENT_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_MIGRATE_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_SU_MIGRATE_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_DELETE_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_SU_DELETE_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_SET_BUCKET_STATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_SU_SET_BUCKET_STATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_USER_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_INFO_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_USER_INFO_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_PUT_DIR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_PUT_DIR_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_DEL_DIR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_DEL_DIR_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_DIR_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_DIR_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_STAT_DIR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_STAT_DIR_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_STAT_DIR_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_STAT_DIR_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_Meta_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_DIR2_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_DIR2_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_MOV_DIR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_MOV_DIR_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_PUT_FILE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_PUT_FILE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_PUT_FILE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_PUT_FILE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_DEL_FILE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_DEL_FILE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_FILE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_FILE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_FILE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_FILE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_MOV_FILE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_MOV_FILE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_LOG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_USER_LOG_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_Meta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_LOG_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_MU_GET_USER_LOG_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_MU_CREATE_USER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_MU_CREATE_USER_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_MU_DELETE_USER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_MU_DELETE_USER_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_SET_BUCKET_STATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_MU_SET_BUCKET_STATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_DELETE_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_MU_DELETE_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_MIGRATE_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_MU_MIGRATE_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_EXTENT_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_MU_EXTENT_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_SYNC_HANDSHAKE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_MU_SYNC_HANDSHAKE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_PUSH_LOG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_MU_PUSH_LOG_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_PULL_LOG_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_MU_PULL_LOG_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hash_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hash_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sys_Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sys_Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_MU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_MU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_SU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_SU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_CS_REGISTER_NODE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_CS_REGISTER_NODE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_CS_REGISTER_NODE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_CS_REGISTER_NODE_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bucket_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bucket_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Module_Ip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Module_Ip_reflection_ = NULL;
const ::google::protobuf::Descriptor* IP_scope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IP_scope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bucket_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bucket_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_MU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_MU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_SU_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_SU_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MU_CS_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MU_CS_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_SU_CS_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_SU_CS_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_RUBBISH_RECYCLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_RUBBISH_RECYCLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_EXTENT_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_MU_EXTENT_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_EXTENT_BUCKET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_SU_EXTENT_BUCKET_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_GET_SU_RULE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_GET_SU_RULE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_GET_MU_RULE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_GET_MU_RULE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* IP_bucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IP_bucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_INIT_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_SU_INIT_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_INIT_HASH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_MU_INIT_HASH_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_BUCKET_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_MU_BUCKET_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_BUCKET_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_SU_BUCKET_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_Bucket_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_Bucket_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_CS_MPC_REPORT_BUCKET_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_CS_MPC_REPORT_BUCKET_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_DS_WD_START_MODULE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_DS_WD_START_MODULE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_DS_WD_UPDATE_TIME_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_DS_WD_UPDATE_TIME_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_WD_DS_HEART_BEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_WD_DS_HEART_BEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_DS_MODULES_INFO_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_START_MODULE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_DS_START_MODULE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_STOP_MODULE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_MPC_DS_STOP_MODULE_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Bucket_state_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Module_Name_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cstore_2eprotocol_2eproto() {
  protobuf_AddDesc_cstore_2eprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cstore.protocol.proto");
  GOOGLE_CHECK(file != NULL);
  pb_MSG_SYS_SU_CHK_BLOCK_descriptor_ = file->message_type(0);
  static const int pb_MSG_SYS_SU_CHK_BLOCK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_CHK_BLOCK, block_index_),
  };
  pb_MSG_SYS_SU_CHK_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_SU_CHK_BLOCK_descriptor_,
      pb_MSG_SYS_SU_CHK_BLOCK::default_instance_,
      pb_MSG_SYS_SU_CHK_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_CHK_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_CHK_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_SU_CHK_BLOCK));
  pb_MSG_SYS_SU_PUT_BLOCK_descriptor_ = file->message_type(1);
  static const int pb_MSG_SYS_SU_PUT_BLOCK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_PUT_BLOCK, block_index_),
  };
  pb_MSG_SYS_SU_PUT_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_SU_PUT_BLOCK_descriptor_,
      pb_MSG_SYS_SU_PUT_BLOCK::default_instance_,
      pb_MSG_SYS_SU_PUT_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_PUT_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_PUT_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_SU_PUT_BLOCK));
  pb_MSG_SYS_SU_GET_BLOCK_descriptor_ = file->message_type(2);
  static const int pb_MSG_SYS_SU_GET_BLOCK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_GET_BLOCK, block_index_),
  };
  pb_MSG_SYS_SU_GET_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_SU_GET_BLOCK_descriptor_,
      pb_MSG_SYS_SU_GET_BLOCK::default_instance_,
      pb_MSG_SYS_SU_GET_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_GET_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_GET_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_SU_GET_BLOCK));
  pb_MSG_SYS_SU_DEL_BLOCK_descriptor_ = file->message_type(3);
  static const int pb_MSG_SYS_SU_DEL_BLOCK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_DEL_BLOCK, block_index_),
  };
  pb_MSG_SYS_SU_DEL_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_SU_DEL_BLOCK_descriptor_,
      pb_MSG_SYS_SU_DEL_BLOCK::default_instance_,
      pb_MSG_SYS_SU_DEL_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_DEL_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_DEL_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_SU_DEL_BLOCK));
  pb_MSG_SYS_SU_DEL_BLOCK2_descriptor_ = file->message_type(4);
  static const int pb_MSG_SYS_SU_DEL_BLOCK2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_DEL_BLOCK2, block_index_),
  };
  pb_MSG_SYS_SU_DEL_BLOCK2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_SU_DEL_BLOCK2_descriptor_,
      pb_MSG_SYS_SU_DEL_BLOCK2::default_instance_,
      pb_MSG_SYS_SU_DEL_BLOCK2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_DEL_BLOCK2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_SU_DEL_BLOCK2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_SU_DEL_BLOCK2));
  pb_MSG_SU_SU_GET_BLOCK_LIST_descriptor_ = file->message_type(5);
  static const int pb_MSG_SU_SU_GET_BLOCK_LIST_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST, start_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST, end_seq_),
  };
  pb_MSG_SU_SU_GET_BLOCK_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_GET_BLOCK_LIST_descriptor_,
      pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance_,
      pb_MSG_SU_SU_GET_BLOCK_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_GET_BLOCK_LIST));
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_ = file->message_type(6);
  static const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK, start_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK, end_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK, block_list_),
  };
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_,
      pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance_,
      pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK));
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_descriptor_ = pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_->nested_type(0);
  static const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item, block_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item, block_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item, delete_flag_),
  };
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_descriptor_,
      pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance_,
      pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item));
  pb_MSG_SU_SU_PUT_BLOCK_descriptor_ = file->message_type(7);
  static const int pb_MSG_SU_SU_PUT_BLOCK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_PUT_BLOCK, block_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_PUT_BLOCK, block_seq_),
  };
  pb_MSG_SU_SU_PUT_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_PUT_BLOCK_descriptor_,
      pb_MSG_SU_SU_PUT_BLOCK::default_instance_,
      pb_MSG_SU_SU_PUT_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_PUT_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_PUT_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_PUT_BLOCK));
  pb_MSG_SU_SU_GET_BLOCK_descriptor_ = file->message_type(8);
  static const int pb_MSG_SU_SU_GET_BLOCK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK, block_index_),
  };
  pb_MSG_SU_SU_GET_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_GET_BLOCK_descriptor_,
      pb_MSG_SU_SU_GET_BLOCK::default_instance_,
      pb_MSG_SU_SU_GET_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_GET_BLOCK));
  pb_MSG_SU_SU_DEL_BLOCK_descriptor_ = file->message_type(9);
  static const int pb_MSG_SU_SU_DEL_BLOCK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK, block_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK, block_seq_),
  };
  pb_MSG_SU_SU_DEL_BLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_DEL_BLOCK_descriptor_,
      pb_MSG_SU_SU_DEL_BLOCK::default_instance_,
      pb_MSG_SU_SU_DEL_BLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_DEL_BLOCK));
  pb_MSG_SU_SU_DEL_BLOCK2_descriptor_ = file->message_type(10);
  static const int pb_MSG_SU_SU_DEL_BLOCK2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK2, block_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK2, block_seq_),
  };
  pb_MSG_SU_SU_DEL_BLOCK2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_DEL_BLOCK2_descriptor_,
      pb_MSG_SU_SU_DEL_BLOCK2::default_instance_,
      pb_MSG_SU_SU_DEL_BLOCK2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_DEL_BLOCK2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_DEL_BLOCK2));
  pb_MSG_SU_SU_GET_CURRENT_SEQ_descriptor_ = file->message_type(11);
  static const int pb_MSG_SU_SU_GET_CURRENT_SEQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ, bucket_index_),
  };
  pb_MSG_SU_SU_GET_CURRENT_SEQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_GET_CURRENT_SEQ_descriptor_,
      pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance_,
      pb_MSG_SU_SU_GET_CURRENT_SEQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_GET_CURRENT_SEQ));
  pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_descriptor_ = file->message_type(12);
  static const int pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK, current_seq_),
  };
  pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_descriptor_,
      pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance_,
      pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK));
  pb_MSG_SU_SU_HEARTBEAT_BUILD_descriptor_ = file->message_type(13);
  static const int pb_MSG_SU_SU_HEARTBEAT_BUILD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_HEARTBEAT_BUILD, bucket_index_),
  };
  pb_MSG_SU_SU_HEARTBEAT_BUILD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_SU_HEARTBEAT_BUILD_descriptor_,
      pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance_,
      pb_MSG_SU_SU_HEARTBEAT_BUILD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_HEARTBEAT_BUILD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_SU_HEARTBEAT_BUILD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_SU_HEARTBEAT_BUILD));
  pb_MSG_CS_SU_EXTENT_BUCKET_descriptor_ = file->message_type(14);
  static const int pb_MSG_CS_SU_EXTENT_BUCKET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_EXTENT_BUCKET, new_mod_nr_),
  };
  pb_MSG_CS_SU_EXTENT_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_SU_EXTENT_BUCKET_descriptor_,
      pb_MSG_CS_SU_EXTENT_BUCKET::default_instance_,
      pb_MSG_CS_SU_EXTENT_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_EXTENT_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_EXTENT_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_SU_EXTENT_BUCKET));
  pb_MSG_CS_SU_MIGRATE_BUCKET_descriptor_ = file->message_type(15);
  static const int pb_MSG_CS_SU_MIGRATE_BUCKET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_MIGRATE_BUCKET, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_MIGRATE_BUCKET, ip_),
  };
  pb_MSG_CS_SU_MIGRATE_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_SU_MIGRATE_BUCKET_descriptor_,
      pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance_,
      pb_MSG_CS_SU_MIGRATE_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_MIGRATE_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_MIGRATE_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_SU_MIGRATE_BUCKET));
  pb_MSG_CS_SU_DELETE_BUCKET_descriptor_ = file->message_type(16);
  static const int pb_MSG_CS_SU_DELETE_BUCKET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_DELETE_BUCKET, bucket_index_),
  };
  pb_MSG_CS_SU_DELETE_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_SU_DELETE_BUCKET_descriptor_,
      pb_MSG_CS_SU_DELETE_BUCKET::default_instance_,
      pb_MSG_CS_SU_DELETE_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_DELETE_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_DELETE_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_SU_DELETE_BUCKET));
  pb_MSG_CS_SU_SET_BUCKET_STATE_descriptor_ = file->message_type(17);
  static const int pb_MSG_CS_SU_SET_BUCKET_STATE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_SET_BUCKET_STATE, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_SET_BUCKET_STATE, state_),
  };
  pb_MSG_CS_SU_SET_BUCKET_STATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_SU_SET_BUCKET_STATE_descriptor_,
      pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance_,
      pb_MSG_CS_SU_SET_BUCKET_STATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_SET_BUCKET_STATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_SU_SET_BUCKET_STATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_SU_SET_BUCKET_STATE));
  pb_MSG_SYS_MU_GET_USER_INFO_descriptor_ = file->message_type(18);
  static const int pb_MSG_SYS_MU_GET_USER_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO, token_),
  };
  pb_MSG_SYS_MU_GET_USER_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_USER_INFO_descriptor_,
      pb_MSG_SYS_MU_GET_USER_INFO::default_instance_,
      pb_MSG_SYS_MU_GET_USER_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_USER_INFO));
  pb_MSG_SYS_MU_GET_USER_INFO_ACK_descriptor_ = file->message_type(19);
  static const int pb_MSG_SYS_MU_GET_USER_INFO_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO_ACK, quota_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO_ACK, quota_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO_ACK, seq_nr_),
  };
  pb_MSG_SYS_MU_GET_USER_INFO_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_USER_INFO_ACK_descriptor_,
      pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance_,
      pb_MSG_SYS_MU_GET_USER_INFO_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_INFO_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_USER_INFO_ACK));
  pb_MSG_SYS_MU_PUT_DIR_descriptor_ = file->message_type(20);
  static const int pb_MSG_SYS_MU_PUT_DIR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_DIR, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_DIR, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_DIR, path_),
  };
  pb_MSG_SYS_MU_PUT_DIR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_PUT_DIR_descriptor_,
      pb_MSG_SYS_MU_PUT_DIR::default_instance_,
      pb_MSG_SYS_MU_PUT_DIR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_DIR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_DIR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_PUT_DIR));
  pb_MSG_SYS_MU_DEL_DIR_descriptor_ = file->message_type(21);
  static const int pb_MSG_SYS_MU_DEL_DIR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_DIR, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_DIR, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_DIR, path_),
  };
  pb_MSG_SYS_MU_DEL_DIR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_DEL_DIR_descriptor_,
      pb_MSG_SYS_MU_DEL_DIR::default_instance_,
      pb_MSG_SYS_MU_DEL_DIR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_DIR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_DIR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_DEL_DIR));
  pb_MSG_SYS_MU_GET_DIR_descriptor_ = file->message_type(22);
  static const int pb_MSG_SYS_MU_GET_DIR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR, path_),
  };
  pb_MSG_SYS_MU_GET_DIR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_DIR_descriptor_,
      pb_MSG_SYS_MU_GET_DIR::default_instance_,
      pb_MSG_SYS_MU_GET_DIR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_DIR));
  pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_ = file->message_type(23);
  static const int pb_MSG_SYS_MU_GET_DIR_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK, dentry_list_),
  };
  pb_MSG_SYS_MU_GET_DIR_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_,
      pb_MSG_SYS_MU_GET_DIR_ACK::default_instance_,
      pb_MSG_SYS_MU_GET_DIR_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_DIR_ACK));
  pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_descriptor_ = pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_->nested_type(0);
  static const int pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK_DEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK_DEntry, type_),
  };
  pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_descriptor_,
      pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance_,
      pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK_DEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR_ACK_DEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_DIR_ACK_DEntry));
  pb_MSG_SYS_MU_STAT_DIR_descriptor_ = file->message_type(24);
  static const int pb_MSG_SYS_MU_STAT_DIR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR, path_),
  };
  pb_MSG_SYS_MU_STAT_DIR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_STAT_DIR_descriptor_,
      pb_MSG_SYS_MU_STAT_DIR::default_instance_,
      pb_MSG_SYS_MU_STAT_DIR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_STAT_DIR));
  pb_MSG_SYS_MU_STAT_DIR_ACK_descriptor_ = file->message_type(25);
  static const int pb_MSG_SYS_MU_STAT_DIR_ACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR_ACK, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR_ACK, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR_ACK, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR_ACK, size_),
  };
  pb_MSG_SYS_MU_STAT_DIR_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_STAT_DIR_ACK_descriptor_,
      pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance_,
      pb_MSG_SYS_MU_STAT_DIR_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_STAT_DIR_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_STAT_DIR_ACK));
  Block_Meta_descriptor_ = file->message_type(26);
  static const int Block_Meta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block_Meta, checksum_),
  };
  Block_Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_Meta_descriptor_,
      Block_Meta::default_instance_,
      Block_Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block_Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block_Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block_Meta));
  pb_MSG_SYS_MU_GET_DIR2_descriptor_ = file->message_type(27);
  static const int pb_MSG_SYS_MU_GET_DIR2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2, path_),
  };
  pb_MSG_SYS_MU_GET_DIR2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_DIR2_descriptor_,
      pb_MSG_SYS_MU_GET_DIR2::default_instance_,
      pb_MSG_SYS_MU_GET_DIR2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_DIR2));
  pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_ = file->message_type(28);
  static const int pb_MSG_SYS_MU_GET_DIR2_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK, dentry_list_),
  };
  pb_MSG_SYS_MU_GET_DIR2_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_,
      pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance_,
      pb_MSG_SYS_MU_GET_DIR2_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_DIR2_ACK));
  pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_descriptor_ = pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_->nested_type(0);
  static const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, block_list_),
  };
  pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_descriptor_,
      pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance_,
      pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry));
  pb_MSG_SYS_MU_MOV_DIR_descriptor_ = file->message_type(29);
  static const int pb_MSG_SYS_MU_MOV_DIR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_DIR, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_DIR, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_DIR, src_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_DIR, dest_path_),
  };
  pb_MSG_SYS_MU_MOV_DIR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_MOV_DIR_descriptor_,
      pb_MSG_SYS_MU_MOV_DIR::default_instance_,
      pb_MSG_SYS_MU_MOV_DIR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_DIR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_DIR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_MOV_DIR));
  File_Attr_descriptor_ = file->message_type(30);
  static const int File_Attr_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, size_),
  };
  File_Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_Attr_descriptor_,
      File_Attr::default_instance_,
      File_Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File_Attr));
  pb_MSG_SYS_MU_PUT_FILE_descriptor_ = file->message_type(31);
  static const int pb_MSG_SYS_MU_PUT_FILE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, block_list_),
  };
  pb_MSG_SYS_MU_PUT_FILE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_PUT_FILE_descriptor_,
      pb_MSG_SYS_MU_PUT_FILE::default_instance_,
      pb_MSG_SYS_MU_PUT_FILE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_PUT_FILE));
  pb_MSG_SYS_MU_PUT_FILE_ACK_descriptor_ = file->message_type(32);
  static const int pb_MSG_SYS_MU_PUT_FILE_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE_ACK, version_),
  };
  pb_MSG_SYS_MU_PUT_FILE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_PUT_FILE_ACK_descriptor_,
      pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance_,
      pb_MSG_SYS_MU_PUT_FILE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_PUT_FILE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_PUT_FILE_ACK));
  pb_MSG_SYS_MU_DEL_FILE_descriptor_ = file->message_type(33);
  static const int pb_MSG_SYS_MU_DEL_FILE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_FILE, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_FILE, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_FILE, path_),
  };
  pb_MSG_SYS_MU_DEL_FILE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_DEL_FILE_descriptor_,
      pb_MSG_SYS_MU_DEL_FILE::default_instance_,
      pb_MSG_SYS_MU_DEL_FILE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_FILE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_DEL_FILE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_DEL_FILE));
  pb_MSG_SYS_MU_GET_FILE_descriptor_ = file->message_type(34);
  static const int pb_MSG_SYS_MU_GET_FILE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE, path_),
  };
  pb_MSG_SYS_MU_GET_FILE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_FILE_descriptor_,
      pb_MSG_SYS_MU_GET_FILE::default_instance_,
      pb_MSG_SYS_MU_GET_FILE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_FILE));
  pb_MSG_SYS_MU_GET_FILE_ACK_descriptor_ = file->message_type(35);
  static const int pb_MSG_SYS_MU_GET_FILE_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE_ACK, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE_ACK, block_list_),
  };
  pb_MSG_SYS_MU_GET_FILE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_FILE_ACK_descriptor_,
      pb_MSG_SYS_MU_GET_FILE_ACK::default_instance_,
      pb_MSG_SYS_MU_GET_FILE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_FILE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_FILE_ACK));
  pb_MSG_SYS_MU_MOV_FILE_descriptor_ = file->message_type(36);
  static const int pb_MSG_SYS_MU_MOV_FILE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_FILE, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_FILE, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_FILE, src_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_FILE, dest_path_),
  };
  pb_MSG_SYS_MU_MOV_FILE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_MOV_FILE_descriptor_,
      pb_MSG_SYS_MU_MOV_FILE::default_instance_,
      pb_MSG_SYS_MU_MOV_FILE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_FILE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_MOV_FILE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_MOV_FILE));
  pb_MSG_SYS_MU_GET_USER_LOG_descriptor_ = file->message_type(37);
  static const int pb_MSG_SYS_MU_GET_USER_LOG_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG, seq_nr_),
  };
  pb_MSG_SYS_MU_GET_USER_LOG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_USER_LOG_descriptor_,
      pb_MSG_SYS_MU_GET_USER_LOG::default_instance_,
      pb_MSG_SYS_MU_GET_USER_LOG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_USER_LOG));
  File_Meta_descriptor_ = file->message_type(38);
  static const int File_Meta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Meta, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Meta, block_list_),
  };
  File_Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_Meta_descriptor_,
      File_Meta::default_instance_,
      File_Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File_Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File_Meta));
  Log_Entry_descriptor_ = file->message_type(39);
  static const int Log_Entry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, seq_nr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, src_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, dest_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, file_meta_),
  };
  Log_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Log_Entry_descriptor_,
      Log_Entry::default_instance_,
      Log_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Log_Entry));
  pb_MSG_SYS_MU_GET_USER_LOG_ACK_descriptor_ = file->message_type(40);
  static const int pb_MSG_SYS_MU_GET_USER_LOG_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG_ACK, log_list_),
  };
  pb_MSG_SYS_MU_GET_USER_LOG_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_MU_GET_USER_LOG_ACK_descriptor_,
      pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance_,
      pb_MSG_SYS_MU_GET_USER_LOG_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_MU_GET_USER_LOG_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_MU_GET_USER_LOG_ACK));
  pb_MSG_MPC_MU_CREATE_USER_descriptor_ = file->message_type(41);
  static const int pb_MSG_MPC_MU_CREATE_USER_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_CREATE_USER, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_CREATE_USER, quota_),
  };
  pb_MSG_MPC_MU_CREATE_USER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_MU_CREATE_USER_descriptor_,
      pb_MSG_MPC_MU_CREATE_USER::default_instance_,
      pb_MSG_MPC_MU_CREATE_USER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_CREATE_USER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_CREATE_USER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_MU_CREATE_USER));
  pb_MSG_MPC_MU_DELETE_USER_descriptor_ = file->message_type(42);
  static const int pb_MSG_MPC_MU_DELETE_USER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_DELETE_USER, uid_),
  };
  pb_MSG_MPC_MU_DELETE_USER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_MU_DELETE_USER_descriptor_,
      pb_MSG_MPC_MU_DELETE_USER::default_instance_,
      pb_MSG_MPC_MU_DELETE_USER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_DELETE_USER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_MU_DELETE_USER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_MU_DELETE_USER));
  pb_MSG_CS_MU_SET_BUCKET_STATE_descriptor_ = file->message_type(43);
  static const int pb_MSG_CS_MU_SET_BUCKET_STATE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_SET_BUCKET_STATE, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_SET_BUCKET_STATE, state_),
  };
  pb_MSG_CS_MU_SET_BUCKET_STATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_MU_SET_BUCKET_STATE_descriptor_,
      pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance_,
      pb_MSG_CS_MU_SET_BUCKET_STATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_SET_BUCKET_STATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_SET_BUCKET_STATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_MU_SET_BUCKET_STATE));
  pb_MSG_CS_MU_DELETE_BUCKET_descriptor_ = file->message_type(44);
  static const int pb_MSG_CS_MU_DELETE_BUCKET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_DELETE_BUCKET, bucket_index_),
  };
  pb_MSG_CS_MU_DELETE_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_MU_DELETE_BUCKET_descriptor_,
      pb_MSG_CS_MU_DELETE_BUCKET::default_instance_,
      pb_MSG_CS_MU_DELETE_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_DELETE_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_DELETE_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_MU_DELETE_BUCKET));
  pb_MSG_CS_MU_MIGRATE_BUCKET_descriptor_ = file->message_type(45);
  static const int pb_MSG_CS_MU_MIGRATE_BUCKET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_MIGRATE_BUCKET, source_mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_MIGRATE_BUCKET, bucket_index_),
  };
  pb_MSG_CS_MU_MIGRATE_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_MU_MIGRATE_BUCKET_descriptor_,
      pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance_,
      pb_MSG_CS_MU_MIGRATE_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_MIGRATE_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_MIGRATE_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_MU_MIGRATE_BUCKET));
  pb_MSG_CS_MU_EXTENT_BUCKET_descriptor_ = file->message_type(46);
  static const int pb_MSG_CS_MU_EXTENT_BUCKET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_EXTENT_BUCKET, new_mod_),
  };
  pb_MSG_CS_MU_EXTENT_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_MU_EXTENT_BUCKET_descriptor_,
      pb_MSG_CS_MU_EXTENT_BUCKET::default_instance_,
      pb_MSG_CS_MU_EXTENT_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_EXTENT_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MU_EXTENT_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_MU_EXTENT_BUCKET));
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_descriptor_ = file->message_type(47);
  static const int pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE, bucket_index_),
  };
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_descriptor_,
      pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance_,
      pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE));
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_descriptor_ = file->message_type(48);
  static const int pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK, seq_nr_),
  };
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_descriptor_,
      pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance_,
      pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK));
  pb_MSG_MU_MU_SYNC_HANDSHAKE_descriptor_ = file->message_type(49);
  static const int pb_MSG_MU_MU_SYNC_HANDSHAKE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_SYNC_HANDSHAKE, bucket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_SYNC_HANDSHAKE, seq_nr_),
  };
  pb_MSG_MU_MU_SYNC_HANDSHAKE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_MU_SYNC_HANDSHAKE_descriptor_,
      pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance_,
      pb_MSG_MU_MU_SYNC_HANDSHAKE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_SYNC_HANDSHAKE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_SYNC_HANDSHAKE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_MU_SYNC_HANDSHAKE));
  pb_MSG_MU_MU_PUSH_LOG_descriptor_ = file->message_type(50);
  static const int pb_MSG_MU_MU_PUSH_LOG_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_PUSH_LOG, log_list_),
  };
  pb_MSG_MU_MU_PUSH_LOG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_MU_PUSH_LOG_descriptor_,
      pb_MSG_MU_MU_PUSH_LOG::default_instance_,
      pb_MSG_MU_MU_PUSH_LOG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_PUSH_LOG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_PUSH_LOG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_MU_PUSH_LOG));
  pb_MSG_MU_MU_PULL_LOG_ACK_descriptor_ = file->message_type(51);
  static const int pb_MSG_MU_MU_PULL_LOG_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_PULL_LOG_ACK, log_list_),
  };
  pb_MSG_MU_MU_PULL_LOG_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_MU_PULL_LOG_ACK_descriptor_,
      pb_MSG_MU_MU_PULL_LOG_ACK::default_instance_,
      pb_MSG_MU_MU_PULL_LOG_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_PULL_LOG_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_MU_PULL_LOG_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_MU_PULL_LOG_ACK));
  Map_Item_descriptor_ = file->message_type(52);
  static const int Map_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_Item, module_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_Item, bucket_num_),
  };
  Map_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_Item_descriptor_,
      Map_Item::default_instance_,
      Map_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map_Item));
  Hash_Version_descriptor_ = file->message_type(53);
  static const int Hash_Version_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash_Version, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash_Version, hash_version_),
  };
  Hash_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hash_Version_descriptor_,
      Hash_Version::default_instance_,
      Hash_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hash_Version));
  Sys_Order_descriptor_ = file->message_type(54);
  static const int Sys_Order_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_Order, order_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_Order, order_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_Order, hash_version_),
  };
  Sys_Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sys_Order_descriptor_,
      Sys_Order::default_instance_,
      Sys_Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sys_Order));
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_descriptor_ = file->message_type(55);
  static const int pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH, local_version_),
  };
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_descriptor_,
      pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance_,
      pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH));
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_descriptor_ = file->message_type(56);
  static const int pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK, hash_version_),
  };
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_descriptor_,
      pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance_,
      pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK));
  pb_MSG_SYS_RS_UPDATE_MU_HASH_descriptor_ = file->message_type(57);
  static const int pb_MSG_SYS_RS_UPDATE_MU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_MU_HASH, local_version_),
  };
  pb_MSG_SYS_RS_UPDATE_MU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_MU_HASH_descriptor_,
      pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance_,
      pb_MSG_SYS_RS_UPDATE_MU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_MU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_MU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_MU_HASH));
  pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_descriptor_ = file->message_type(58);
  static const int pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK, sys_order_),
  };
  pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_descriptor_,
      pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance_,
      pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK));
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_descriptor_ = file->message_type(59);
  static const int pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH, local_version_),
  };
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_descriptor_,
      pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance_,
      pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH));
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_descriptor_ = file->message_type(60);
  static const int pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK, hash_version_),
  };
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_descriptor_,
      pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance_,
      pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK));
  pb_MSG_SYS_RS_UPDATE_SU_HASH_descriptor_ = file->message_type(61);
  static const int pb_MSG_SYS_RS_UPDATE_SU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_SU_HASH, local_version_),
  };
  pb_MSG_SYS_RS_UPDATE_SU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_SU_HASH_descriptor_,
      pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance_,
      pb_MSG_SYS_RS_UPDATE_SU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_SU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_SU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_SU_HASH));
  pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_descriptor_ = file->message_type(62);
  static const int pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK, sys_order_),
  };
  pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_descriptor_,
      pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance_,
      pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK));
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_descriptor_ = file->message_type(63);
  static const int pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM, bucket_num_),
  };
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_descriptor_,
      pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance_,
      pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM));
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_descriptor_ = file->message_type(64);
  static const int pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK, ip_list_),
  };
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_descriptor_,
      pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance_,
      pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK));
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_descriptor_ = file->message_type(65);
  static const int pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM, bucket_num_),
  };
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_descriptor_,
      pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance_,
      pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM));
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_descriptor_ = file->message_type(66);
  static const int pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK, ip_list_),
  };
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_descriptor_,
      pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance_,
      pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK));
  pb_MSG_SU_CS_REGISTER_NODE_descriptor_ = file->message_type(67);
  static const int pb_MSG_SU_CS_REGISTER_NODE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_REGISTER_NODE, node_ip_),
  };
  pb_MSG_SU_CS_REGISTER_NODE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_CS_REGISTER_NODE_descriptor_,
      pb_MSG_SU_CS_REGISTER_NODE::default_instance_,
      pb_MSG_SU_CS_REGISTER_NODE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_REGISTER_NODE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_REGISTER_NODE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_CS_REGISTER_NODE));
  pb_MSG_MU_CS_REGISTER_NODE_descriptor_ = file->message_type(68);
  static const int pb_MSG_MU_CS_REGISTER_NODE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_REGISTER_NODE, node_ip_),
  };
  pb_MSG_MU_CS_REGISTER_NODE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_CS_REGISTER_NODE_descriptor_,
      pb_MSG_MU_CS_REGISTER_NODE::default_instance_,
      pb_MSG_MU_CS_REGISTER_NODE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_REGISTER_NODE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_REGISTER_NODE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_CS_REGISTER_NODE));
  Bucket_Item_descriptor_ = file->message_type(69);
  static const int Bucket_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_Item, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_Item, bucket_load_),
  };
  Bucket_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bucket_Item_descriptor_,
      Bucket_Item::default_instance_,
      Bucket_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bucket_Item));
  Module_Ip_descriptor_ = file->message_type(70);
  static const int Module_Ip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module_Ip, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module_Ip, content_),
  };
  Module_Ip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Module_Ip_descriptor_,
      Module_Ip::default_instance_,
      Module_Ip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module_Ip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module_Ip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Module_Ip));
  IP_scope_descriptor_ = file->message_type(71);
  static const int IP_scope_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_scope, start_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_scope, serial_num_),
  };
  IP_scope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IP_scope_descriptor_,
      IP_scope::default_instance_,
      IP_scope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_scope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_scope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IP_scope));
  Bucket_List_descriptor_ = file->message_type(72);
  static const int Bucket_List_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_List, bucket_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_List, mu_ip_),
  };
  Bucket_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bucket_List_descriptor_,
      Bucket_List::default_instance_,
      Bucket_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bucket_List));
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_descriptor_ = file->message_type(73);
  static const int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH, local_version_),
  };
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_descriptor_,
      pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance_,
      pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH));
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_descriptor_ = file->message_type(74);
  static const int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK, map_bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK, sys_order_),
  };
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_descriptor_,
      pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance_,
      pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK));
  pb_MSG_RS_CS_UPDATE_MU_HASH_descriptor_ = file->message_type(75);
  static const int pb_MSG_RS_CS_UPDATE_MU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_MU_HASH, version_),
  };
  pb_MSG_RS_CS_UPDATE_MU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_MU_HASH_descriptor_,
      pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance_,
      pb_MSG_RS_CS_UPDATE_MU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_MU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_MU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_MU_HASH));
  pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_descriptor_ = file->message_type(76);
  static const int pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_MU_HASH_ACK, sys_order_),
  };
  pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_descriptor_,
      pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance_,
      pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_MU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_MU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_MU_HASH_ACK));
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_descriptor_ = file->message_type(77);
  static const int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH, local_version_),
  };
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_descriptor_,
      pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance_,
      pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH));
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_descriptor_ = file->message_type(78);
  static const int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK, map_bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK, sys_order_),
  };
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_descriptor_,
      pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance_,
      pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK));
  pb_MSG_RS_CS_UPDATE_SU_HASH_descriptor_ = file->message_type(79);
  static const int pb_MSG_RS_CS_UPDATE_SU_HASH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_SU_HASH, version_),
  };
  pb_MSG_RS_CS_UPDATE_SU_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_SU_HASH_descriptor_,
      pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance_,
      pb_MSG_RS_CS_UPDATE_SU_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_SU_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_SU_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_SU_HASH));
  pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_descriptor_ = file->message_type(80);
  static const int pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_SU_HASH_ACK, sys_order_),
  };
  pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_descriptor_,
      pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance_,
      pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_SU_HASH_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_RS_CS_UPDATE_SU_HASH_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_RS_CS_UPDATE_SU_HASH_ACK));
  pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_descriptor_ = file->message_type(81);
  static const int pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE, storage_load_limit_),
  };
  pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_descriptor_,
      pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance_,
      pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE));
  pb_MSG_MU_CS_HEARTBEAT_descriptor_ = file->message_type(82);
  static const int pb_MSG_MU_CS_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_HEARTBEAT, bucket_item_),
  };
  pb_MSG_MU_CS_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MU_CS_HEARTBEAT_descriptor_,
      pb_MSG_MU_CS_HEARTBEAT::default_instance_,
      pb_MSG_MU_CS_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MU_CS_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MU_CS_HEARTBEAT));
  pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_descriptor_ = file->message_type(83);
  static const int pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE, storage_load_limit_),
  };
  pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_descriptor_,
      pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance_,
      pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE));
  pb_MSG_SU_CS_HEARTBEAT_descriptor_ = file->message_type(84);
  static const int pb_MSG_SU_CS_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_HEARTBEAT, bucket_item_),
  };
  pb_MSG_SU_CS_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_SU_CS_HEARTBEAT_descriptor_,
      pb_MSG_SU_CS_HEARTBEAT::default_instance_,
      pb_MSG_SU_CS_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_SU_CS_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_SU_CS_HEARTBEAT));
  pb_MSG_MPC_CS_RUBBISH_RECYCLE_descriptor_ = file->message_type(85);
  static const int pb_MSG_MPC_CS_RUBBISH_RECYCLE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_RUBBISH_RECYCLE, scale_),
  };
  pb_MSG_MPC_CS_RUBBISH_RECYCLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_RUBBISH_RECYCLE_descriptor_,
      pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance_,
      pb_MSG_MPC_CS_RUBBISH_RECYCLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_RUBBISH_RECYCLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_RUBBISH_RECYCLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_RUBBISH_RECYCLE));
  pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_descriptor_ = file->message_type(86);
  static const int pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET, source_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET, destination_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET, bucket_num_),
  };
  pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_descriptor_,
      pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance_,
      pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET));
  pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_descriptor_ = file->message_type(87);
  static const int pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET, source_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET, destination_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET, bucket_num_),
  };
  pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_descriptor_,
      pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance_,
      pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET));
  pb_MSG_MPC_CS_MU_EXTENT_BUCKET_descriptor_ = file->message_type(88);
  static const int pb_MSG_MPC_CS_MU_EXTENT_BUCKET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_EXTENT_BUCKET, new_mod_),
  };
  pb_MSG_MPC_CS_MU_EXTENT_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_MU_EXTENT_BUCKET_descriptor_,
      pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance_,
      pb_MSG_MPC_CS_MU_EXTENT_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_EXTENT_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_EXTENT_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_MU_EXTENT_BUCKET));
  pb_MSG_MPC_CS_SU_EXTENT_BUCKET_descriptor_ = file->message_type(89);
  static const int pb_MSG_MPC_CS_SU_EXTENT_BUCKET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_EXTENT_BUCKET, new_mod_),
  };
  pb_MSG_MPC_CS_SU_EXTENT_BUCKET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_SU_EXTENT_BUCKET_descriptor_,
      pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance_,
      pb_MSG_MPC_CS_SU_EXTENT_BUCKET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_EXTENT_BUCKET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_EXTENT_BUCKET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_SU_EXTENT_BUCKET));
  pb_MSG_MPC_CS_GET_SU_RULE_ACK_descriptor_ = file->message_type(90);
  static const int pb_MSG_MPC_CS_GET_SU_RULE_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_SU_RULE_ACK, map_bucket_),
  };
  pb_MSG_MPC_CS_GET_SU_RULE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_GET_SU_RULE_ACK_descriptor_,
      pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance_,
      pb_MSG_MPC_CS_GET_SU_RULE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_SU_RULE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_SU_RULE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_GET_SU_RULE_ACK));
  pb_MSG_MPC_CS_GET_MU_RULE_ACK_descriptor_ = file->message_type(91);
  static const int pb_MSG_MPC_CS_GET_MU_RULE_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_MU_RULE_ACK, map_bucket_),
  };
  pb_MSG_MPC_CS_GET_MU_RULE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_GET_MU_RULE_ACK_descriptor_,
      pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance_,
      pb_MSG_MPC_CS_GET_MU_RULE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_MU_RULE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_MU_RULE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_GET_MU_RULE_ACK));
  IP_bucket_descriptor_ = file->message_type(92);
  static const int IP_bucket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_bucket, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_bucket, buckets_),
  };
  IP_bucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IP_bucket_descriptor_,
      IP_bucket::default_instance_,
      IP_bucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_bucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP_bucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IP_bucket));
  pb_MSG_MPC_CS_SU_INIT_HASH_descriptor_ = file->message_type(93);
  static const int pb_MSG_MPC_CS_SU_INIT_HASH_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_INIT_HASH, module_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_INIT_HASH, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_INIT_HASH, duplicate_num_),
  };
  pb_MSG_MPC_CS_SU_INIT_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_SU_INIT_HASH_descriptor_,
      pb_MSG_MPC_CS_SU_INIT_HASH::default_instance_,
      pb_MSG_MPC_CS_SU_INIT_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_INIT_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_INIT_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_SU_INIT_HASH));
  pb_MSG_MPC_CS_MU_INIT_HASH_descriptor_ = file->message_type(94);
  static const int pb_MSG_MPC_CS_MU_INIT_HASH_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_INIT_HASH, module_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_INIT_HASH, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_INIT_HASH, duplicate_num_),
  };
  pb_MSG_MPC_CS_MU_INIT_HASH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_MU_INIT_HASH_descriptor_,
      pb_MSG_MPC_CS_MU_INIT_HASH::default_instance_,
      pb_MSG_MPC_CS_MU_INIT_HASH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_INIT_HASH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_INIT_HASH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_MU_INIT_HASH));
  pb_MSG_MPC_CS_MU_BUCKET_ACK_descriptor_ = file->message_type(95);
  static const int pb_MSG_MPC_CS_MU_BUCKET_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_BUCKET_ACK, bucket_list_),
  };
  pb_MSG_MPC_CS_MU_BUCKET_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_MU_BUCKET_ACK_descriptor_,
      pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance_,
      pb_MSG_MPC_CS_MU_BUCKET_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_BUCKET_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_MU_BUCKET_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_MU_BUCKET_ACK));
  pb_MSG_MPC_CS_SU_BUCKET_ACK_descriptor_ = file->message_type(96);
  static const int pb_MSG_MPC_CS_SU_BUCKET_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_BUCKET_ACK, bucket_list_),
  };
  pb_MSG_MPC_CS_SU_BUCKET_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_SU_BUCKET_ACK_descriptor_,
      pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance_,
      pb_MSG_MPC_CS_SU_BUCKET_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_BUCKET_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_SU_BUCKET_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_SU_BUCKET_ACK));
  Node_Block_descriptor_ = file->message_type(97);
  static const int Node_Block_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Block, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Block, bucket_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Block, block_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Block, storage_limit_),
  };
  Node_Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_Block_descriptor_,
      Node_Block::default_instance_,
      Node_Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node_Block));
  pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_descriptor_ = file->message_type(98);
  static const int pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK, su_node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK, mu_node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK, su_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK, mu_dup_),
  };
  pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_descriptor_,
      pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance_,
      pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK));
  Report_Bucket_List_descriptor_ = file->message_type(99);
  static const int Report_Bucket_List_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Bucket_List, node_bucket_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Bucket_List, node_storage_limit_),
  };
  Report_Bucket_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_Bucket_List_descriptor_,
      Report_Bucket_List::default_instance_,
      Report_Bucket_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Bucket_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Bucket_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report_Bucket_List));
  pb_MSG_CS_MPC_REPORT_BUCKET_LIST_descriptor_ = file->message_type(100);
  static const int pb_MSG_CS_MPC_REPORT_BUCKET_LIST_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MPC_REPORT_BUCKET_LIST, mu_bucket_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MPC_REPORT_BUCKET_LIST, su_bucket_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MPC_REPORT_BUCKET_LIST, su_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MPC_REPORT_BUCKET_LIST, mu_dup_),
  };
  pb_MSG_CS_MPC_REPORT_BUCKET_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_CS_MPC_REPORT_BUCKET_LIST_descriptor_,
      pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance_,
      pb_MSG_CS_MPC_REPORT_BUCKET_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MPC_REPORT_BUCKET_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_CS_MPC_REPORT_BUCKET_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_CS_MPC_REPORT_BUCKET_LIST));
  pb_MSG_DS_WD_START_MODULE_descriptor_ = file->message_type(101);
  static const int pb_MSG_DS_WD_START_MODULE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_START_MODULE, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_START_MODULE, args_),
  };
  pb_MSG_DS_WD_START_MODULE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_DS_WD_START_MODULE_descriptor_,
      pb_MSG_DS_WD_START_MODULE::default_instance_,
      pb_MSG_DS_WD_START_MODULE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_START_MODULE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_START_MODULE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_DS_WD_START_MODULE));
  pb_MSG_DS_WD_UPDATE_TIME_descriptor_ = file->message_type(102);
  static const int pb_MSG_DS_WD_UPDATE_TIME_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_UPDATE_TIME, sec_),
  };
  pb_MSG_DS_WD_UPDATE_TIME_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_DS_WD_UPDATE_TIME_descriptor_,
      pb_MSG_DS_WD_UPDATE_TIME::default_instance_,
      pb_MSG_DS_WD_UPDATE_TIME_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_UPDATE_TIME, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_DS_WD_UPDATE_TIME, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_DS_WD_UPDATE_TIME));
  pb_MSG_WD_DS_HEART_BEAT_descriptor_ = file->message_type(103);
  static const int pb_MSG_WD_DS_HEART_BEAT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_WD_DS_HEART_BEAT, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_WD_DS_HEART_BEAT, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_WD_DS_HEART_BEAT, disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_WD_DS_HEART_BEAT, net_),
  };
  pb_MSG_WD_DS_HEART_BEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_WD_DS_HEART_BEAT_descriptor_,
      pb_MSG_WD_DS_HEART_BEAT::default_instance_,
      pb_MSG_WD_DS_HEART_BEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_WD_DS_HEART_BEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_WD_DS_HEART_BEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_WD_DS_HEART_BEAT));
  pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_ = file->message_type(104);
  static const int pb_MSG_MPC_DS_MODULES_INFO_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK, module_list_),
  };
  pb_MSG_MPC_DS_MODULES_INFO_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_,
      pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance_,
      pb_MSG_MPC_DS_MODULES_INFO_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_DS_MODULES_INFO_ACK));
  pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_descriptor_ = pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_->nested_type(0);
  static const int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, module_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, net_),
  };
  pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_descriptor_,
      pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance_,
      pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item));
  pb_MSG_MPC_DS_START_MODULE_descriptor_ = file->message_type(105);
  static const int pb_MSG_MPC_DS_START_MODULE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_START_MODULE, module_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_START_MODULE, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_START_MODULE, args_),
  };
  pb_MSG_MPC_DS_START_MODULE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_DS_START_MODULE_descriptor_,
      pb_MSG_MPC_DS_START_MODULE::default_instance_,
      pb_MSG_MPC_DS_START_MODULE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_START_MODULE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_START_MODULE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_DS_START_MODULE));
  pb_MSG_MPC_DS_STOP_MODULE_descriptor_ = file->message_type(106);
  static const int pb_MSG_MPC_DS_STOP_MODULE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_STOP_MODULE, module_ip_),
  };
  pb_MSG_MPC_DS_STOP_MODULE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_MPC_DS_STOP_MODULE_descriptor_,
      pb_MSG_MPC_DS_STOP_MODULE::default_instance_,
      pb_MSG_MPC_DS_STOP_MODULE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_STOP_MODULE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_MPC_DS_STOP_MODULE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_MPC_DS_STOP_MODULE));
  Bucket_state_descriptor_ = file->enum_type(0);
  Module_Name_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cstore_2eprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_SU_CHK_BLOCK_descriptor_, &pb_MSG_SYS_SU_CHK_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_SU_PUT_BLOCK_descriptor_, &pb_MSG_SYS_SU_PUT_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_SU_GET_BLOCK_descriptor_, &pb_MSG_SYS_SU_GET_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_SU_DEL_BLOCK_descriptor_, &pb_MSG_SYS_SU_DEL_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_SU_DEL_BLOCK2_descriptor_, &pb_MSG_SYS_SU_DEL_BLOCK2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_GET_BLOCK_LIST_descriptor_, &pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_, &pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_descriptor_, &pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_PUT_BLOCK_descriptor_, &pb_MSG_SU_SU_PUT_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_GET_BLOCK_descriptor_, &pb_MSG_SU_SU_GET_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_DEL_BLOCK_descriptor_, &pb_MSG_SU_SU_DEL_BLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_DEL_BLOCK2_descriptor_, &pb_MSG_SU_SU_DEL_BLOCK2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_GET_CURRENT_SEQ_descriptor_, &pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_descriptor_, &pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_SU_HEARTBEAT_BUILD_descriptor_, &pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_SU_EXTENT_BUCKET_descriptor_, &pb_MSG_CS_SU_EXTENT_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_SU_MIGRATE_BUCKET_descriptor_, &pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_SU_DELETE_BUCKET_descriptor_, &pb_MSG_CS_SU_DELETE_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_SU_SET_BUCKET_STATE_descriptor_, &pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_USER_INFO_descriptor_, &pb_MSG_SYS_MU_GET_USER_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_USER_INFO_ACK_descriptor_, &pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_PUT_DIR_descriptor_, &pb_MSG_SYS_MU_PUT_DIR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_DEL_DIR_descriptor_, &pb_MSG_SYS_MU_DEL_DIR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_DIR_descriptor_, &pb_MSG_SYS_MU_GET_DIR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_, &pb_MSG_SYS_MU_GET_DIR_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_descriptor_, &pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_STAT_DIR_descriptor_, &pb_MSG_SYS_MU_STAT_DIR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_STAT_DIR_ACK_descriptor_, &pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_Meta_descriptor_, &Block_Meta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_DIR2_descriptor_, &pb_MSG_SYS_MU_GET_DIR2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_, &pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_descriptor_, &pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_MOV_DIR_descriptor_, &pb_MSG_SYS_MU_MOV_DIR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_Attr_descriptor_, &File_Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_PUT_FILE_descriptor_, &pb_MSG_SYS_MU_PUT_FILE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_PUT_FILE_ACK_descriptor_, &pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_DEL_FILE_descriptor_, &pb_MSG_SYS_MU_DEL_FILE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_FILE_descriptor_, &pb_MSG_SYS_MU_GET_FILE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_FILE_ACK_descriptor_, &pb_MSG_SYS_MU_GET_FILE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_MOV_FILE_descriptor_, &pb_MSG_SYS_MU_MOV_FILE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_USER_LOG_descriptor_, &pb_MSG_SYS_MU_GET_USER_LOG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_Meta_descriptor_, &File_Meta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Log_Entry_descriptor_, &Log_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_MU_GET_USER_LOG_ACK_descriptor_, &pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_MU_CREATE_USER_descriptor_, &pb_MSG_MPC_MU_CREATE_USER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_MU_DELETE_USER_descriptor_, &pb_MSG_MPC_MU_DELETE_USER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_MU_SET_BUCKET_STATE_descriptor_, &pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_MU_DELETE_BUCKET_descriptor_, &pb_MSG_CS_MU_DELETE_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_MU_MIGRATE_BUCKET_descriptor_, &pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_MU_EXTENT_BUCKET_descriptor_, &pb_MSG_CS_MU_EXTENT_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_descriptor_, &pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_descriptor_, &pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_MU_SYNC_HANDSHAKE_descriptor_, &pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_MU_PUSH_LOG_descriptor_, &pb_MSG_MU_MU_PUSH_LOG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_MU_PULL_LOG_ACK_descriptor_, &pb_MSG_MU_MU_PULL_LOG_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_Item_descriptor_, &Map_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hash_Version_descriptor_, &Hash_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sys_Order_descriptor_, &Sys_Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_descriptor_, &pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_descriptor_, &pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_MU_HASH_descriptor_, &pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_descriptor_, &pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_descriptor_, &pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_descriptor_, &pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_SU_HASH_descriptor_, &pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_descriptor_, &pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_descriptor_, &pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_descriptor_, &pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_descriptor_, &pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_descriptor_, &pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_CS_REGISTER_NODE_descriptor_, &pb_MSG_SU_CS_REGISTER_NODE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_CS_REGISTER_NODE_descriptor_, &pb_MSG_MU_CS_REGISTER_NODE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bucket_Item_descriptor_, &Bucket_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Module_Ip_descriptor_, &Module_Ip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IP_scope_descriptor_, &IP_scope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bucket_List_descriptor_, &Bucket_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_descriptor_, &pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_descriptor_, &pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_MU_HASH_descriptor_, &pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_descriptor_, &pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_descriptor_, &pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_descriptor_, &pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_SU_HASH_descriptor_, &pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_descriptor_, &pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_descriptor_, &pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MU_CS_HEARTBEAT_descriptor_, &pb_MSG_MU_CS_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_descriptor_, &pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_SU_CS_HEARTBEAT_descriptor_, &pb_MSG_SU_CS_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_RUBBISH_RECYCLE_descriptor_, &pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_descriptor_, &pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_descriptor_, &pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_MU_EXTENT_BUCKET_descriptor_, &pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_SU_EXTENT_BUCKET_descriptor_, &pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_GET_SU_RULE_ACK_descriptor_, &pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_GET_MU_RULE_ACK_descriptor_, &pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IP_bucket_descriptor_, &IP_bucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_SU_INIT_HASH_descriptor_, &pb_MSG_MPC_CS_SU_INIT_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_MU_INIT_HASH_descriptor_, &pb_MSG_MPC_CS_MU_INIT_HASH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_MU_BUCKET_ACK_descriptor_, &pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_SU_BUCKET_ACK_descriptor_, &pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_Block_descriptor_, &Node_Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_descriptor_, &pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_Bucket_List_descriptor_, &Report_Bucket_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_CS_MPC_REPORT_BUCKET_LIST_descriptor_, &pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_DS_WD_START_MODULE_descriptor_, &pb_MSG_DS_WD_START_MODULE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_DS_WD_UPDATE_TIME_descriptor_, &pb_MSG_DS_WD_UPDATE_TIME::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_WD_DS_HEART_BEAT_descriptor_, &pb_MSG_WD_DS_HEART_BEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_, &pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_descriptor_, &pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_DS_START_MODULE_descriptor_, &pb_MSG_MPC_DS_START_MODULE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_MPC_DS_STOP_MODULE_descriptor_, &pb_MSG_MPC_DS_STOP_MODULE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cstore_2eprotocol_2eproto() {
  delete pb_MSG_SYS_SU_CHK_BLOCK::default_instance_;
  delete pb_MSG_SYS_SU_CHK_BLOCK_reflection_;
  delete pb_MSG_SYS_SU_PUT_BLOCK::default_instance_;
  delete pb_MSG_SYS_SU_PUT_BLOCK_reflection_;
  delete pb_MSG_SYS_SU_GET_BLOCK::default_instance_;
  delete pb_MSG_SYS_SU_GET_BLOCK_reflection_;
  delete pb_MSG_SYS_SU_DEL_BLOCK::default_instance_;
  delete pb_MSG_SYS_SU_DEL_BLOCK_reflection_;
  delete pb_MSG_SYS_SU_DEL_BLOCK2::default_instance_;
  delete pb_MSG_SYS_SU_DEL_BLOCK2_reflection_;
  delete pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance_;
  delete pb_MSG_SU_SU_GET_BLOCK_LIST_reflection_;
  delete pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance_;
  delete pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_reflection_;
  delete pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance_;
  delete pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_reflection_;
  delete pb_MSG_SU_SU_PUT_BLOCK::default_instance_;
  delete pb_MSG_SU_SU_PUT_BLOCK_reflection_;
  delete pb_MSG_SU_SU_GET_BLOCK::default_instance_;
  delete pb_MSG_SU_SU_GET_BLOCK_reflection_;
  delete pb_MSG_SU_SU_DEL_BLOCK::default_instance_;
  delete pb_MSG_SU_SU_DEL_BLOCK_reflection_;
  delete pb_MSG_SU_SU_DEL_BLOCK2::default_instance_;
  delete pb_MSG_SU_SU_DEL_BLOCK2_reflection_;
  delete pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance_;
  delete pb_MSG_SU_SU_GET_CURRENT_SEQ_reflection_;
  delete pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance_;
  delete pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_reflection_;
  delete pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance_;
  delete pb_MSG_SU_SU_HEARTBEAT_BUILD_reflection_;
  delete pb_MSG_CS_SU_EXTENT_BUCKET::default_instance_;
  delete pb_MSG_CS_SU_EXTENT_BUCKET_reflection_;
  delete pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance_;
  delete pb_MSG_CS_SU_MIGRATE_BUCKET_reflection_;
  delete pb_MSG_CS_SU_DELETE_BUCKET::default_instance_;
  delete pb_MSG_CS_SU_DELETE_BUCKET_reflection_;
  delete pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance_;
  delete pb_MSG_CS_SU_SET_BUCKET_STATE_reflection_;
  delete pb_MSG_SYS_MU_GET_USER_INFO::default_instance_;
  delete pb_MSG_SYS_MU_GET_USER_INFO_reflection_;
  delete pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance_;
  delete pb_MSG_SYS_MU_GET_USER_INFO_ACK_reflection_;
  delete pb_MSG_SYS_MU_PUT_DIR::default_instance_;
  delete pb_MSG_SYS_MU_PUT_DIR_reflection_;
  delete pb_MSG_SYS_MU_DEL_DIR::default_instance_;
  delete pb_MSG_SYS_MU_DEL_DIR_reflection_;
  delete pb_MSG_SYS_MU_GET_DIR::default_instance_;
  delete pb_MSG_SYS_MU_GET_DIR_reflection_;
  delete pb_MSG_SYS_MU_GET_DIR_ACK::default_instance_;
  delete pb_MSG_SYS_MU_GET_DIR_ACK_reflection_;
  delete pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance_;
  delete pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_reflection_;
  delete pb_MSG_SYS_MU_STAT_DIR::default_instance_;
  delete pb_MSG_SYS_MU_STAT_DIR_reflection_;
  delete pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance_;
  delete pb_MSG_SYS_MU_STAT_DIR_ACK_reflection_;
  delete Block_Meta::default_instance_;
  delete Block_Meta_reflection_;
  delete pb_MSG_SYS_MU_GET_DIR2::default_instance_;
  delete pb_MSG_SYS_MU_GET_DIR2_reflection_;
  delete pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance_;
  delete pb_MSG_SYS_MU_GET_DIR2_ACK_reflection_;
  delete pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance_;
  delete pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_reflection_;
  delete pb_MSG_SYS_MU_MOV_DIR::default_instance_;
  delete pb_MSG_SYS_MU_MOV_DIR_reflection_;
  delete File_Attr::default_instance_;
  delete File_Attr_reflection_;
  delete pb_MSG_SYS_MU_PUT_FILE::default_instance_;
  delete pb_MSG_SYS_MU_PUT_FILE_reflection_;
  delete pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance_;
  delete pb_MSG_SYS_MU_PUT_FILE_ACK_reflection_;
  delete pb_MSG_SYS_MU_DEL_FILE::default_instance_;
  delete pb_MSG_SYS_MU_DEL_FILE_reflection_;
  delete pb_MSG_SYS_MU_GET_FILE::default_instance_;
  delete pb_MSG_SYS_MU_GET_FILE_reflection_;
  delete pb_MSG_SYS_MU_GET_FILE_ACK::default_instance_;
  delete pb_MSG_SYS_MU_GET_FILE_ACK_reflection_;
  delete pb_MSG_SYS_MU_MOV_FILE::default_instance_;
  delete pb_MSG_SYS_MU_MOV_FILE_reflection_;
  delete pb_MSG_SYS_MU_GET_USER_LOG::default_instance_;
  delete pb_MSG_SYS_MU_GET_USER_LOG_reflection_;
  delete File_Meta::default_instance_;
  delete File_Meta_reflection_;
  delete Log_Entry::default_instance_;
  delete Log_Entry_reflection_;
  delete pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance_;
  delete pb_MSG_SYS_MU_GET_USER_LOG_ACK_reflection_;
  delete pb_MSG_MPC_MU_CREATE_USER::default_instance_;
  delete pb_MSG_MPC_MU_CREATE_USER_reflection_;
  delete pb_MSG_MPC_MU_DELETE_USER::default_instance_;
  delete pb_MSG_MPC_MU_DELETE_USER_reflection_;
  delete pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance_;
  delete pb_MSG_CS_MU_SET_BUCKET_STATE_reflection_;
  delete pb_MSG_CS_MU_DELETE_BUCKET::default_instance_;
  delete pb_MSG_CS_MU_DELETE_BUCKET_reflection_;
  delete pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance_;
  delete pb_MSG_CS_MU_MIGRATE_BUCKET_reflection_;
  delete pb_MSG_CS_MU_EXTENT_BUCKET::default_instance_;
  delete pb_MSG_CS_MU_EXTENT_BUCKET_reflection_;
  delete pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance_;
  delete pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_reflection_;
  delete pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance_;
  delete pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_reflection_;
  delete pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance_;
  delete pb_MSG_MU_MU_SYNC_HANDSHAKE_reflection_;
  delete pb_MSG_MU_MU_PUSH_LOG::default_instance_;
  delete pb_MSG_MU_MU_PUSH_LOG_reflection_;
  delete pb_MSG_MU_MU_PULL_LOG_ACK::default_instance_;
  delete pb_MSG_MU_MU_PULL_LOG_ACK_reflection_;
  delete Map_Item::default_instance_;
  delete Map_Item_reflection_;
  delete Hash_Version::default_instance_;
  delete Hash_Version_reflection_;
  delete Sys_Order::default_instance_;
  delete Sys_Order_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_MU_HASH_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_SU_HASH_reflection_;
  delete pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance_;
  delete pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_reflection_;
  delete pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance_;
  delete pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_reflection_;
  delete pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance_;
  delete pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_reflection_;
  delete pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance_;
  delete pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_reflection_;
  delete pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance_;
  delete pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_reflection_;
  delete pb_MSG_SU_CS_REGISTER_NODE::default_instance_;
  delete pb_MSG_SU_CS_REGISTER_NODE_reflection_;
  delete pb_MSG_MU_CS_REGISTER_NODE::default_instance_;
  delete pb_MSG_MU_CS_REGISTER_NODE_reflection_;
  delete Bucket_Item::default_instance_;
  delete Bucket_Item_reflection_;
  delete Module_Ip::default_instance_;
  delete Module_Ip_reflection_;
  delete IP_scope::default_instance_;
  delete IP_scope_reflection_;
  delete Bucket_List::default_instance_;
  delete Bucket_List_reflection_;
  delete pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_reflection_;
  delete pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_reflection_;
  delete pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_MU_HASH_reflection_;
  delete pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_reflection_;
  delete pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_reflection_;
  delete pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_reflection_;
  delete pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_SU_HASH_reflection_;
  delete pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance_;
  delete pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_reflection_;
  delete pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance_;
  delete pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_reflection_;
  delete pb_MSG_MU_CS_HEARTBEAT::default_instance_;
  delete pb_MSG_MU_CS_HEARTBEAT_reflection_;
  delete pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance_;
  delete pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_reflection_;
  delete pb_MSG_SU_CS_HEARTBEAT::default_instance_;
  delete pb_MSG_SU_CS_HEARTBEAT_reflection_;
  delete pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance_;
  delete pb_MSG_MPC_CS_RUBBISH_RECYCLE_reflection_;
  delete pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance_;
  delete pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_reflection_;
  delete pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance_;
  delete pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_reflection_;
  delete pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance_;
  delete pb_MSG_MPC_CS_MU_EXTENT_BUCKET_reflection_;
  delete pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance_;
  delete pb_MSG_MPC_CS_SU_EXTENT_BUCKET_reflection_;
  delete pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance_;
  delete pb_MSG_MPC_CS_GET_SU_RULE_ACK_reflection_;
  delete pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance_;
  delete pb_MSG_MPC_CS_GET_MU_RULE_ACK_reflection_;
  delete IP_bucket::default_instance_;
  delete IP_bucket_reflection_;
  delete pb_MSG_MPC_CS_SU_INIT_HASH::default_instance_;
  delete pb_MSG_MPC_CS_SU_INIT_HASH_reflection_;
  delete pb_MSG_MPC_CS_MU_INIT_HASH::default_instance_;
  delete pb_MSG_MPC_CS_MU_INIT_HASH_reflection_;
  delete pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance_;
  delete pb_MSG_MPC_CS_MU_BUCKET_ACK_reflection_;
  delete pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance_;
  delete pb_MSG_MPC_CS_SU_BUCKET_ACK_reflection_;
  delete Node_Block::default_instance_;
  delete Node_Block_reflection_;
  delete pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance_;
  delete pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_reflection_;
  delete Report_Bucket_List::default_instance_;
  delete Report_Bucket_List_reflection_;
  delete pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance_;
  delete pb_MSG_CS_MPC_REPORT_BUCKET_LIST_reflection_;
  delete pb_MSG_DS_WD_START_MODULE::default_instance_;
  delete pb_MSG_DS_WD_START_MODULE_reflection_;
  delete pb_MSG_DS_WD_UPDATE_TIME::default_instance_;
  delete pb_MSG_DS_WD_UPDATE_TIME_reflection_;
  delete pb_MSG_WD_DS_HEART_BEAT::default_instance_;
  delete pb_MSG_WD_DS_HEART_BEAT_reflection_;
  delete pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance_;
  delete pb_MSG_MPC_DS_MODULES_INFO_ACK_reflection_;
  delete pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance_;
  delete pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_reflection_;
  delete pb_MSG_MPC_DS_START_MODULE::default_instance_;
  delete pb_MSG_MPC_DS_START_MODULE_reflection_;
  delete pb_MSG_MPC_DS_STOP_MODULE::default_instance_;
  delete pb_MSG_MPC_DS_STOP_MODULE_reflection_;
}

void protobuf_AddDesc_cstore_2eprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025cstore.protocol.proto\022\006cstore\".\n\027pb_MS"
    "G_SYS_SU_CHK_BLOCK\022\023\n\013block_index\030\001 \002(\t\""
    ".\n\027pb_MSG_SYS_SU_PUT_BLOCK\022\023\n\013block_inde"
    "x\030\001 \002(\t\".\n\027pb_MSG_SYS_SU_GET_BLOCK\022\023\n\013bl"
    "ock_index\030\001 \002(\t\".\n\027pb_MSG_SYS_SU_DEL_BLO"
    "CK\022\023\n\013block_index\030\001 \002(\t\"/\n\030pb_MSG_SYS_SU"
    "_DEL_BLOCK2\022\023\n\013block_index\030\001 \002(\t\"W\n\033pb_M"
    "SG_SU_SU_GET_BLOCK_LIST\022\024\n\014bucket_index\030"
    "\001 \002(\005\022\021\n\tstart_seq\030\002 \002(\003\022\017\n\007end_seq\030\003 \002("
    "\003\"\202\002\n\037pb_MSG_SU_SU_GET_BLOCK_LIST_ACK\022\024\n"
    "\014bucket_index\030\001 \002(\005\022\021\n\tstart_seq\030\002 \002(\003\022\017"
    "\n\007end_seq\030\003 \002(\003\022F\n\nblock_list\030\004 \003(\01322.cs"
    "tore.pb_MSG_SU_SU_GET_BLOCK_LIST_ACK.Blo"
    "ck_Item\032]\n\nBlock_Item\022\023\n\013block_index\030\001 \002"
    "(\t\022\021\n\tblock_seq\030\002 \002(\003\022\022\n\ntime_stamp\030\003 \002("
    "\003\022\023\n\013delete_flag\030\004 \002(\005\"@\n\026pb_MSG_SU_SU_P"
    "UT_BLOCK\022\023\n\013block_index\030\001 \002(\t\022\021\n\tblock_s"
    "eq\030\002 \002(\003\"-\n\026pb_MSG_SU_SU_GET_BLOCK\022\023\n\013bl"
    "ock_index\030\001 \002(\t\"@\n\026pb_MSG_SU_SU_DEL_BLOC"
    "K\022\023\n\013block_index\030\001 \002(\t\022\021\n\tblock_seq\030\002 \002("
    "\003\"A\n\027pb_MSG_SU_SU_DEL_BLOCK2\022\023\n\013block_in"
    "dex\030\001 \002(\t\022\021\n\tblock_seq\030\002 \002(\003\"4\n\034pb_MSG_S"
    "U_SU_GET_CURRENT_SEQ\022\024\n\014bucket_index\030\001 \002"
    "(\005\"M\n pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK\022\024"
    "\n\014bucket_index\030\001 \002(\005\022\023\n\013current_seq\030\002 \002("
    "\003\"4\n\034pb_MSG_SU_SU_HEARTBEAT_BUILD\022\024\n\014buc"
    "ket_index\030\001 \002(\005\"0\n\032pb_MSG_CS_SU_EXTENT_B"
    "UCKET\022\022\n\nnew_mod_nr\030\001 \002(\005\"\?\n\033pb_MSG_CS_S"
    "U_MIGRATE_BUCKET\022\024\n\014bucket_index\030\001 \002(\005\022\n"
    "\n\002ip\030\002 \002(\r\"2\n\032pb_MSG_CS_SU_DELETE_BUCKET"
    "\022\024\n\014bucket_index\030\001 \002(\005\"Z\n\035pb_MSG_CS_SU_S"
    "ET_BUCKET_STATE\022\024\n\014bucket_index\030\001 \002(\005\022#\n"
    "\005state\030\002 \002(\0162\024.cstore.Bucket_state\"9\n\033pb"
    "_MSG_SYS_MU_GET_USER_INFO\022\013\n\003uid\030\001 \002(\004\022\r"
    "\n\005token\030\002 \002(\t\"Z\n\037pb_MSG_SYS_MU_GET_USER_"
    "INFO_ACK\022\023\n\013quota_total\030\001 \002(\004\022\022\n\nquota_u"
    "sed\030\002 \002(\004\022\016\n\006seq_nr\030\003 \002(\004\"A\n\025pb_MSG_SYS_"
    "MU_PUT_DIR\022\013\n\003uid\030\001 \002(\004\022\r\n\005token\030\002 \002(\t\022\014"
    "\n\004path\030\003 \002(\014\"A\n\025pb_MSG_SYS_MU_DEL_DIR\022\013\n"
    "\003uid\030\001 \002(\004\022\r\n\005token\030\002 \002(\t\022\014\n\004path\030\003 \002(\014\""
    "A\n\025pb_MSG_SYS_MU_GET_DIR\022\013\n\003uid\030\001 \002(\004\022\r\n"
    "\005token\030\002 \002(\t\022\014\n\004path\030\003 \002(\014\"\200\001\n\031pb_MSG_SY"
    "S_MU_GET_DIR_ACK\022=\n\013dentry_list\030\001 \003(\0132(."
    "cstore.pb_MSG_SYS_MU_GET_DIR_ACK.DEntry\032"
    "$\n\006DEntry\022\014\n\004name\030\001 \002(\014\022\014\n\004type\030\002 \002(\r\"B\n"
    "\026pb_MSG_SYS_MU_STAT_DIR\022\013\n\003uid\030\001 \002(\004\022\r\n\005"
    "token\030\002 \002(\t\022\014\n\004path\030\003 \002(\014\"V\n\032pb_MSG_SYS_"
    "MU_STAT_DIR_ACK\022\014\n\004mode\030\001 \002(\r\022\r\n\005ctime\030\002"
    " \002(\004\022\r\n\005mtime\030\003 \002(\004\022\014\n\004size\030\004 \002(\004\"\036\n\nBlo"
    "ck_Meta\022\020\n\010checksum\030\001 \002(\t\"B\n\026pb_MSG_SYS_"
    "MU_GET_DIR2\022\013\n\003uid\030\001 \002(\004\022\r\n\005token\030\002 \002(\t\022"
    "\014\n\004path\030\003 \002(\014\"\366\001\n\032pb_MSG_SYS_MU_GET_DIR2"
    "_ACK\022>\n\013dentry_list\030\001 \003(\0132).cstore.pb_MS"
    "G_SYS_MU_GET_DIR2_ACK.DEntry\032\227\001\n\006DEntry\022"
    "\014\n\004type\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004mode\030\003 \002("
    "\r\022\r\n\005ctime\030\004 \002(\004\022\r\n\005mtime\030\005 \002(\004\022\014\n\004size\030"
    "\006 \002(\004\022\017\n\007version\030\007 \001(\004\022&\n\nblock_list\030\010 \003"
    "(\0132\022.cstore.Block_Meta\"X\n\025pb_MSG_SYS_MU_"
    "MOV_DIR\022\013\n\003uid\030\001 \002(\004\022\r\n\005token\030\002 \002(\t\022\020\n\010s"
    "rc_path\030\003 \002(\014\022\021\n\tdest_path\030\004 \002(\014\"d\n\tFile"
    "_Attr\022\017\n\007version\030\001 \002(\004\022\014\n\004mode\030\002 \002(\r\022\r\n\005"
    "ctime\030\003 \002(\004\022\r\n\005mtime\030\004 \002(\004\022\014\n\004type\030\005 \002(\r"
    "\022\014\n\004size\030\006 \002(\004\"\213\001\n\026pb_MSG_SYS_MU_PUT_FIL"
    "E\022\013\n\003uid\030\001 \002(\004\022\r\n\005token\030\002 \002(\t\022\014\n\004path\030\003 "
    "\002(\014\022\037\n\004attr\030\004 \002(\0132\021.cstore.File_Attr\022&\n\n"
    "block_list\030\005 \003(\0132\022.cstore.Block_Meta\"-\n\032"
    "pb_MSG_SYS_MU_PUT_FILE_ACK\022\017\n\007version\030\001 "
    "\002(\004\"B\n\026pb_MSG_SYS_MU_DEL_FILE\022\013\n\003uid\030\001 \002"
    "(\004\022\r\n\005token\030\002 \002(\t\022\014\n\004path\030\003 \002(\014\"B\n\026pb_MS"
    "G_SYS_MU_GET_FILE\022\013\n\003uid\030\001 \002(\004\022\r\n\005token\030"
    "\002 \002(\t\022\014\n\004path\030\003 \002(\014\"e\n\032pb_MSG_SYS_MU_GET"
    "_FILE_ACK\022\037\n\004attr\030\001 \002(\0132\021.cstore.File_At"
    "tr\022&\n\nblock_list\030\002 \003(\0132\022.cstore.Block_Me"
    "ta\"Y\n\026pb_MSG_SYS_MU_MOV_FILE\022\013\n\003uid\030\001 \002("
    "\004\022\r\n\005token\030\002 \002(\t\022\020\n\010src_path\030\003 \002(\014\022\021\n\tde"
    "st_path\030\004 \002(\014\"H\n\032pb_MSG_SYS_MU_GET_USER_"
    "LOG\022\013\n\003uid\030\001 \002(\004\022\r\n\005token\030\002 \002(\t\022\016\n\006seq_n"
    "r\030\003 \002(\004\"T\n\tFile_Meta\022\037\n\004attr\030\001 \002(\0132\021.cst"
    "ore.File_Attr\022&\n\nblock_list\030\002 \003(\0132\022.csto"
    "re.Block_Meta\"\241\001\n\tLog_Entry\022\016\n\006seq_nr\030\001 "
    "\002(\004\022\013\n\003uid\030\002 \002(\004\022\r\n\005token\030\003 \002(\t\022\017\n\007op_co"
    "de\030\004 \002(\r\022\014\n\004path\030\005 \001(\014\022\020\n\010src_path\030\006 \001(\014"
    "\022\021\n\tdest_path\030\007 \001(\014\022$\n\tfile_meta\030\010 \001(\0132\021"
    ".cstore.File_Meta\"E\n\036pb_MSG_SYS_MU_GET_U"
    "SER_LOG_ACK\022#\n\010log_list\030\001 \003(\0132\021.cstore.L"
    "og_Entry\"7\n\031pb_MSG_MPC_MU_CREATE_USER\022\013\n"
    "\003uid\030\001 \002(\004\022\r\n\005quota\030\002 \002(\004\"(\n\031pb_MSG_MPC_"
    "MU_DELETE_USER\022\013\n\003uid\030\001 \002(\004\"D\n\035pb_MSG_CS"
    "_MU_SET_BUCKET_STATE\022\024\n\014bucket_index\030\001 \002"
    "(\r\022\r\n\005state\030\002 \002(\r\"2\n\032pb_MSG_CS_MU_DELETE"
    "_BUCKET\022\024\n\014bucket_index\030\001 \002(\r\"F\n\033pb_MSG_"
    "CS_MU_MIGRATE_BUCKET\022\021\n\tsource_mu\030\001 \002(\r\022"
    "\024\n\014bucket_index\030\002 \002(\r\"-\n\032pb_MSG_CS_MU_EX"
    "TENT_BUCKET\022\017\n\007new_mod\030\001 \002(\r\"=\n%pb_MSG_M"
    "U_MU_MIGRATE_BUCKET_HANDSHAKE\022\024\n\014bucket_"
    "index\030\001 \002(\r\";\n)pb_MSG_MU_MU_MIGRATE_BUCK"
    "ET_HANDSHAKE_ACK\022\016\n\006seq_nr\030\001 \002(\004\"C\n\033pb_M"
    "SG_MU_MU_SYNC_HANDSHAKE\022\024\n\014bucket_index\030"
    "\001 \002(\004\022\016\n\006seq_nr\030\002 \002(\004\"<\n\025pb_MSG_MU_MU_PU"
    "SH_LOG\022#\n\010log_list\030\001 \003(\0132\021.cstore.Log_En"
    "try\"@\n\031pb_MSG_MU_MU_PULL_LOG_ACK\022#\n\010log_"
    "list\030\001 \003(\0132\021.cstore.Log_Entry\"1\n\010Map_Ite"
    "m\022\021\n\tModule_IP\030\001 \003(\r\022\022\n\nbucket_num\030\002 \002(\r"
    "\"H\n\014Hash_Version\022\"\n\010map_list\030\001 \003(\0132\020.cst"
    "ore.Map_Item\022\024\n\014hash_version\030\002 \002(\r\"N\n\tSy"
    "s_Order\022\024\n\014order_header\030\001 \002(\r\022\025\n\rorder_c"
    "ontent\030\002 \002(\014\022\024\n\014hash_version\030\003 \002(\r\"9\n pb"
    "_MSG_SYS_RS_UPDATE_ALL_MU_HASH\022\025\n\rlocal_"
    "version\030\001 \002(\r\"R\n$pb_MSG_SYS_RS_UPDATE_AL"
    "L_MU_HASH_ACK\022*\n\014hash_version\030\001 \002(\0132\024.cs"
    "tore.Hash_Version\"5\n\034pb_MSG_SYS_RS_UPDAT"
    "E_MU_HASH\022\025\n\rlocal_version\030\001 \002(\r\"H\n pb_M"
    "SG_SYS_RS_UPDATE_MU_HASH_ACK\022$\n\tsys_orde"
    "r\030\001 \003(\0132\021.cstore.Sys_Order\"9\n pb_MSG_SYS"
    "_RS_UPDATE_ALL_SU_HASH\022\025\n\rlocal_version\030"
    "\001 \002(\r\"R\n$pb_MSG_SYS_RS_UPDATE_ALL_SU_HAS"
    "H_ACK\022*\n\014hash_version\030\001 \002(\0132\024.cstore.Has"
    "h_Version\"5\n\034pb_MSG_SYS_RS_UPDATE_SU_HAS"
    "H\022\025\n\rlocal_version\030\001 \002(\r\"H\n pb_MSG_SYS_R"
    "S_UPDATE_SU_HASH_ACK\022$\n\tsys_order\030\001 \003(\0132"
    "\021.cstore.Sys_Order\"6\n pb_MSG_SYS_RS_GET_"
    "SU_BUCKET_ITEM\022\022\n\nbucket_num\030\001 \002(\r\"I\n$pb"
    "_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK\022!\n\007ip"
    "_list\030\001 \002(\0132\020.cstore.Map_Item\"6\n pb_MSG_"
    "SYS_RS_GET_MU_BUCKET_ITEM\022\022\n\nbucket_num\030"
    "\001 \002(\r\"I\n$pb_MSG_SYS_RS_GET_MU_BUCKET_ITE"
    "M_ACK\022!\n\007ip_list\030\001 \002(\0132\020.cstore.Map_Item"
    "\"-\n\032pb_MSG_SU_CS_REGISTER_NODE\022\017\n\007node_i"
    "p\030\001 \002(\r\"-\n\032pb_MSG_MU_CS_REGISTER_NODE\022\017\n"
    "\007node_ip\030\001 \002(\r\"2\n\013Bucket_Item\022\016\n\006bucket\030"
    "\001 \002(\r\022\023\n\013bucket_load\030\002 \002(\r\"(\n\tModule_Ip\022"
    "\n\n\002ip\030\001 \002(\r\022\017\n\007content\030\002 \002(\r\"0\n\010IP_scope"
    "\022\020\n\010Start_IP\030\001 \002(\r\022\022\n\nSerial_num\030\002 \002(\r\"F"
    "\n\013Bucket_List\022(\n\013bucket_item\030\001 \003(\0132\023.cst"
    "ore.Bucket_Item\022\r\n\005mu_ip\030\002 \002(\r\"8\n\037pb_MSG"
    "_RS_CS_UPDATE_ALL_MU_HASH\022\025\n\rlocal_versi"
    "on\030\001 \002(\r\"q\n#pb_MSG_RS_CS_UPDATE_ALL_MU_H"
    "ASH_ACK\022$\n\nmap_bucket\030\001 \003(\0132\020.cstore.Map"
    "_Item\022$\n\tsys_order\030\002 \003(\0132\021.cstore.Sys_Or"
    "der\".\n\033pb_MSG_RS_CS_UPDATE_MU_HASH\022\017\n\007ve"
    "rsion\030\001 \002(\r\"G\n\037pb_MSG_RS_CS_UPDATE_MU_HA"
    "SH_ACK\022$\n\tsys_order\030\001 \003(\0132\021.cstore.Sys_O"
    "rder\"8\n\037pb_MSG_RS_CS_UPDATE_ALL_SU_HASH\022"
    "\025\n\rlocal_version\030\001 \002(\r\"q\n#pb_MSG_RS_CS_U"
    "PDATE_ALL_SU_HASH_ACK\022$\n\nmap_bucket\030\001 \003("
    "\0132\020.cstore.Map_Item\022$\n\tsys_order\030\002 \003(\0132\021"
    ".cstore.Sys_Order\".\n\033pb_MSG_RS_CS_UPDATE"
    "_SU_HASH\022\017\n\007version\030\001 \002(\r\"G\n\037pb_MSG_RS_C"
    "S_UPDATE_SU_HASH_ACK\022$\n\tsys_order\030\001 \003(\0132"
    "\021.cstore.Sys_Order\">\n pb_MSG_MU_CS_HEART"
    "BEAT_HANDSHAKE\022\032\n\022storage_load_limit\030\001 \002"
    "(\r\"B\n\026pb_MSG_MU_CS_HEARTBEAT\022(\n\013bucket_i"
    "tem\030\001 \003(\0132\023.cstore.Bucket_Item\">\n pb_MSG"
    "_SU_CS_HEARTBEAT_HANDSHAKE\022\032\n\022storage_lo"
    "ad_limit\030\001 \002(\r\"B\n\026pb_MSG_SU_CS_HEARTBEAT"
    "\022(\n\013bucket_item\030\001 \003(\0132\023.cstore.Bucket_It"
    "em\".\n\035pb_MSG_MPC_CS_RUBBISH_RECYCLE\022\r\n\005s"
    "cale\030\001 \002(\r\"`\n\037pb_MSG_MPC_CS_SU_MIGRATE_B"
    "UCKET\022\021\n\tsource_ip\030\001 \002(\r\022\026\n\016destination_"
    "ip\030\002 \002(\r\022\022\n\nbucket_num\030\003 \002(\005\"`\n\037pb_MSG_M"
    "PC_CS_MU_MIGRATE_BUCKET\022\021\n\tsource_ip\030\001 \002"
    "(\r\022\026\n\016destination_ip\030\002 \002(\r\022\022\n\nbucket_num"
    "\030\003 \002(\005\"1\n\036pb_MSG_MPC_CS_MU_EXTENT_BUCKET"
    "\022\017\n\007new_mod\030\001 \002(\r\"1\n\036pb_MSG_MPC_CS_SU_EX"
    "TENT_BUCKET\022\017\n\007new_mod\030\001 \002(\r\"E\n\035pb_MSG_M"
    "PC_CS_GET_SU_RULE_ACK\022$\n\nmap_bucket\030\001 \003("
    "\0132\020.cstore.Map_Item\"E\n\035pb_MSG_MPC_CS_GET"
    "_MU_RULE_ACK\022$\n\nmap_bucket\030\001 \003(\0132\020.cstor"
    "e.Map_Item\"(\n\tIP_bucket\022\n\n\002ip\030\001 \002(\r\022\017\n\007b"
    "uckets\030\002 \003(\r\"e\n\032pb_MSG_MPC_CS_SU_INIT_HA"
    "SH\022#\n\tmodule_ip\030\001 \003(\0132\020.cstore.IP_scope\022"
    "\013\n\003mod\030\002 \002(\r\022\025\n\rduplicate_num\030\003 \002(\r\"e\n\032p"
    "b_MSG_MPC_CS_MU_INIT_HASH\022#\n\tmodule_ip\030\001"
    " \003(\0132\020.cstore.IP_scope\022\013\n\003mod\030\002 \002(\r\022\025\n\rd"
    "uplicate_num\030\003 \002(\r\"G\n\033pb_MSG_MPC_CS_MU_B"
    "UCKET_ACK\022(\n\013bucket_list\030\001 \003(\0132\023.cstore."
    "Bucket_List\"G\n\033pb_MSG_MPC_CS_SU_BUCKET_A"
    "CK\022(\n\013bucket_list\030\001 \003(\0132\023.cstore.Bucket_"
    "List\"a\n\nNode_Block\022\017\n\007node_ip\030\001 \002(\005\022\025\n\rb"
    "ucket_number\030\002 \002(\005\022\024\n\014block_number\030\003 \002(\005"
    "\022\025\n\rstorage_limit\030\004 \002(\005\"\225\001\n\037pb_MSG_MPC_C"
    "S_GET_BLOCK_NUM_ACK\022(\n\014su_node_list\030\001 \003("
    "\0132\022.cstore.Node_Block\022(\n\014mu_node_list\030\002 "
    "\003(\0132\022.cstore.Node_Block\022\016\n\006su_dup\030\003 \002(\005\022"
    "\016\n\006mu_dup\030\004 \002(\005\"_\n\022Report_Bucket_List\022-\n"
    "\020node_bucket_list\030\001 \002(\0132\023.cstore.Bucket_"
    "List\022\032\n\022node_storage_limit\030\002 \002(\005\"\252\001\n pb_"
    "MSG_CS_MPC_REPORT_BUCKET_LIST\0222\n\016mu_buck"
    "et_list\030\001 \003(\0132\032.cstore.Report_Bucket_Lis"
    "t\0222\n\016su_bucket_list\030\002 \003(\0132\032.cstore.Repor"
    "t_Bucket_List\022\016\n\006su_dup\030\003 \002(\005\022\016\n\006mu_dup\030"
    "\004 \002(\005\"N\n\031pb_MSG_DS_WD_START_MODULE\022#\n\006mo"
    "dule\030\001 \002(\0162\023.cstore.Module_Name\022\014\n\004args\030"
    "\002 \001(\t\"\'\n\030pb_MSG_DS_WD_UPDATE_TIME\022\013\n\003sec"
    "\030\001 \002(\004\"f\n\027pb_MSG_WD_DS_HEART_BEAT\022#\n\006mod"
    "ule\030\001 \002(\0162\023.cstore.Module_Name\022\013\n\003mem\030\002 "
    "\002(\r\022\014\n\004disk\030\003 \002(\r\022\013\n\003net\030\004 \002(\r\"\330\001\n\036pb_MS"
    "G_MPC_DS_MODULES_INFO_ACK\022G\n\013module_list"
    "\030\001 \003(\01322.cstore.pb_MSG_MPC_DS_MODULES_IN"
    "FO_ACK.Module_Item\032m\n\013Module_Item\022\021\n\tMod"
    "ule_IP\030\001 \002(\r\022#\n\006module\030\002 \002(\0162\023.cstore.Mo"
    "dule_Name\022\013\n\003mem\030\003 \002(\r\022\014\n\004disk\030\004 \002(\r\022\013\n\003"
    "net\030\005 \002(\r\"g\n\032pb_MSG_MPC_DS_START_MODULE\022"
    "\021\n\tModule_IP\030\001 \002(\r\022(\n\013module_name\030\002 \002(\0162"
    "\023.cstore.Module_Name\022\014\n\004args\030\003 \001(\t\".\n\031pb"
    "_MSG_MPC_DS_STOP_MODULE\022\021\n\tModule_IP\030\001 \002"
    "(\r*0\n\014Bucket_state\022\010\n\004STOP\020\001\022\010\n\004WORK\020\002\022\014"
    "\n\010RECOVERY\020\003*g\n\013Module_Name\022\r\n\tNO_module"
    "\020\000\022\r\n\tRS_module\020\001\022\r\n\tCA_module\020\002\022\r\n\tCS_m"
    "odule\020\003\022\r\n\tMU_module\020\004\022\r\n\tSU_module\020\005", 8397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cstore.protocol.proto", &protobuf_RegisterTypes);
  pb_MSG_SYS_SU_CHK_BLOCK::default_instance_ = new pb_MSG_SYS_SU_CHK_BLOCK();
  pb_MSG_SYS_SU_PUT_BLOCK::default_instance_ = new pb_MSG_SYS_SU_PUT_BLOCK();
  pb_MSG_SYS_SU_GET_BLOCK::default_instance_ = new pb_MSG_SYS_SU_GET_BLOCK();
  pb_MSG_SYS_SU_DEL_BLOCK::default_instance_ = new pb_MSG_SYS_SU_DEL_BLOCK();
  pb_MSG_SYS_SU_DEL_BLOCK2::default_instance_ = new pb_MSG_SYS_SU_DEL_BLOCK2();
  pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance_ = new pb_MSG_SU_SU_GET_BLOCK_LIST();
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance_ = new pb_MSG_SU_SU_GET_BLOCK_LIST_ACK();
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance_ = new pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item();
  pb_MSG_SU_SU_PUT_BLOCK::default_instance_ = new pb_MSG_SU_SU_PUT_BLOCK();
  pb_MSG_SU_SU_GET_BLOCK::default_instance_ = new pb_MSG_SU_SU_GET_BLOCK();
  pb_MSG_SU_SU_DEL_BLOCK::default_instance_ = new pb_MSG_SU_SU_DEL_BLOCK();
  pb_MSG_SU_SU_DEL_BLOCK2::default_instance_ = new pb_MSG_SU_SU_DEL_BLOCK2();
  pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance_ = new pb_MSG_SU_SU_GET_CURRENT_SEQ();
  pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance_ = new pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK();
  pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance_ = new pb_MSG_SU_SU_HEARTBEAT_BUILD();
  pb_MSG_CS_SU_EXTENT_BUCKET::default_instance_ = new pb_MSG_CS_SU_EXTENT_BUCKET();
  pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance_ = new pb_MSG_CS_SU_MIGRATE_BUCKET();
  pb_MSG_CS_SU_DELETE_BUCKET::default_instance_ = new pb_MSG_CS_SU_DELETE_BUCKET();
  pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance_ = new pb_MSG_CS_SU_SET_BUCKET_STATE();
  pb_MSG_SYS_MU_GET_USER_INFO::default_instance_ = new pb_MSG_SYS_MU_GET_USER_INFO();
  pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance_ = new pb_MSG_SYS_MU_GET_USER_INFO_ACK();
  pb_MSG_SYS_MU_PUT_DIR::default_instance_ = new pb_MSG_SYS_MU_PUT_DIR();
  pb_MSG_SYS_MU_DEL_DIR::default_instance_ = new pb_MSG_SYS_MU_DEL_DIR();
  pb_MSG_SYS_MU_GET_DIR::default_instance_ = new pb_MSG_SYS_MU_GET_DIR();
  pb_MSG_SYS_MU_GET_DIR_ACK::default_instance_ = new pb_MSG_SYS_MU_GET_DIR_ACK();
  pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance_ = new pb_MSG_SYS_MU_GET_DIR_ACK_DEntry();
  pb_MSG_SYS_MU_STAT_DIR::default_instance_ = new pb_MSG_SYS_MU_STAT_DIR();
  pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance_ = new pb_MSG_SYS_MU_STAT_DIR_ACK();
  Block_Meta::default_instance_ = new Block_Meta();
  pb_MSG_SYS_MU_GET_DIR2::default_instance_ = new pb_MSG_SYS_MU_GET_DIR2();
  pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance_ = new pb_MSG_SYS_MU_GET_DIR2_ACK();
  pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance_ = new pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry();
  pb_MSG_SYS_MU_MOV_DIR::default_instance_ = new pb_MSG_SYS_MU_MOV_DIR();
  File_Attr::default_instance_ = new File_Attr();
  pb_MSG_SYS_MU_PUT_FILE::default_instance_ = new pb_MSG_SYS_MU_PUT_FILE();
  pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance_ = new pb_MSG_SYS_MU_PUT_FILE_ACK();
  pb_MSG_SYS_MU_DEL_FILE::default_instance_ = new pb_MSG_SYS_MU_DEL_FILE();
  pb_MSG_SYS_MU_GET_FILE::default_instance_ = new pb_MSG_SYS_MU_GET_FILE();
  pb_MSG_SYS_MU_GET_FILE_ACK::default_instance_ = new pb_MSG_SYS_MU_GET_FILE_ACK();
  pb_MSG_SYS_MU_MOV_FILE::default_instance_ = new pb_MSG_SYS_MU_MOV_FILE();
  pb_MSG_SYS_MU_GET_USER_LOG::default_instance_ = new pb_MSG_SYS_MU_GET_USER_LOG();
  File_Meta::default_instance_ = new File_Meta();
  Log_Entry::default_instance_ = new Log_Entry();
  pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance_ = new pb_MSG_SYS_MU_GET_USER_LOG_ACK();
  pb_MSG_MPC_MU_CREATE_USER::default_instance_ = new pb_MSG_MPC_MU_CREATE_USER();
  pb_MSG_MPC_MU_DELETE_USER::default_instance_ = new pb_MSG_MPC_MU_DELETE_USER();
  pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance_ = new pb_MSG_CS_MU_SET_BUCKET_STATE();
  pb_MSG_CS_MU_DELETE_BUCKET::default_instance_ = new pb_MSG_CS_MU_DELETE_BUCKET();
  pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance_ = new pb_MSG_CS_MU_MIGRATE_BUCKET();
  pb_MSG_CS_MU_EXTENT_BUCKET::default_instance_ = new pb_MSG_CS_MU_EXTENT_BUCKET();
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance_ = new pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE();
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance_ = new pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK();
  pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance_ = new pb_MSG_MU_MU_SYNC_HANDSHAKE();
  pb_MSG_MU_MU_PUSH_LOG::default_instance_ = new pb_MSG_MU_MU_PUSH_LOG();
  pb_MSG_MU_MU_PULL_LOG_ACK::default_instance_ = new pb_MSG_MU_MU_PULL_LOG_ACK();
  Map_Item::default_instance_ = new Map_Item();
  Hash_Version::default_instance_ = new Hash_Version();
  Sys_Order::default_instance_ = new Sys_Order();
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance_ = new pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH();
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance_ = new pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK();
  pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance_ = new pb_MSG_SYS_RS_UPDATE_MU_HASH();
  pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance_ = new pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK();
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance_ = new pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH();
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance_ = new pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK();
  pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance_ = new pb_MSG_SYS_RS_UPDATE_SU_HASH();
  pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance_ = new pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK();
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance_ = new pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM();
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance_ = new pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK();
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance_ = new pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM();
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance_ = new pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK();
  pb_MSG_SU_CS_REGISTER_NODE::default_instance_ = new pb_MSG_SU_CS_REGISTER_NODE();
  pb_MSG_MU_CS_REGISTER_NODE::default_instance_ = new pb_MSG_MU_CS_REGISTER_NODE();
  Bucket_Item::default_instance_ = new Bucket_Item();
  Module_Ip::default_instance_ = new Module_Ip();
  IP_scope::default_instance_ = new IP_scope();
  Bucket_List::default_instance_ = new Bucket_List();
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance_ = new pb_MSG_RS_CS_UPDATE_ALL_MU_HASH();
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance_ = new pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK();
  pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance_ = new pb_MSG_RS_CS_UPDATE_MU_HASH();
  pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance_ = new pb_MSG_RS_CS_UPDATE_MU_HASH_ACK();
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance_ = new pb_MSG_RS_CS_UPDATE_ALL_SU_HASH();
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance_ = new pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK();
  pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance_ = new pb_MSG_RS_CS_UPDATE_SU_HASH();
  pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance_ = new pb_MSG_RS_CS_UPDATE_SU_HASH_ACK();
  pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance_ = new pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE();
  pb_MSG_MU_CS_HEARTBEAT::default_instance_ = new pb_MSG_MU_CS_HEARTBEAT();
  pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance_ = new pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE();
  pb_MSG_SU_CS_HEARTBEAT::default_instance_ = new pb_MSG_SU_CS_HEARTBEAT();
  pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance_ = new pb_MSG_MPC_CS_RUBBISH_RECYCLE();
  pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance_ = new pb_MSG_MPC_CS_SU_MIGRATE_BUCKET();
  pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance_ = new pb_MSG_MPC_CS_MU_MIGRATE_BUCKET();
  pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance_ = new pb_MSG_MPC_CS_MU_EXTENT_BUCKET();
  pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance_ = new pb_MSG_MPC_CS_SU_EXTENT_BUCKET();
  pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance_ = new pb_MSG_MPC_CS_GET_SU_RULE_ACK();
  pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance_ = new pb_MSG_MPC_CS_GET_MU_RULE_ACK();
  IP_bucket::default_instance_ = new IP_bucket();
  pb_MSG_MPC_CS_SU_INIT_HASH::default_instance_ = new pb_MSG_MPC_CS_SU_INIT_HASH();
  pb_MSG_MPC_CS_MU_INIT_HASH::default_instance_ = new pb_MSG_MPC_CS_MU_INIT_HASH();
  pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance_ = new pb_MSG_MPC_CS_MU_BUCKET_ACK();
  pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance_ = new pb_MSG_MPC_CS_SU_BUCKET_ACK();
  Node_Block::default_instance_ = new Node_Block();
  pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance_ = new pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK();
  Report_Bucket_List::default_instance_ = new Report_Bucket_List();
  pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance_ = new pb_MSG_CS_MPC_REPORT_BUCKET_LIST();
  pb_MSG_DS_WD_START_MODULE::default_instance_ = new pb_MSG_DS_WD_START_MODULE();
  pb_MSG_DS_WD_UPDATE_TIME::default_instance_ = new pb_MSG_DS_WD_UPDATE_TIME();
  pb_MSG_WD_DS_HEART_BEAT::default_instance_ = new pb_MSG_WD_DS_HEART_BEAT();
  pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance_ = new pb_MSG_MPC_DS_MODULES_INFO_ACK();
  pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance_ = new pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item();
  pb_MSG_MPC_DS_START_MODULE::default_instance_ = new pb_MSG_MPC_DS_START_MODULE();
  pb_MSG_MPC_DS_STOP_MODULE::default_instance_ = new pb_MSG_MPC_DS_STOP_MODULE();
  pb_MSG_SYS_SU_CHK_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_SU_PUT_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_SU_GET_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_SU_DEL_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_SU_DEL_BLOCK2::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_PUT_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_GET_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_DEL_BLOCK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_DEL_BLOCK2::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_SU_EXTENT_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_SU_DELETE_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_USER_INFO::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_PUT_DIR::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_DEL_DIR::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_DIR::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_DIR_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_STAT_DIR::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance_->InitAsDefaultInstance();
  Block_Meta::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_DIR2::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_MOV_DIR::default_instance_->InitAsDefaultInstance();
  File_Attr::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_PUT_FILE::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_DEL_FILE::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_FILE::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_FILE_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_MOV_FILE::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_USER_LOG::default_instance_->InitAsDefaultInstance();
  File_Meta::default_instance_->InitAsDefaultInstance();
  Log_Entry::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_MU_CREATE_USER::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_MU_DELETE_USER::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_MU_DELETE_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_MU_EXTENT_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_MU_PUSH_LOG::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_MU_PULL_LOG_ACK::default_instance_->InitAsDefaultInstance();
  Map_Item::default_instance_->InitAsDefaultInstance();
  Hash_Version::default_instance_->InitAsDefaultInstance();
  Sys_Order::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance_->InitAsDefaultInstance();
  pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_CS_REGISTER_NODE::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_CS_REGISTER_NODE::default_instance_->InitAsDefaultInstance();
  Bucket_Item::default_instance_->InitAsDefaultInstance();
  Module_Ip::default_instance_->InitAsDefaultInstance();
  IP_scope::default_instance_->InitAsDefaultInstance();
  Bucket_List::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance_->InitAsDefaultInstance();
  pb_MSG_MU_CS_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance_->InitAsDefaultInstance();
  pb_MSG_SU_CS_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance_->InitAsDefaultInstance();
  IP_bucket::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_SU_INIT_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_MU_INIT_HASH::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance_->InitAsDefaultInstance();
  Node_Block::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance_->InitAsDefaultInstance();
  Report_Bucket_List::default_instance_->InitAsDefaultInstance();
  pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance_->InitAsDefaultInstance();
  pb_MSG_DS_WD_START_MODULE::default_instance_->InitAsDefaultInstance();
  pb_MSG_DS_WD_UPDATE_TIME::default_instance_->InitAsDefaultInstance();
  pb_MSG_WD_DS_HEART_BEAT::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_DS_START_MODULE::default_instance_->InitAsDefaultInstance();
  pb_MSG_MPC_DS_STOP_MODULE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cstore_2eprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cstore_2eprotocol_2eproto {
  StaticDescriptorInitializer_cstore_2eprotocol_2eproto() {
    protobuf_AddDesc_cstore_2eprotocol_2eproto();
  }
} static_descriptor_initializer_cstore_2eprotocol_2eproto_;

const ::google::protobuf::EnumDescriptor* Bucket_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bucket_state_descriptor_;
}
bool Bucket_state_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Module_Name_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Module_Name_descriptor_;
}
bool Module_Name_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_SU_CHK_BLOCK::kBlockIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_SU_CHK_BLOCK::pb_MSG_SYS_SU_CHK_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_SU_CHK_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SYS_SU_CHK_BLOCK::pb_MSG_SYS_SU_CHK_BLOCK(const pb_MSG_SYS_SU_CHK_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_CHK_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_SU_CHK_BLOCK::~pb_MSG_SYS_SU_CHK_BLOCK() {
  SharedDtor();
}

void pb_MSG_SYS_SU_CHK_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_SU_CHK_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_CHK_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_SU_CHK_BLOCK_descriptor_;
}

const pb_MSG_SYS_SU_CHK_BLOCK& pb_MSG_SYS_SU_CHK_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_SU_CHK_BLOCK* pb_MSG_SYS_SU_CHK_BLOCK::default_instance_ = NULL;

pb_MSG_SYS_SU_CHK_BLOCK* pb_MSG_SYS_SU_CHK_BLOCK::New() const {
  return new pb_MSG_SYS_SU_CHK_BLOCK;
}

void pb_MSG_SYS_SU_CHK_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_SU_CHK_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_SU_CHK_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_SU_CHK_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_SU_CHK_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_SU_CHK_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_SU_CHK_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_SU_CHK_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_SU_CHK_BLOCK::MergeFrom(const pb_MSG_SYS_SU_CHK_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_SU_CHK_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_CHK_BLOCK::CopyFrom(const pb_MSG_SYS_SU_CHK_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_SU_CHK_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_SU_CHK_BLOCK::Swap(pb_MSG_SYS_SU_CHK_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_SU_CHK_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_SU_CHK_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SYS_SU_CHK_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_SU_PUT_BLOCK::kBlockIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_SU_PUT_BLOCK::pb_MSG_SYS_SU_PUT_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_SU_PUT_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SYS_SU_PUT_BLOCK::pb_MSG_SYS_SU_PUT_BLOCK(const pb_MSG_SYS_SU_PUT_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_PUT_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_SU_PUT_BLOCK::~pb_MSG_SYS_SU_PUT_BLOCK() {
  SharedDtor();
}

void pb_MSG_SYS_SU_PUT_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_SU_PUT_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_PUT_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_SU_PUT_BLOCK_descriptor_;
}

const pb_MSG_SYS_SU_PUT_BLOCK& pb_MSG_SYS_SU_PUT_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_SU_PUT_BLOCK* pb_MSG_SYS_SU_PUT_BLOCK::default_instance_ = NULL;

pb_MSG_SYS_SU_PUT_BLOCK* pb_MSG_SYS_SU_PUT_BLOCK::New() const {
  return new pb_MSG_SYS_SU_PUT_BLOCK;
}

void pb_MSG_SYS_SU_PUT_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_SU_PUT_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_SU_PUT_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_SU_PUT_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_SU_PUT_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_SU_PUT_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_SU_PUT_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_SU_PUT_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_SU_PUT_BLOCK::MergeFrom(const pb_MSG_SYS_SU_PUT_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_SU_PUT_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_PUT_BLOCK::CopyFrom(const pb_MSG_SYS_SU_PUT_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_SU_PUT_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_SU_PUT_BLOCK::Swap(pb_MSG_SYS_SU_PUT_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_SU_PUT_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_SU_PUT_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SYS_SU_PUT_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_SU_GET_BLOCK::kBlockIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_SU_GET_BLOCK::pb_MSG_SYS_SU_GET_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_SU_GET_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SYS_SU_GET_BLOCK::pb_MSG_SYS_SU_GET_BLOCK(const pb_MSG_SYS_SU_GET_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_GET_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_SU_GET_BLOCK::~pb_MSG_SYS_SU_GET_BLOCK() {
  SharedDtor();
}

void pb_MSG_SYS_SU_GET_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_SU_GET_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_GET_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_SU_GET_BLOCK_descriptor_;
}

const pb_MSG_SYS_SU_GET_BLOCK& pb_MSG_SYS_SU_GET_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_SU_GET_BLOCK* pb_MSG_SYS_SU_GET_BLOCK::default_instance_ = NULL;

pb_MSG_SYS_SU_GET_BLOCK* pb_MSG_SYS_SU_GET_BLOCK::New() const {
  return new pb_MSG_SYS_SU_GET_BLOCK;
}

void pb_MSG_SYS_SU_GET_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_SU_GET_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_SU_GET_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_SU_GET_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_SU_GET_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_SU_GET_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_SU_GET_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_SU_GET_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_SU_GET_BLOCK::MergeFrom(const pb_MSG_SYS_SU_GET_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_SU_GET_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_GET_BLOCK::CopyFrom(const pb_MSG_SYS_SU_GET_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_SU_GET_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_SU_GET_BLOCK::Swap(pb_MSG_SYS_SU_GET_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_SU_GET_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_SU_GET_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SYS_SU_GET_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_SU_DEL_BLOCK::kBlockIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_SU_DEL_BLOCK::pb_MSG_SYS_SU_DEL_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_SU_DEL_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SYS_SU_DEL_BLOCK::pb_MSG_SYS_SU_DEL_BLOCK(const pb_MSG_SYS_SU_DEL_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_DEL_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_SU_DEL_BLOCK::~pb_MSG_SYS_SU_DEL_BLOCK() {
  SharedDtor();
}

void pb_MSG_SYS_SU_DEL_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_SU_DEL_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_DEL_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_SU_DEL_BLOCK_descriptor_;
}

const pb_MSG_SYS_SU_DEL_BLOCK& pb_MSG_SYS_SU_DEL_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_SU_DEL_BLOCK* pb_MSG_SYS_SU_DEL_BLOCK::default_instance_ = NULL;

pb_MSG_SYS_SU_DEL_BLOCK* pb_MSG_SYS_SU_DEL_BLOCK::New() const {
  return new pb_MSG_SYS_SU_DEL_BLOCK;
}

void pb_MSG_SYS_SU_DEL_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_SU_DEL_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_SU_DEL_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_SU_DEL_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_SU_DEL_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_SU_DEL_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_SU_DEL_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_SU_DEL_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_SU_DEL_BLOCK::MergeFrom(const pb_MSG_SYS_SU_DEL_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_SU_DEL_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_DEL_BLOCK::CopyFrom(const pb_MSG_SYS_SU_DEL_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_SU_DEL_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_SU_DEL_BLOCK::Swap(pb_MSG_SYS_SU_DEL_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_SU_DEL_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_SU_DEL_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SYS_SU_DEL_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_SU_DEL_BLOCK2::kBlockIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_SU_DEL_BLOCK2::pb_MSG_SYS_SU_DEL_BLOCK2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_SU_DEL_BLOCK2::InitAsDefaultInstance() {
}

pb_MSG_SYS_SU_DEL_BLOCK2::pb_MSG_SYS_SU_DEL_BLOCK2(const pb_MSG_SYS_SU_DEL_BLOCK2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_DEL_BLOCK2::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_SU_DEL_BLOCK2::~pb_MSG_SYS_SU_DEL_BLOCK2() {
  SharedDtor();
}

void pb_MSG_SYS_SU_DEL_BLOCK2::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_SU_DEL_BLOCK2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_SU_DEL_BLOCK2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_SU_DEL_BLOCK2_descriptor_;
}

const pb_MSG_SYS_SU_DEL_BLOCK2& pb_MSG_SYS_SU_DEL_BLOCK2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_SU_DEL_BLOCK2* pb_MSG_SYS_SU_DEL_BLOCK2::default_instance_ = NULL;

pb_MSG_SYS_SU_DEL_BLOCK2* pb_MSG_SYS_SU_DEL_BLOCK2::New() const {
  return new pb_MSG_SYS_SU_DEL_BLOCK2;
}

void pb_MSG_SYS_SU_DEL_BLOCK2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_SU_DEL_BLOCK2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_SU_DEL_BLOCK2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_SU_DEL_BLOCK2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_SU_DEL_BLOCK2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_SU_DEL_BLOCK2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_SU_DEL_BLOCK2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_SU_DEL_BLOCK2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_SU_DEL_BLOCK2::MergeFrom(const pb_MSG_SYS_SU_DEL_BLOCK2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_SU_DEL_BLOCK2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_SU_DEL_BLOCK2::CopyFrom(const pb_MSG_SYS_SU_DEL_BLOCK2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_SU_DEL_BLOCK2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_SU_DEL_BLOCK2::Swap(pb_MSG_SYS_SU_DEL_BLOCK2* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_SU_DEL_BLOCK2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_SU_DEL_BLOCK2_descriptor_;
  metadata.reflection = pb_MSG_SYS_SU_DEL_BLOCK2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_GET_BLOCK_LIST::kBucketIndexFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST::kStartSeqFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST::kEndSeqFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_GET_BLOCK_LIST::pb_MSG_SU_SU_GET_BLOCK_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_GET_BLOCK_LIST::pb_MSG_SU_SU_GET_BLOCK_LIST(const pb_MSG_SU_SU_GET_BLOCK_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  start_seq_ = GOOGLE_LONGLONG(0);
  end_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_GET_BLOCK_LIST::~pb_MSG_SU_SU_GET_BLOCK_LIST() {
  SharedDtor();
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_GET_BLOCK_LIST_descriptor_;
}

const pb_MSG_SU_SU_GET_BLOCK_LIST& pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_GET_BLOCK_LIST* pb_MSG_SU_SU_GET_BLOCK_LIST::default_instance_ = NULL;

pb_MSG_SU_SU_GET_BLOCK_LIST* pb_MSG_SU_SU_GET_BLOCK_LIST::New() const {
  return new pb_MSG_SU_SU_GET_BLOCK_LIST;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
    start_seq_ = GOOGLE_LONGLONG(0);
    end_seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_GET_BLOCK_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_seq;
        break;
      }
      
      // required int64 start_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_seq_)));
          set_has_start_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_seq;
        break;
      }
      
      // required int64 end_seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_seq_)));
          set_has_end_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  // required int64 start_seq = 2;
  if (has_start_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_seq(), output);
  }
  
  // required int64 end_seq = 3;
  if (has_end_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_GET_BLOCK_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  // required int64 start_seq = 2;
  if (has_start_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_seq(), target);
  }
  
  // required int64 end_seq = 3;
  if (has_end_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_GET_BLOCK_LIST::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
    // required int64 start_seq = 2;
    if (has_start_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_seq());
    }
    
    // required int64 end_seq = 3;
    if (has_end_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_GET_BLOCK_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_GET_BLOCK_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::MergeFrom(const pb_MSG_SU_SU_GET_BLOCK_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_start_seq()) {
      set_start_seq(from.start_seq());
    }
    if (from.has_end_seq()) {
      set_end_seq(from.end_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::CopyFrom(const pb_MSG_SU_SU_GET_BLOCK_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_GET_BLOCK_LIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST::Swap(pb_MSG_SU_SU_GET_BLOCK_LIST* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(start_seq_, other->start_seq_);
    std::swap(end_seq_, other->end_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_GET_BLOCK_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_GET_BLOCK_LIST_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_GET_BLOCK_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::kBlockIndexFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::kBlockSeqFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::kTimeStampFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::kDeleteFlagFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item(const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_seq_ = GOOGLE_LONGLONG(0);
  time_stamp_ = GOOGLE_LONGLONG(0);
  delete_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::~pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item() {
  SharedDtor();
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_descriptor_;
}

const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item& pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::default_instance_ = NULL;

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::New() const {
  return new pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
    block_seq_ = GOOGLE_LONGLONG(0);
    time_stamp_ = GOOGLE_LONGLONG(0);
    delete_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_seq;
        break;
      }
      
      // required int64 block_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_seq_)));
          set_has_block_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }
      
      // required int64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delete_flag;
        break;
      }
      
      // required int32 delete_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delete_flag_)));
          set_has_delete_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->block_seq(), output);
  }
  
  // required int64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }
  
  // required int32 delete_flag = 4;
  if (has_delete_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->delete_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->block_seq(), target);
  }
  
  // required int64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }
  
  // required int32 delete_flag = 4;
  if (has_delete_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->delete_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
    // required int64 block_seq = 2;
    if (has_block_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_seq());
    }
    
    // required int64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }
    
    // required int32 delete_flag = 4;
    if (has_delete_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delete_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::MergeFrom(const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
    if (from.has_block_seq()) {
      set_block_seq(from.block_seq());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_delete_flag()) {
      set_delete_flag(from.delete_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::CopyFrom(const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::Swap(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(block_seq_, other->block_seq_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(delete_flag_, other->delete_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_Block_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::kBucketIndexFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::kStartSeqFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::kEndSeqFieldNumber;
const int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::kBlockListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::pb_MSG_SU_SU_GET_BLOCK_LIST_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::pb_MSG_SU_SU_GET_BLOCK_LIST_ACK(const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  start_seq_ = GOOGLE_LONGLONG(0);
  end_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::~pb_MSG_SU_SU_GET_BLOCK_LIST_ACK() {
  SharedDtor();
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_;
}

const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK& pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::default_instance_ = NULL;

pb_MSG_SU_SU_GET_BLOCK_LIST_ACK* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::New() const {
  return new pb_MSG_SU_SU_GET_BLOCK_LIST_ACK;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
    start_seq_ = GOOGLE_LONGLONG(0);
    end_seq_ = GOOGLE_LONGLONG(0);
  }
  block_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_seq;
        break;
      }
      
      // required int64 start_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_seq_)));
          set_has_start_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_seq;
        break;
      }
      
      // required int64 end_seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_seq_)));
          set_has_end_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_block_list;
        break;
      }
      
      // repeated .cstore.pb_MSG_SU_SU_GET_BLOCK_LIST_ACK.Block_Item block_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_block_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  // required int64 start_seq = 2;
  if (has_start_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_seq(), output);
  }
  
  // required int64 end_seq = 3;
  if (has_end_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_seq(), output);
  }
  
  // repeated .cstore.pb_MSG_SU_SU_GET_BLOCK_LIST_ACK.Block_Item block_list = 4;
  for (int i = 0; i < this->block_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->block_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  // required int64 start_seq = 2;
  if (has_start_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_seq(), target);
  }
  
  // required int64 end_seq = 3;
  if (has_end_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_seq(), target);
  }
  
  // repeated .cstore.pb_MSG_SU_SU_GET_BLOCK_LIST_ACK.Block_Item block_list = 4;
  for (int i = 0; i < this->block_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->block_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
    // required int64 start_seq = 2;
    if (has_start_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_seq());
    }
    
    // required int64 end_seq = 3;
    if (has_end_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_seq());
    }
    
  }
  // repeated .cstore.pb_MSG_SU_SU_GET_BLOCK_LIST_ACK.Block_Item block_list = 4;
  total_size += 1 * this->block_list_size();
  for (int i = 0; i < this->block_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::MergeFrom(const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_list_.MergeFrom(from.block_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_start_seq()) {
      set_start_seq(from.start_seq());
    }
    if (from.has_end_seq()) {
      set_end_seq(from.end_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::CopyFrom(const pb_MSG_SU_SU_GET_BLOCK_LIST_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < block_list_size(); i++) {
    if (!this->block_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::Swap(pb_MSG_SU_SU_GET_BLOCK_LIST_ACK* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(start_seq_, other->start_seq_);
    std::swap(end_seq_, other->end_seq_);
    block_list_.Swap(&other->block_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_GET_BLOCK_LIST_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_GET_BLOCK_LIST_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_PUT_BLOCK::kBlockIndexFieldNumber;
const int pb_MSG_SU_SU_PUT_BLOCK::kBlockSeqFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_PUT_BLOCK::pb_MSG_SU_SU_PUT_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_PUT_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_PUT_BLOCK::pb_MSG_SU_SU_PUT_BLOCK(const pb_MSG_SU_SU_PUT_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_PUT_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_PUT_BLOCK::~pb_MSG_SU_SU_PUT_BLOCK() {
  SharedDtor();
}

void pb_MSG_SU_SU_PUT_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_PUT_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_PUT_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_PUT_BLOCK_descriptor_;
}

const pb_MSG_SU_SU_PUT_BLOCK& pb_MSG_SU_SU_PUT_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_PUT_BLOCK* pb_MSG_SU_SU_PUT_BLOCK::default_instance_ = NULL;

pb_MSG_SU_SU_PUT_BLOCK* pb_MSG_SU_SU_PUT_BLOCK::New() const {
  return new pb_MSG_SU_SU_PUT_BLOCK;
}

void pb_MSG_SU_SU_PUT_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
    block_seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_PUT_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_seq;
        break;
      }
      
      // required int64 block_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_seq_)));
          set_has_block_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_PUT_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->block_seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_PUT_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->block_seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_PUT_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
    // required int64 block_seq = 2;
    if (has_block_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_PUT_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_PUT_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_PUT_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_PUT_BLOCK::MergeFrom(const pb_MSG_SU_SU_PUT_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
    if (from.has_block_seq()) {
      set_block_seq(from.block_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_PUT_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_PUT_BLOCK::CopyFrom(const pb_MSG_SU_SU_PUT_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_PUT_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_SU_SU_PUT_BLOCK::Swap(pb_MSG_SU_SU_PUT_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(block_seq_, other->block_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_PUT_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_PUT_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_PUT_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_GET_BLOCK::kBlockIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_GET_BLOCK::pb_MSG_SU_SU_GET_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_GET_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_GET_BLOCK::pb_MSG_SU_SU_GET_BLOCK(const pb_MSG_SU_SU_GET_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_GET_BLOCK::~pb_MSG_SU_SU_GET_BLOCK() {
  SharedDtor();
}

void pb_MSG_SU_SU_GET_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_GET_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_GET_BLOCK_descriptor_;
}

const pb_MSG_SU_SU_GET_BLOCK& pb_MSG_SU_SU_GET_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_GET_BLOCK* pb_MSG_SU_SU_GET_BLOCK::default_instance_ = NULL;

pb_MSG_SU_SU_GET_BLOCK* pb_MSG_SU_SU_GET_BLOCK::New() const {
  return new pb_MSG_SU_SU_GET_BLOCK;
}

void pb_MSG_SU_SU_GET_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_GET_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_GET_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_GET_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_GET_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_GET_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_GET_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_GET_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_GET_BLOCK::MergeFrom(const pb_MSG_SU_SU_GET_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_GET_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_BLOCK::CopyFrom(const pb_MSG_SU_SU_GET_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_GET_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SU_SU_GET_BLOCK::Swap(pb_MSG_SU_SU_GET_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_GET_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_GET_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_GET_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_DEL_BLOCK::kBlockIndexFieldNumber;
const int pb_MSG_SU_SU_DEL_BLOCK::kBlockSeqFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_DEL_BLOCK::pb_MSG_SU_SU_DEL_BLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_DEL_BLOCK::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_DEL_BLOCK::pb_MSG_SU_SU_DEL_BLOCK(const pb_MSG_SU_SU_DEL_BLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_DEL_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_DEL_BLOCK::~pb_MSG_SU_SU_DEL_BLOCK() {
  SharedDtor();
}

void pb_MSG_SU_SU_DEL_BLOCK::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_DEL_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_DEL_BLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_DEL_BLOCK_descriptor_;
}

const pb_MSG_SU_SU_DEL_BLOCK& pb_MSG_SU_SU_DEL_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_DEL_BLOCK* pb_MSG_SU_SU_DEL_BLOCK::default_instance_ = NULL;

pb_MSG_SU_SU_DEL_BLOCK* pb_MSG_SU_SU_DEL_BLOCK::New() const {
  return new pb_MSG_SU_SU_DEL_BLOCK;
}

void pb_MSG_SU_SU_DEL_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
    block_seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_DEL_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_seq;
        break;
      }
      
      // required int64 block_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_seq_)));
          set_has_block_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_DEL_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->block_seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_DEL_BLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->block_seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_DEL_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
    // required int64 block_seq = 2;
    if (has_block_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_DEL_BLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_DEL_BLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_DEL_BLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_DEL_BLOCK::MergeFrom(const pb_MSG_SU_SU_DEL_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
    if (from.has_block_seq()) {
      set_block_seq(from.block_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_DEL_BLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_DEL_BLOCK::CopyFrom(const pb_MSG_SU_SU_DEL_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_DEL_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_SU_SU_DEL_BLOCK::Swap(pb_MSG_SU_SU_DEL_BLOCK* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(block_seq_, other->block_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_DEL_BLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_DEL_BLOCK_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_DEL_BLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_DEL_BLOCK2::kBlockIndexFieldNumber;
const int pb_MSG_SU_SU_DEL_BLOCK2::kBlockSeqFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_DEL_BLOCK2::pb_MSG_SU_SU_DEL_BLOCK2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_DEL_BLOCK2::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_DEL_BLOCK2::pb_MSG_SU_SU_DEL_BLOCK2(const pb_MSG_SU_SU_DEL_BLOCK2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_DEL_BLOCK2::SharedCtor() {
  _cached_size_ = 0;
  block_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_DEL_BLOCK2::~pb_MSG_SU_SU_DEL_BLOCK2() {
  SharedDtor();
}

void pb_MSG_SU_SU_DEL_BLOCK2::SharedDtor() {
  if (block_index_ != &::google::protobuf::internal::kEmptyString) {
    delete block_index_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_DEL_BLOCK2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_DEL_BLOCK2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_DEL_BLOCK2_descriptor_;
}

const pb_MSG_SU_SU_DEL_BLOCK2& pb_MSG_SU_SU_DEL_BLOCK2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_DEL_BLOCK2* pb_MSG_SU_SU_DEL_BLOCK2::default_instance_ = NULL;

pb_MSG_SU_SU_DEL_BLOCK2* pb_MSG_SU_SU_DEL_BLOCK2::New() const {
  return new pb_MSG_SU_SU_DEL_BLOCK2;
}

void pb_MSG_SU_SU_DEL_BLOCK2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_index()) {
      if (block_index_ != &::google::protobuf::internal::kEmptyString) {
        block_index_->clear();
      }
    }
    block_seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_DEL_BLOCK2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_index().data(), this->block_index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_seq;
        break;
      }
      
      // required int64 block_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_seq_)));
          set_has_block_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_DEL_BLOCK2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_index(), output);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->block_seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_DEL_BLOCK2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_index = 1;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_index().data(), this->block_index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_index(), target);
  }
  
  // required int64 block_seq = 2;
  if (has_block_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->block_seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_DEL_BLOCK2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_index = 1;
    if (has_block_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_index());
    }
    
    // required int64 block_seq = 2;
    if (has_block_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_DEL_BLOCK2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_DEL_BLOCK2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_DEL_BLOCK2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_DEL_BLOCK2::MergeFrom(const pb_MSG_SU_SU_DEL_BLOCK2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
    if (from.has_block_seq()) {
      set_block_seq(from.block_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_DEL_BLOCK2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_DEL_BLOCK2::CopyFrom(const pb_MSG_SU_SU_DEL_BLOCK2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_DEL_BLOCK2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_SU_SU_DEL_BLOCK2::Swap(pb_MSG_SU_SU_DEL_BLOCK2* other) {
  if (other != this) {
    std::swap(block_index_, other->block_index_);
    std::swap(block_seq_, other->block_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_DEL_BLOCK2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_DEL_BLOCK2_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_DEL_BLOCK2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_GET_CURRENT_SEQ::kBucketIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_GET_CURRENT_SEQ::pb_MSG_SU_SU_GET_CURRENT_SEQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_GET_CURRENT_SEQ::pb_MSG_SU_SU_GET_CURRENT_SEQ(const pb_MSG_SU_SU_GET_CURRENT_SEQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_GET_CURRENT_SEQ::~pb_MSG_SU_SU_GET_CURRENT_SEQ() {
  SharedDtor();
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_CURRENT_SEQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_GET_CURRENT_SEQ_descriptor_;
}

const pb_MSG_SU_SU_GET_CURRENT_SEQ& pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_GET_CURRENT_SEQ* pb_MSG_SU_SU_GET_CURRENT_SEQ::default_instance_ = NULL;

pb_MSG_SU_SU_GET_CURRENT_SEQ* pb_MSG_SU_SU_GET_CURRENT_SEQ::New() const {
  return new pb_MSG_SU_SU_GET_CURRENT_SEQ;
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_GET_CURRENT_SEQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_GET_CURRENT_SEQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_GET_CURRENT_SEQ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_GET_CURRENT_SEQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_GET_CURRENT_SEQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::MergeFrom(const pb_MSG_SU_SU_GET_CURRENT_SEQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::CopyFrom(const pb_MSG_SU_SU_GET_CURRENT_SEQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_GET_CURRENT_SEQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ::Swap(pb_MSG_SU_SU_GET_CURRENT_SEQ* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_GET_CURRENT_SEQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_GET_CURRENT_SEQ_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_GET_CURRENT_SEQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::kBucketIndexFieldNumber;
const int pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::kCurrentSeqFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK(const pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  current_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::~pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK() {
  SharedDtor();
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_descriptor_;
}

const pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK& pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK* pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::default_instance_ = NULL;

pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK* pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::New() const {
  return new pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK;
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
    current_seq_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_seq;
        break;
      }
      
      // required int64 current_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_seq_)));
          set_has_current_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  // required int64 current_seq = 2;
  if (has_current_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current_seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  // required int64 current_seq = 2;
  if (has_current_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->current_seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
    // required int64 current_seq = 2;
    if (has_current_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::MergeFrom(const pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_current_seq()) {
      set_current_seq(from.current_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::CopyFrom(const pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::Swap(pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(current_seq_, other->current_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_GET_CURRENT_SEQ_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_SU_HEARTBEAT_BUILD::kBucketIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_SU_HEARTBEAT_BUILD::pb_MSG_SU_SU_HEARTBEAT_BUILD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::InitAsDefaultInstance() {
}

pb_MSG_SU_SU_HEARTBEAT_BUILD::pb_MSG_SU_SU_HEARTBEAT_BUILD(const pb_MSG_SU_SU_HEARTBEAT_BUILD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_SU_HEARTBEAT_BUILD::~pb_MSG_SU_SU_HEARTBEAT_BUILD() {
  SharedDtor();
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_SU_HEARTBEAT_BUILD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_SU_HEARTBEAT_BUILD_descriptor_;
}

const pb_MSG_SU_SU_HEARTBEAT_BUILD& pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_SU_HEARTBEAT_BUILD* pb_MSG_SU_SU_HEARTBEAT_BUILD::default_instance_ = NULL;

pb_MSG_SU_SU_HEARTBEAT_BUILD* pb_MSG_SU_SU_HEARTBEAT_BUILD::New() const {
  return new pb_MSG_SU_SU_HEARTBEAT_BUILD;
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_SU_HEARTBEAT_BUILD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_SU_HEARTBEAT_BUILD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_SU_HEARTBEAT_BUILD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_SU_HEARTBEAT_BUILD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_SU_HEARTBEAT_BUILD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::MergeFrom(const pb_MSG_SU_SU_HEARTBEAT_BUILD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::CopyFrom(const pb_MSG_SU_SU_HEARTBEAT_BUILD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_SU_HEARTBEAT_BUILD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SU_SU_HEARTBEAT_BUILD::Swap(pb_MSG_SU_SU_HEARTBEAT_BUILD* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_SU_HEARTBEAT_BUILD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_SU_HEARTBEAT_BUILD_descriptor_;
  metadata.reflection = pb_MSG_SU_SU_HEARTBEAT_BUILD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_SU_EXTENT_BUCKET::kNewModNrFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_SU_EXTENT_BUCKET::pb_MSG_CS_SU_EXTENT_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_SU_EXTENT_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_CS_SU_EXTENT_BUCKET::pb_MSG_CS_SU_EXTENT_BUCKET(const pb_MSG_CS_SU_EXTENT_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_SU_EXTENT_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  new_mod_nr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_SU_EXTENT_BUCKET::~pb_MSG_CS_SU_EXTENT_BUCKET() {
  SharedDtor();
}

void pb_MSG_CS_SU_EXTENT_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_SU_EXTENT_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_EXTENT_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_SU_EXTENT_BUCKET_descriptor_;
}

const pb_MSG_CS_SU_EXTENT_BUCKET& pb_MSG_CS_SU_EXTENT_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_SU_EXTENT_BUCKET* pb_MSG_CS_SU_EXTENT_BUCKET::default_instance_ = NULL;

pb_MSG_CS_SU_EXTENT_BUCKET* pb_MSG_CS_SU_EXTENT_BUCKET::New() const {
  return new pb_MSG_CS_SU_EXTENT_BUCKET;
}

void pb_MSG_CS_SU_EXTENT_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_mod_nr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_SU_EXTENT_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 new_mod_nr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_mod_nr_)));
          set_has_new_mod_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_SU_EXTENT_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 new_mod_nr = 1;
  if (has_new_mod_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_mod_nr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_SU_EXTENT_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 new_mod_nr = 1;
  if (has_new_mod_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_mod_nr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_SU_EXTENT_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 new_mod_nr = 1;
    if (has_new_mod_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_mod_nr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_SU_EXTENT_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_SU_EXTENT_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_SU_EXTENT_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_SU_EXTENT_BUCKET::MergeFrom(const pb_MSG_CS_SU_EXTENT_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_mod_nr()) {
      set_new_mod_nr(from.new_mod_nr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_SU_EXTENT_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_SU_EXTENT_BUCKET::CopyFrom(const pb_MSG_CS_SU_EXTENT_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_SU_EXTENT_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_CS_SU_EXTENT_BUCKET::Swap(pb_MSG_CS_SU_EXTENT_BUCKET* other) {
  if (other != this) {
    std::swap(new_mod_nr_, other->new_mod_nr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_SU_EXTENT_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_SU_EXTENT_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_CS_SU_EXTENT_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_SU_MIGRATE_BUCKET::kBucketIndexFieldNumber;
const int pb_MSG_CS_SU_MIGRATE_BUCKET::kIpFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_SU_MIGRATE_BUCKET::pb_MSG_CS_SU_MIGRATE_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_CS_SU_MIGRATE_BUCKET::pb_MSG_CS_SU_MIGRATE_BUCKET(const pb_MSG_CS_SU_MIGRATE_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_SU_MIGRATE_BUCKET::~pb_MSG_CS_SU_MIGRATE_BUCKET() {
  SharedDtor();
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_MIGRATE_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_SU_MIGRATE_BUCKET_descriptor_;
}

const pb_MSG_CS_SU_MIGRATE_BUCKET& pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_SU_MIGRATE_BUCKET* pb_MSG_CS_SU_MIGRATE_BUCKET::default_instance_ = NULL;

pb_MSG_CS_SU_MIGRATE_BUCKET* pb_MSG_CS_SU_MIGRATE_BUCKET::New() const {
  return new pb_MSG_CS_SU_MIGRATE_BUCKET;
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
    ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_SU_MIGRATE_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }
      
      // required uint32 ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  // required uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_SU_MIGRATE_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  // required uint32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_SU_MIGRATE_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
    // required uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_SU_MIGRATE_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_SU_MIGRATE_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::MergeFrom(const pb_MSG_CS_SU_MIGRATE_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::CopyFrom(const pb_MSG_CS_SU_MIGRATE_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_SU_MIGRATE_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_CS_SU_MIGRATE_BUCKET::Swap(pb_MSG_CS_SU_MIGRATE_BUCKET* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_SU_MIGRATE_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_SU_MIGRATE_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_CS_SU_MIGRATE_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_SU_DELETE_BUCKET::kBucketIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_SU_DELETE_BUCKET::pb_MSG_CS_SU_DELETE_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_SU_DELETE_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_CS_SU_DELETE_BUCKET::pb_MSG_CS_SU_DELETE_BUCKET(const pb_MSG_CS_SU_DELETE_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_SU_DELETE_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_SU_DELETE_BUCKET::~pb_MSG_CS_SU_DELETE_BUCKET() {
  SharedDtor();
}

void pb_MSG_CS_SU_DELETE_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_SU_DELETE_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_DELETE_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_SU_DELETE_BUCKET_descriptor_;
}

const pb_MSG_CS_SU_DELETE_BUCKET& pb_MSG_CS_SU_DELETE_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_SU_DELETE_BUCKET* pb_MSG_CS_SU_DELETE_BUCKET::default_instance_ = NULL;

pb_MSG_CS_SU_DELETE_BUCKET* pb_MSG_CS_SU_DELETE_BUCKET::New() const {
  return new pb_MSG_CS_SU_DELETE_BUCKET;
}

void pb_MSG_CS_SU_DELETE_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_SU_DELETE_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_SU_DELETE_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_SU_DELETE_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_SU_DELETE_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_SU_DELETE_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_SU_DELETE_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_SU_DELETE_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_SU_DELETE_BUCKET::MergeFrom(const pb_MSG_CS_SU_DELETE_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_SU_DELETE_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_SU_DELETE_BUCKET::CopyFrom(const pb_MSG_CS_SU_DELETE_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_SU_DELETE_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_CS_SU_DELETE_BUCKET::Swap(pb_MSG_CS_SU_DELETE_BUCKET* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_SU_DELETE_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_SU_DELETE_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_CS_SU_DELETE_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_SU_SET_BUCKET_STATE::kBucketIndexFieldNumber;
const int pb_MSG_CS_SU_SET_BUCKET_STATE::kStateFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_SU_SET_BUCKET_STATE::pb_MSG_CS_SU_SET_BUCKET_STATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::InitAsDefaultInstance() {
}

pb_MSG_CS_SU_SET_BUCKET_STATE::pb_MSG_CS_SU_SET_BUCKET_STATE(const pb_MSG_CS_SU_SET_BUCKET_STATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_SU_SET_BUCKET_STATE::~pb_MSG_CS_SU_SET_BUCKET_STATE() {
  SharedDtor();
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_SU_SET_BUCKET_STATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_SU_SET_BUCKET_STATE_descriptor_;
}

const pb_MSG_CS_SU_SET_BUCKET_STATE& pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_SU_SET_BUCKET_STATE* pb_MSG_CS_SU_SET_BUCKET_STATE::default_instance_ = NULL;

pb_MSG_CS_SU_SET_BUCKET_STATE* pb_MSG_CS_SU_SET_BUCKET_STATE::New() const {
  return new pb_MSG_CS_SU_SET_BUCKET_STATE;
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0;
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_SU_SET_BUCKET_STATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .cstore.Bucket_state state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cstore::Bucket_state_IsValid(value)) {
            set_state(static_cast< cstore::Bucket_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bucket_index(), output);
  }
  
  // required .cstore.Bucket_state state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_SU_SET_BUCKET_STATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bucket_index(), target);
  }
  
  // required .cstore.Bucket_state state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_SU_SET_BUCKET_STATE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }
    
    // required .cstore.Bucket_state state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_SU_SET_BUCKET_STATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_SU_SET_BUCKET_STATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::MergeFrom(const pb_MSG_CS_SU_SET_BUCKET_STATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::CopyFrom(const pb_MSG_CS_SU_SET_BUCKET_STATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_SU_SET_BUCKET_STATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_CS_SU_SET_BUCKET_STATE::Swap(pb_MSG_CS_SU_SET_BUCKET_STATE* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_SU_SET_BUCKET_STATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_SU_SET_BUCKET_STATE_descriptor_;
  metadata.reflection = pb_MSG_CS_SU_SET_BUCKET_STATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_USER_INFO::kUidFieldNumber;
const int pb_MSG_SYS_MU_GET_USER_INFO::kTokenFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_USER_INFO::pb_MSG_SYS_MU_GET_USER_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_USER_INFO::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_USER_INFO::pb_MSG_SYS_MU_GET_USER_INFO(const pb_MSG_SYS_MU_GET_USER_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_INFO::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_USER_INFO::~pb_MSG_SYS_MU_GET_USER_INFO() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_USER_INFO::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_USER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_USER_INFO_descriptor_;
}

const pb_MSG_SYS_MU_GET_USER_INFO& pb_MSG_SYS_MU_GET_USER_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_USER_INFO* pb_MSG_SYS_MU_GET_USER_INFO::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_USER_INFO* pb_MSG_SYS_MU_GET_USER_INFO::New() const {
  return new pb_MSG_SYS_MU_GET_USER_INFO;
}

void pb_MSG_SYS_MU_GET_USER_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_USER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_USER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_USER_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_USER_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_USER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_USER_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_USER_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_USER_INFO::MergeFrom(const pb_MSG_SYS_MU_GET_USER_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_USER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_INFO::CopyFrom(const pb_MSG_SYS_MU_GET_USER_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_USER_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_USER_INFO::Swap(pb_MSG_SYS_MU_GET_USER_INFO* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_USER_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_USER_INFO_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_USER_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_USER_INFO_ACK::kQuotaTotalFieldNumber;
const int pb_MSG_SYS_MU_GET_USER_INFO_ACK::kQuotaUsedFieldNumber;
const int pb_MSG_SYS_MU_GET_USER_INFO_ACK::kSeqNrFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_USER_INFO_ACK::pb_MSG_SYS_MU_GET_USER_INFO_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_USER_INFO_ACK::pb_MSG_SYS_MU_GET_USER_INFO_ACK(const pb_MSG_SYS_MU_GET_USER_INFO_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::SharedCtor() {
  _cached_size_ = 0;
  quota_total_ = GOOGLE_ULONGLONG(0);
  quota_used_ = GOOGLE_ULONGLONG(0);
  seq_nr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_USER_INFO_ACK::~pb_MSG_SYS_MU_GET_USER_INFO_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_INFO_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_USER_INFO_ACK_descriptor_;
}

const pb_MSG_SYS_MU_GET_USER_INFO_ACK& pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_USER_INFO_ACK* pb_MSG_SYS_MU_GET_USER_INFO_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_USER_INFO_ACK* pb_MSG_SYS_MU_GET_USER_INFO_ACK::New() const {
  return new pb_MSG_SYS_MU_GET_USER_INFO_ACK;
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quota_total_ = GOOGLE_ULONGLONG(0);
    quota_used_ = GOOGLE_ULONGLONG(0);
    seq_nr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_USER_INFO_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 quota_total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_total_)));
          set_has_quota_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quota_used;
        break;
      }
      
      // required uint64 quota_used = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quota_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_used_)));
          set_has_quota_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq_nr;
        break;
      }
      
      // required uint64 seq_nr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_nr_)));
          set_has_seq_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 quota_total = 1;
  if (has_quota_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quota_total(), output);
  }
  
  // required uint64 quota_used = 2;
  if (has_quota_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quota_used(), output);
  }
  
  // required uint64 seq_nr = 3;
  if (has_seq_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seq_nr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_USER_INFO_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 quota_total = 1;
  if (has_quota_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quota_total(), target);
  }
  
  // required uint64 quota_used = 2;
  if (has_quota_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quota_used(), target);
  }
  
  // required uint64 seq_nr = 3;
  if (has_seq_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seq_nr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_USER_INFO_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 quota_total = 1;
    if (has_quota_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota_total());
    }
    
    // required uint64 quota_used = 2;
    if (has_quota_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota_used());
    }
    
    // required uint64 seq_nr = 3;
    if (has_seq_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq_nr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_USER_INFO_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_USER_INFO_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::MergeFrom(const pb_MSG_SYS_MU_GET_USER_INFO_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quota_total()) {
      set_quota_total(from.quota_total());
    }
    if (from.has_quota_used()) {
      set_quota_used(from.quota_used());
    }
    if (from.has_seq_nr()) {
      set_seq_nr(from.seq_nr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::CopyFrom(const pb_MSG_SYS_MU_GET_USER_INFO_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_USER_INFO_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_USER_INFO_ACK::Swap(pb_MSG_SYS_MU_GET_USER_INFO_ACK* other) {
  if (other != this) {
    std::swap(quota_total_, other->quota_total_);
    std::swap(quota_used_, other->quota_used_);
    std::swap(seq_nr_, other->seq_nr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_USER_INFO_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_USER_INFO_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_USER_INFO_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_PUT_DIR::kUidFieldNumber;
const int pb_MSG_SYS_MU_PUT_DIR::kTokenFieldNumber;
const int pb_MSG_SYS_MU_PUT_DIR::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_PUT_DIR::pb_MSG_SYS_MU_PUT_DIR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_PUT_DIR::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_PUT_DIR::pb_MSG_SYS_MU_PUT_DIR(const pb_MSG_SYS_MU_PUT_DIR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_PUT_DIR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_PUT_DIR::~pb_MSG_SYS_MU_PUT_DIR() {
  SharedDtor();
}

void pb_MSG_SYS_MU_PUT_DIR::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_PUT_DIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_PUT_DIR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_PUT_DIR_descriptor_;
}

const pb_MSG_SYS_MU_PUT_DIR& pb_MSG_SYS_MU_PUT_DIR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_PUT_DIR* pb_MSG_SYS_MU_PUT_DIR::default_instance_ = NULL;

pb_MSG_SYS_MU_PUT_DIR* pb_MSG_SYS_MU_PUT_DIR::New() const {
  return new pb_MSG_SYS_MU_PUT_DIR;
}

void pb_MSG_SYS_MU_PUT_DIR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_PUT_DIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_PUT_DIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_PUT_DIR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_PUT_DIR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_PUT_DIR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_PUT_DIR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_PUT_DIR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_PUT_DIR::MergeFrom(const pb_MSG_SYS_MU_PUT_DIR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_PUT_DIR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_PUT_DIR::CopyFrom(const pb_MSG_SYS_MU_PUT_DIR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_PUT_DIR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_PUT_DIR::Swap(pb_MSG_SYS_MU_PUT_DIR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_PUT_DIR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_PUT_DIR_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_PUT_DIR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_DEL_DIR::kUidFieldNumber;
const int pb_MSG_SYS_MU_DEL_DIR::kTokenFieldNumber;
const int pb_MSG_SYS_MU_DEL_DIR::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_DEL_DIR::pb_MSG_SYS_MU_DEL_DIR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_DEL_DIR::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_DEL_DIR::pb_MSG_SYS_MU_DEL_DIR(const pb_MSG_SYS_MU_DEL_DIR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_DEL_DIR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_DEL_DIR::~pb_MSG_SYS_MU_DEL_DIR() {
  SharedDtor();
}

void pb_MSG_SYS_MU_DEL_DIR::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_DEL_DIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_DEL_DIR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_DEL_DIR_descriptor_;
}

const pb_MSG_SYS_MU_DEL_DIR& pb_MSG_SYS_MU_DEL_DIR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_DEL_DIR* pb_MSG_SYS_MU_DEL_DIR::default_instance_ = NULL;

pb_MSG_SYS_MU_DEL_DIR* pb_MSG_SYS_MU_DEL_DIR::New() const {
  return new pb_MSG_SYS_MU_DEL_DIR;
}

void pb_MSG_SYS_MU_DEL_DIR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_DEL_DIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_DEL_DIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_DEL_DIR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_DEL_DIR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_DEL_DIR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_DEL_DIR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_DEL_DIR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_DEL_DIR::MergeFrom(const pb_MSG_SYS_MU_DEL_DIR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_DEL_DIR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_DEL_DIR::CopyFrom(const pb_MSG_SYS_MU_DEL_DIR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_DEL_DIR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_DEL_DIR::Swap(pb_MSG_SYS_MU_DEL_DIR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_DEL_DIR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_DEL_DIR_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_DEL_DIR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_DIR::kUidFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR::kTokenFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_DIR::pb_MSG_SYS_MU_GET_DIR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_DIR::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_DIR::pb_MSG_SYS_MU_GET_DIR(const pb_MSG_SYS_MU_GET_DIR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_DIR::~pb_MSG_SYS_MU_GET_DIR() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_DIR::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_DIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_DIR_descriptor_;
}

const pb_MSG_SYS_MU_GET_DIR& pb_MSG_SYS_MU_GET_DIR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_DIR* pb_MSG_SYS_MU_GET_DIR::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_DIR* pb_MSG_SYS_MU_GET_DIR::New() const {
  return new pb_MSG_SYS_MU_GET_DIR;
}

void pb_MSG_SYS_MU_GET_DIR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_DIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_DIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_DIR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_DIR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_DIR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_DIR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_DIR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_DIR::MergeFrom(const pb_MSG_SYS_MU_GET_DIR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_DIR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR::CopyFrom(const pb_MSG_SYS_MU_GET_DIR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_DIR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_DIR::Swap(pb_MSG_SYS_MU_GET_DIR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_DIR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_DIR_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_DIR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::kNameFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::kTypeFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::pb_MSG_SYS_MU_GET_DIR_ACK_DEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::pb_MSG_SYS_MU_GET_DIR_ACK_DEntry(const pb_MSG_SYS_MU_GET_DIR_ACK_DEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::~pb_MSG_SYS_MU_GET_DIR_ACK_DEntry() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_descriptor_;
}

const pb_MSG_SYS_MU_GET_DIR_ACK_DEntry& pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_DIR_ACK_DEntry* pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_DIR_ACK_DEntry* pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::New() const {
  return new pb_MSG_SYS_MU_GET_DIR_ACK_DEntry;
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_DIR_ACK_DEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_DIR_ACK_DEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::MergeFrom(const pb_MSG_SYS_MU_GET_DIR_ACK_DEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::CopyFrom(const pb_MSG_SYS_MU_GET_DIR_ACK_DEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::Swap(pb_MSG_SYS_MU_GET_DIR_ACK_DEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_DIR_ACK_DEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_DIR_ACK_DEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_DIR_ACK::kDentryListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_DIR_ACK::pb_MSG_SYS_MU_GET_DIR_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_DIR_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_DIR_ACK::pb_MSG_SYS_MU_GET_DIR_ACK(const pb_MSG_SYS_MU_GET_DIR_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_DIR_ACK::~pb_MSG_SYS_MU_GET_DIR_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_DIR_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_DIR_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_;
}

const pb_MSG_SYS_MU_GET_DIR_ACK& pb_MSG_SYS_MU_GET_DIR_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_DIR_ACK* pb_MSG_SYS_MU_GET_DIR_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_DIR_ACK* pb_MSG_SYS_MU_GET_DIR_ACK::New() const {
  return new pb_MSG_SYS_MU_GET_DIR_ACK;
}

void pb_MSG_SYS_MU_GET_DIR_ACK::Clear() {
  dentry_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_DIR_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.pb_MSG_SYS_MU_GET_DIR_ACK.DEntry dentry_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dentry_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dentry_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dentry_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_DIR_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.pb_MSG_SYS_MU_GET_DIR_ACK.DEntry dentry_list = 1;
  for (int i = 0; i < this->dentry_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dentry_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_DIR_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.pb_MSG_SYS_MU_GET_DIR_ACK.DEntry dentry_list = 1;
  for (int i = 0; i < this->dentry_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dentry_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_DIR_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.pb_MSG_SYS_MU_GET_DIR_ACK.DEntry dentry_list = 1;
  total_size += 1 * this->dentry_list_size();
  for (int i = 0; i < this->dentry_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dentry_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_DIR_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_DIR_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_DIR_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_DIR_ACK::MergeFrom(const pb_MSG_SYS_MU_GET_DIR_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  dentry_list_.MergeFrom(from.dentry_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_DIR_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR_ACK::CopyFrom(const pb_MSG_SYS_MU_GET_DIR_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_DIR_ACK::IsInitialized() const {
  
  for (int i = 0; i < dentry_list_size(); i++) {
    if (!this->dentry_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_MU_GET_DIR_ACK::Swap(pb_MSG_SYS_MU_GET_DIR_ACK* other) {
  if (other != this) {
    dentry_list_.Swap(&other->dentry_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_DIR_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_DIR_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_DIR_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_STAT_DIR::kUidFieldNumber;
const int pb_MSG_SYS_MU_STAT_DIR::kTokenFieldNumber;
const int pb_MSG_SYS_MU_STAT_DIR::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_STAT_DIR::pb_MSG_SYS_MU_STAT_DIR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_STAT_DIR::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_STAT_DIR::pb_MSG_SYS_MU_STAT_DIR(const pb_MSG_SYS_MU_STAT_DIR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_STAT_DIR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_STAT_DIR::~pb_MSG_SYS_MU_STAT_DIR() {
  SharedDtor();
}

void pb_MSG_SYS_MU_STAT_DIR::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_STAT_DIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_STAT_DIR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_STAT_DIR_descriptor_;
}

const pb_MSG_SYS_MU_STAT_DIR& pb_MSG_SYS_MU_STAT_DIR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_STAT_DIR* pb_MSG_SYS_MU_STAT_DIR::default_instance_ = NULL;

pb_MSG_SYS_MU_STAT_DIR* pb_MSG_SYS_MU_STAT_DIR::New() const {
  return new pb_MSG_SYS_MU_STAT_DIR;
}

void pb_MSG_SYS_MU_STAT_DIR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_STAT_DIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_STAT_DIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_STAT_DIR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_STAT_DIR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_STAT_DIR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_STAT_DIR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_STAT_DIR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_STAT_DIR::MergeFrom(const pb_MSG_SYS_MU_STAT_DIR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_STAT_DIR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_STAT_DIR::CopyFrom(const pb_MSG_SYS_MU_STAT_DIR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_STAT_DIR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_STAT_DIR::Swap(pb_MSG_SYS_MU_STAT_DIR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_STAT_DIR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_STAT_DIR_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_STAT_DIR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_STAT_DIR_ACK::kModeFieldNumber;
const int pb_MSG_SYS_MU_STAT_DIR_ACK::kCtimeFieldNumber;
const int pb_MSG_SYS_MU_STAT_DIR_ACK::kMtimeFieldNumber;
const int pb_MSG_SYS_MU_STAT_DIR_ACK::kSizeFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_STAT_DIR_ACK::pb_MSG_SYS_MU_STAT_DIR_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_STAT_DIR_ACK::pb_MSG_SYS_MU_STAT_DIR_ACK(const pb_MSG_SYS_MU_STAT_DIR_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0u;
  ctime_ = GOOGLE_ULONGLONG(0);
  mtime_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_STAT_DIR_ACK::~pb_MSG_SYS_MU_STAT_DIR_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_STAT_DIR_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_STAT_DIR_ACK_descriptor_;
}

const pb_MSG_SYS_MU_STAT_DIR_ACK& pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_STAT_DIR_ACK* pb_MSG_SYS_MU_STAT_DIR_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_STAT_DIR_ACK* pb_MSG_SYS_MU_STAT_DIR_ACK::New() const {
  return new pb_MSG_SYS_MU_STAT_DIR_ACK;
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0u;
    ctime_ = GOOGLE_ULONGLONG(0);
    mtime_ = GOOGLE_ULONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_STAT_DIR_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ctime;
        break;
      }
      
      // required uint64 ctime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mtime;
        break;
      }
      
      // required uint64 mtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }
      
      // required uint64 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }
  
  // required uint64 ctime = 2;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ctime(), output);
  }
  
  // required uint64 mtime = 3;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mtime(), output);
  }
  
  // required uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_STAT_DIR_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }
  
  // required uint64 ctime = 2;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ctime(), target);
  }
  
  // required uint64 mtime = 3;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mtime(), target);
  }
  
  // required uint64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_STAT_DIR_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }
    
    // required uint64 ctime = 2;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }
    
    // required uint64 mtime = 3;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mtime());
    }
    
    // required uint64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_STAT_DIR_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_STAT_DIR_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::MergeFrom(const pb_MSG_SYS_MU_STAT_DIR_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::CopyFrom(const pb_MSG_SYS_MU_STAT_DIR_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_STAT_DIR_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void pb_MSG_SYS_MU_STAT_DIR_ACK::Swap(pb_MSG_SYS_MU_STAT_DIR_ACK* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(ctime_, other->ctime_);
    std::swap(mtime_, other->mtime_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_STAT_DIR_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_STAT_DIR_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_STAT_DIR_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block_Meta::kChecksumFieldNumber;
#endif  // !_MSC_VER

Block_Meta::Block_Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block_Meta::InitAsDefaultInstance() {
}

Block_Meta::Block_Meta(const Block_Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block_Meta::SharedCtor() {
  _cached_size_ = 0;
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block_Meta::~Block_Meta() {
  SharedDtor();
}

void Block_Meta::SharedDtor() {
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (this != default_instance_) {
  }
}

void Block_Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block_Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_Meta_descriptor_;
}

const Block_Meta& Block_Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Block_Meta* Block_Meta::default_instance_ = NULL;

Block_Meta* Block_Meta::New() const {
  return new Block_Meta;
}

void Block_Meta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string checksum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checksum().data(), this->checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string checksum = 1;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->checksum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block_Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string checksum = 1;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->checksum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block_Meta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string checksum = 1;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block_Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block_Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block_Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block_Meta::MergeFrom(const Block_Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block_Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block_Meta::CopyFrom(const Block_Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_Meta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Block_Meta::Swap(Block_Meta* other) {
  if (other != this) {
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block_Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_Meta_descriptor_;
  metadata.reflection = Block_Meta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_DIR2::kUidFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2::kTokenFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_DIR2::pb_MSG_SYS_MU_GET_DIR2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_DIR2::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_DIR2::pb_MSG_SYS_MU_GET_DIR2(const pb_MSG_SYS_MU_GET_DIR2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR2::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_DIR2::~pb_MSG_SYS_MU_GET_DIR2() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_DIR2::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_DIR2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_DIR2_descriptor_;
}

const pb_MSG_SYS_MU_GET_DIR2& pb_MSG_SYS_MU_GET_DIR2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_DIR2* pb_MSG_SYS_MU_GET_DIR2::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_DIR2* pb_MSG_SYS_MU_GET_DIR2::New() const {
  return new pb_MSG_SYS_MU_GET_DIR2;
}

void pb_MSG_SYS_MU_GET_DIR2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_DIR2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_DIR2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_DIR2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_DIR2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_DIR2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_DIR2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_DIR2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_DIR2::MergeFrom(const pb_MSG_SYS_MU_GET_DIR2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_DIR2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR2::CopyFrom(const pb_MSG_SYS_MU_GET_DIR2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_DIR2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_DIR2::Swap(pb_MSG_SYS_MU_GET_DIR2* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_DIR2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_DIR2_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_DIR2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kTypeFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kNameFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kModeFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kCtimeFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kMtimeFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kSizeFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kVersionFieldNumber;
const int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::kBlockListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry(const pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  ctime_ = GOOGLE_ULONGLONG(0);
  mtime_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::~pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_descriptor_;
}

const pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry& pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry* pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry* pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::New() const {
  return new pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry;
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    mode_ = 0u;
    ctime_ = GOOGLE_ULONGLONG(0);
    mtime_ = GOOGLE_ULONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_ULONGLONG(0);
  }
  block_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // required uint32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ctime;
        break;
      }
      
      // required uint64 ctime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mtime;
        break;
      }
      
      // required uint64 mtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }
      
      // required uint64 size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_version;
        break;
      }
      
      // optional uint64 version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_block_list;
        break;
      }
      
      // repeated .cstore.Block_Meta block_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_block_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }
  
  // required uint64 ctime = 4;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ctime(), output);
  }
  
  // required uint64 mtime = 5;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->mtime(), output);
  }
  
  // required uint64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }
  
  // optional uint64 version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->version(), output);
  }
  
  // repeated .cstore.Block_Meta block_list = 8;
  for (int i = 0; i < this->block_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->block_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mode(), target);
  }
  
  // required uint64 ctime = 4;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ctime(), target);
  }
  
  // required uint64 mtime = 5;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->mtime(), target);
  }
  
  // required uint64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }
  
  // optional uint64 version = 7;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->version(), target);
  }
  
  // repeated .cstore.Block_Meta block_list = 8;
  for (int i = 0; i < this->block_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->block_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }
    
    // required uint64 ctime = 4;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }
    
    // required uint64 mtime = 5;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mtime());
    }
    
    // required uint64 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // optional uint64 version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }
    
  }
  // repeated .cstore.Block_Meta block_list = 8;
  total_size += 1 * this->block_list_size();
  for (int i = 0; i < this->block_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::MergeFrom(const pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_list_.MergeFrom(from.block_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::CopyFrom(const pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < block_list_size(); i++) {
    if (!this->block_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::Swap(pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(mode_, other->mode_);
    std::swap(ctime_, other->ctime_);
    std::swap(mtime_, other->mtime_);
    std::swap(size_, other->size_);
    std::swap(version_, other->version_);
    block_list_.Swap(&other->block_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_DIR2_ACK_DEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_DIR2_ACK::kDentryListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_DIR2_ACK::pb_MSG_SYS_MU_GET_DIR2_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_DIR2_ACK::pb_MSG_SYS_MU_GET_DIR2_ACK(const pb_MSG_SYS_MU_GET_DIR2_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_DIR2_ACK::~pb_MSG_SYS_MU_GET_DIR2_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_DIR2_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_;
}

const pb_MSG_SYS_MU_GET_DIR2_ACK& pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_DIR2_ACK* pb_MSG_SYS_MU_GET_DIR2_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_DIR2_ACK* pb_MSG_SYS_MU_GET_DIR2_ACK::New() const {
  return new pb_MSG_SYS_MU_GET_DIR2_ACK;
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::Clear() {
  dentry_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_DIR2_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.pb_MSG_SYS_MU_GET_DIR2_ACK.DEntry dentry_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dentry_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dentry_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dentry_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.pb_MSG_SYS_MU_GET_DIR2_ACK.DEntry dentry_list = 1;
  for (int i = 0; i < this->dentry_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dentry_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_DIR2_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.pb_MSG_SYS_MU_GET_DIR2_ACK.DEntry dentry_list = 1;
  for (int i = 0; i < this->dentry_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dentry_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_DIR2_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.pb_MSG_SYS_MU_GET_DIR2_ACK.DEntry dentry_list = 1;
  total_size += 1 * this->dentry_list_size();
  for (int i = 0; i < this->dentry_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dentry_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_DIR2_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_DIR2_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::MergeFrom(const pb_MSG_SYS_MU_GET_DIR2_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  dentry_list_.MergeFrom(from.dentry_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::CopyFrom(const pb_MSG_SYS_MU_GET_DIR2_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_DIR2_ACK::IsInitialized() const {
  
  for (int i = 0; i < dentry_list_size(); i++) {
    if (!this->dentry_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_MU_GET_DIR2_ACK::Swap(pb_MSG_SYS_MU_GET_DIR2_ACK* other) {
  if (other != this) {
    dentry_list_.Swap(&other->dentry_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_DIR2_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_DIR2_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_DIR2_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_MOV_DIR::kUidFieldNumber;
const int pb_MSG_SYS_MU_MOV_DIR::kTokenFieldNumber;
const int pb_MSG_SYS_MU_MOV_DIR::kSrcPathFieldNumber;
const int pb_MSG_SYS_MU_MOV_DIR::kDestPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_MOV_DIR::pb_MSG_SYS_MU_MOV_DIR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_MOV_DIR::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_MOV_DIR::pb_MSG_SYS_MU_MOV_DIR(const pb_MSG_SYS_MU_MOV_DIR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_MOV_DIR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_MOV_DIR::~pb_MSG_SYS_MU_MOV_DIR() {
  SharedDtor();
}

void pb_MSG_SYS_MU_MOV_DIR::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (src_path_ != &::google::protobuf::internal::kEmptyString) {
    delete src_path_;
  }
  if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_MOV_DIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_MOV_DIR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_MOV_DIR_descriptor_;
}

const pb_MSG_SYS_MU_MOV_DIR& pb_MSG_SYS_MU_MOV_DIR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_MOV_DIR* pb_MSG_SYS_MU_MOV_DIR::default_instance_ = NULL;

pb_MSG_SYS_MU_MOV_DIR* pb_MSG_SYS_MU_MOV_DIR::New() const {
  return new pb_MSG_SYS_MU_MOV_DIR;
}

void pb_MSG_SYS_MU_MOV_DIR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_src_path()) {
      if (src_path_ != &::google::protobuf::internal::kEmptyString) {
        src_path_->clear();
      }
    }
    if (has_dest_path()) {
      if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
        dest_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_MOV_DIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src_path;
        break;
      }
      
      // required bytes src_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest_path;
        break;
      }
      
      // required bytes dest_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_MOV_DIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes src_path = 3;
  if (has_src_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->src_path(), output);
  }
  
  // required bytes dest_path = 4;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->dest_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_MOV_DIR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes src_path = 3;
  if (has_src_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_path(), target);
  }
  
  // required bytes dest_path = 4;
  if (has_dest_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dest_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_MOV_DIR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes src_path = 3;
    if (has_src_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_path());
    }
    
    // required bytes dest_path = 4;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_MOV_DIR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_MOV_DIR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_MOV_DIR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_MOV_DIR::MergeFrom(const pb_MSG_SYS_MU_MOV_DIR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_src_path()) {
      set_src_path(from.src_path());
    }
    if (from.has_dest_path()) {
      set_dest_path(from.dest_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_MOV_DIR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_MOV_DIR::CopyFrom(const pb_MSG_SYS_MU_MOV_DIR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_MOV_DIR::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void pb_MSG_SYS_MU_MOV_DIR::Swap(pb_MSG_SYS_MU_MOV_DIR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(src_path_, other->src_path_);
    std::swap(dest_path_, other->dest_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_MOV_DIR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_MOV_DIR_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_MOV_DIR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int File_Attr::kVersionFieldNumber;
const int File_Attr::kModeFieldNumber;
const int File_Attr::kCtimeFieldNumber;
const int File_Attr::kMtimeFieldNumber;
const int File_Attr::kTypeFieldNumber;
const int File_Attr::kSizeFieldNumber;
#endif  // !_MSC_VER

File_Attr::File_Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void File_Attr::InitAsDefaultInstance() {
}

File_Attr::File_Attr(const File_Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void File_Attr::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  mode_ = 0u;
  ctime_ = GOOGLE_ULONGLONG(0);
  mtime_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File_Attr::~File_Attr() {
  SharedDtor();
}

void File_Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void File_Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File_Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_Attr_descriptor_;
}

const File_Attr& File_Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

File_Attr* File_Attr::default_instance_ = NULL;

File_Attr* File_Attr::New() const {
  return new File_Attr;
}

void File_Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
    mode_ = 0u;
    ctime_ = GOOGLE_ULONGLONG(0);
    mtime_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File_Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // required uint32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctime;
        break;
      }
      
      // required uint64 ctime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime;
        break;
      }
      
      // required uint64 mtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }
      
      // required uint64 size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void File_Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }
  
  // required uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }
  
  // required uint64 ctime = 3;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ctime(), output);
  }
  
  // required uint64 mtime = 4;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mtime(), output);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // required uint64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* File_Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }
  
  // required uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }
  
  // required uint64 ctime = 3;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ctime(), target);
  }
  
  // required uint64 mtime = 4;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mtime(), target);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // required uint64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int File_Attr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }
    
    // required uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }
    
    // required uint64 ctime = 3;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }
    
    // required uint64 mtime = 4;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mtime());
    }
    
    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint64 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File_Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File_Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File_Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File_Attr::MergeFrom(const File_Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File_Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File_Attr::CopyFrom(const File_Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File_Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void File_Attr::Swap(File_Attr* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(mode_, other->mode_);
    std::swap(ctime_, other->ctime_);
    std::swap(mtime_, other->mtime_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File_Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_Attr_descriptor_;
  metadata.reflection = File_Attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_PUT_FILE::kUidFieldNumber;
const int pb_MSG_SYS_MU_PUT_FILE::kTokenFieldNumber;
const int pb_MSG_SYS_MU_PUT_FILE::kPathFieldNumber;
const int pb_MSG_SYS_MU_PUT_FILE::kAttrFieldNumber;
const int pb_MSG_SYS_MU_PUT_FILE::kBlockListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_PUT_FILE::pb_MSG_SYS_MU_PUT_FILE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_PUT_FILE::InitAsDefaultInstance() {
  attr_ = const_cast< ::cstore::File_Attr*>(&::cstore::File_Attr::default_instance());
}

pb_MSG_SYS_MU_PUT_FILE::pb_MSG_SYS_MU_PUT_FILE(const pb_MSG_SYS_MU_PUT_FILE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_PUT_FILE::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_PUT_FILE::~pb_MSG_SYS_MU_PUT_FILE() {
  SharedDtor();
}

void pb_MSG_SYS_MU_PUT_FILE::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete attr_;
  }
}

void pb_MSG_SYS_MU_PUT_FILE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_PUT_FILE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_PUT_FILE_descriptor_;
}

const pb_MSG_SYS_MU_PUT_FILE& pb_MSG_SYS_MU_PUT_FILE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_PUT_FILE* pb_MSG_SYS_MU_PUT_FILE::default_instance_ = NULL;

pb_MSG_SYS_MU_PUT_FILE* pb_MSG_SYS_MU_PUT_FILE::New() const {
  return new pb_MSG_SYS_MU_PUT_FILE;
}

void pb_MSG_SYS_MU_PUT_FILE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::cstore::File_Attr::Clear();
    }
  }
  block_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_PUT_FILE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attr;
        break;
      }
      
      // required .cstore.File_Attr attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_block_list;
        break;
      }
      
      // repeated .cstore.Block_Meta block_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_block_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_PUT_FILE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  // required .cstore.File_Attr attr = 4;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attr(), output);
  }
  
  // repeated .cstore.Block_Meta block_list = 5;
  for (int i = 0; i < this->block_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->block_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_PUT_FILE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  // required .cstore.File_Attr attr = 4;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attr(), target);
  }
  
  // repeated .cstore.Block_Meta block_list = 5;
  for (int i = 0; i < this->block_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->block_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_PUT_FILE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
    // required .cstore.File_Attr attr = 4;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  // repeated .cstore.Block_Meta block_list = 5;
  total_size += 1 * this->block_list_size();
  for (int i = 0; i < this->block_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_PUT_FILE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_PUT_FILE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_PUT_FILE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_PUT_FILE::MergeFrom(const pb_MSG_SYS_MU_PUT_FILE& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_list_.MergeFrom(from.block_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_attr()) {
      mutable_attr()->::cstore::File_Attr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_PUT_FILE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_PUT_FILE::CopyFrom(const pb_MSG_SYS_MU_PUT_FILE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_PUT_FILE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  for (int i = 0; i < block_list_size(); i++) {
    if (!this->block_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_MU_PUT_FILE::Swap(pb_MSG_SYS_MU_PUT_FILE* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(attr_, other->attr_);
    block_list_.Swap(&other->block_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_PUT_FILE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_PUT_FILE_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_PUT_FILE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_PUT_FILE_ACK::kVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_PUT_FILE_ACK::pb_MSG_SYS_MU_PUT_FILE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_PUT_FILE_ACK::pb_MSG_SYS_MU_PUT_FILE_ACK(const pb_MSG_SYS_MU_PUT_FILE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_PUT_FILE_ACK::~pb_MSG_SYS_MU_PUT_FILE_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_PUT_FILE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_PUT_FILE_ACK_descriptor_;
}

const pb_MSG_SYS_MU_PUT_FILE_ACK& pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_PUT_FILE_ACK* pb_MSG_SYS_MU_PUT_FILE_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_PUT_FILE_ACK* pb_MSG_SYS_MU_PUT_FILE_ACK::New() const {
  return new pb_MSG_SYS_MU_PUT_FILE_ACK;
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_PUT_FILE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_PUT_FILE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_PUT_FILE_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_PUT_FILE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_PUT_FILE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::MergeFrom(const pb_MSG_SYS_MU_PUT_FILE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::CopyFrom(const pb_MSG_SYS_MU_PUT_FILE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_PUT_FILE_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_MU_PUT_FILE_ACK::Swap(pb_MSG_SYS_MU_PUT_FILE_ACK* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_PUT_FILE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_PUT_FILE_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_PUT_FILE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_DEL_FILE::kUidFieldNumber;
const int pb_MSG_SYS_MU_DEL_FILE::kTokenFieldNumber;
const int pb_MSG_SYS_MU_DEL_FILE::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_DEL_FILE::pb_MSG_SYS_MU_DEL_FILE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_DEL_FILE::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_DEL_FILE::pb_MSG_SYS_MU_DEL_FILE(const pb_MSG_SYS_MU_DEL_FILE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_DEL_FILE::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_DEL_FILE::~pb_MSG_SYS_MU_DEL_FILE() {
  SharedDtor();
}

void pb_MSG_SYS_MU_DEL_FILE::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_DEL_FILE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_DEL_FILE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_DEL_FILE_descriptor_;
}

const pb_MSG_SYS_MU_DEL_FILE& pb_MSG_SYS_MU_DEL_FILE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_DEL_FILE* pb_MSG_SYS_MU_DEL_FILE::default_instance_ = NULL;

pb_MSG_SYS_MU_DEL_FILE* pb_MSG_SYS_MU_DEL_FILE::New() const {
  return new pb_MSG_SYS_MU_DEL_FILE;
}

void pb_MSG_SYS_MU_DEL_FILE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_DEL_FILE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_DEL_FILE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_DEL_FILE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_DEL_FILE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_DEL_FILE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_DEL_FILE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_DEL_FILE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_DEL_FILE::MergeFrom(const pb_MSG_SYS_MU_DEL_FILE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_DEL_FILE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_DEL_FILE::CopyFrom(const pb_MSG_SYS_MU_DEL_FILE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_DEL_FILE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_DEL_FILE::Swap(pb_MSG_SYS_MU_DEL_FILE* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_DEL_FILE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_DEL_FILE_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_DEL_FILE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_FILE::kUidFieldNumber;
const int pb_MSG_SYS_MU_GET_FILE::kTokenFieldNumber;
const int pb_MSG_SYS_MU_GET_FILE::kPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_FILE::pb_MSG_SYS_MU_GET_FILE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_FILE::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_FILE::pb_MSG_SYS_MU_GET_FILE(const pb_MSG_SYS_MU_GET_FILE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_FILE::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_FILE::~pb_MSG_SYS_MU_GET_FILE() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_FILE::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_FILE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_FILE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_FILE_descriptor_;
}

const pb_MSG_SYS_MU_GET_FILE& pb_MSG_SYS_MU_GET_FILE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_FILE* pb_MSG_SYS_MU_GET_FILE::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_FILE* pb_MSG_SYS_MU_GET_FILE::New() const {
  return new pb_MSG_SYS_MU_GET_FILE;
}

void pb_MSG_SYS_MU_GET_FILE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_FILE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_FILE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_FILE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes path = 3;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_FILE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_FILE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_FILE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_FILE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_FILE::MergeFrom(const pb_MSG_SYS_MU_GET_FILE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_FILE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_FILE::CopyFrom(const pb_MSG_SYS_MU_GET_FILE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_FILE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_FILE::Swap(pb_MSG_SYS_MU_GET_FILE* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_FILE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_FILE_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_FILE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_FILE_ACK::kAttrFieldNumber;
const int pb_MSG_SYS_MU_GET_FILE_ACK::kBlockListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_FILE_ACK::pb_MSG_SYS_MU_GET_FILE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_FILE_ACK::InitAsDefaultInstance() {
  attr_ = const_cast< ::cstore::File_Attr*>(&::cstore::File_Attr::default_instance());
}

pb_MSG_SYS_MU_GET_FILE_ACK::pb_MSG_SYS_MU_GET_FILE_ACK(const pb_MSG_SYS_MU_GET_FILE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_FILE_ACK::SharedCtor() {
  _cached_size_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_FILE_ACK::~pb_MSG_SYS_MU_GET_FILE_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_FILE_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void pb_MSG_SYS_MU_GET_FILE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_FILE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_FILE_ACK_descriptor_;
}

const pb_MSG_SYS_MU_GET_FILE_ACK& pb_MSG_SYS_MU_GET_FILE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_FILE_ACK* pb_MSG_SYS_MU_GET_FILE_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_FILE_ACK* pb_MSG_SYS_MU_GET_FILE_ACK::New() const {
  return new pb_MSG_SYS_MU_GET_FILE_ACK;
}

void pb_MSG_SYS_MU_GET_FILE_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attr()) {
      if (attr_ != NULL) attr_->::cstore::File_Attr::Clear();
    }
  }
  block_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_FILE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.File_Attr attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_list;
        break;
      }
      
      // repeated .cstore.Block_Meta block_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_FILE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.File_Attr attr = 1;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(), output);
  }
  
  // repeated .cstore.Block_Meta block_list = 2;
  for (int i = 0; i < this->block_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_FILE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.File_Attr attr = 1;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(), target);
  }
  
  // repeated .cstore.Block_Meta block_list = 2;
  for (int i = 0; i < this->block_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_FILE_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.File_Attr attr = 1;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  // repeated .cstore.Block_Meta block_list = 2;
  total_size += 1 * this->block_list_size();
  for (int i = 0; i < this->block_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_FILE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_FILE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_FILE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_FILE_ACK::MergeFrom(const pb_MSG_SYS_MU_GET_FILE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_list_.MergeFrom(from.block_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr()) {
      mutable_attr()->::cstore::File_Attr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_FILE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_FILE_ACK::CopyFrom(const pb_MSG_SYS_MU_GET_FILE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_FILE_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  for (int i = 0; i < block_list_size(); i++) {
    if (!this->block_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_MU_GET_FILE_ACK::Swap(pb_MSG_SYS_MU_GET_FILE_ACK* other) {
  if (other != this) {
    std::swap(attr_, other->attr_);
    block_list_.Swap(&other->block_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_FILE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_FILE_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_FILE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_MOV_FILE::kUidFieldNumber;
const int pb_MSG_SYS_MU_MOV_FILE::kTokenFieldNumber;
const int pb_MSG_SYS_MU_MOV_FILE::kSrcPathFieldNumber;
const int pb_MSG_SYS_MU_MOV_FILE::kDestPathFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_MOV_FILE::pb_MSG_SYS_MU_MOV_FILE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_MOV_FILE::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_MOV_FILE::pb_MSG_SYS_MU_MOV_FILE(const pb_MSG_SYS_MU_MOV_FILE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_MOV_FILE::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_MOV_FILE::~pb_MSG_SYS_MU_MOV_FILE() {
  SharedDtor();
}

void pb_MSG_SYS_MU_MOV_FILE::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (src_path_ != &::google::protobuf::internal::kEmptyString) {
    delete src_path_;
  }
  if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_path_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_MOV_FILE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_MOV_FILE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_MOV_FILE_descriptor_;
}

const pb_MSG_SYS_MU_MOV_FILE& pb_MSG_SYS_MU_MOV_FILE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_MOV_FILE* pb_MSG_SYS_MU_MOV_FILE::default_instance_ = NULL;

pb_MSG_SYS_MU_MOV_FILE* pb_MSG_SYS_MU_MOV_FILE::New() const {
  return new pb_MSG_SYS_MU_MOV_FILE;
}

void pb_MSG_SYS_MU_MOV_FILE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_src_path()) {
      if (src_path_ != &::google::protobuf::internal::kEmptyString) {
        src_path_->clear();
      }
    }
    if (has_dest_path()) {
      if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
        dest_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_MOV_FILE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src_path;
        break;
      }
      
      // required bytes src_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest_path;
        break;
      }
      
      // required bytes dest_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_MOV_FILE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required bytes src_path = 3;
  if (has_src_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->src_path(), output);
  }
  
  // required bytes dest_path = 4;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->dest_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_MOV_FILE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required bytes src_path = 3;
  if (has_src_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_path(), target);
  }
  
  // required bytes dest_path = 4;
  if (has_dest_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dest_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_MOV_FILE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required bytes src_path = 3;
    if (has_src_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_path());
    }
    
    // required bytes dest_path = 4;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_MOV_FILE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_MOV_FILE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_MOV_FILE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_MOV_FILE::MergeFrom(const pb_MSG_SYS_MU_MOV_FILE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_src_path()) {
      set_src_path(from.src_path());
    }
    if (from.has_dest_path()) {
      set_dest_path(from.dest_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_MOV_FILE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_MOV_FILE::CopyFrom(const pb_MSG_SYS_MU_MOV_FILE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_MOV_FILE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void pb_MSG_SYS_MU_MOV_FILE::Swap(pb_MSG_SYS_MU_MOV_FILE* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(src_path_, other->src_path_);
    std::swap(dest_path_, other->dest_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_MOV_FILE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_MOV_FILE_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_MOV_FILE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_USER_LOG::kUidFieldNumber;
const int pb_MSG_SYS_MU_GET_USER_LOG::kTokenFieldNumber;
const int pb_MSG_SYS_MU_GET_USER_LOG::kSeqNrFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_USER_LOG::pb_MSG_SYS_MU_GET_USER_LOG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_USER_LOG::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_USER_LOG::pb_MSG_SYS_MU_GET_USER_LOG(const pb_MSG_SYS_MU_GET_USER_LOG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_LOG::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_nr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_USER_LOG::~pb_MSG_SYS_MU_GET_USER_LOG() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_USER_LOG::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_USER_LOG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_LOG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_USER_LOG_descriptor_;
}

const pb_MSG_SYS_MU_GET_USER_LOG& pb_MSG_SYS_MU_GET_USER_LOG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_USER_LOG* pb_MSG_SYS_MU_GET_USER_LOG::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_USER_LOG* pb_MSG_SYS_MU_GET_USER_LOG::New() const {
  return new pb_MSG_SYS_MU_GET_USER_LOG;
}

void pb_MSG_SYS_MU_GET_USER_LOG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    seq_nr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_USER_LOG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq_nr;
        break;
      }
      
      // required uint64 seq_nr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_nr_)));
          set_has_seq_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_USER_LOG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required uint64 seq_nr = 3;
  if (has_seq_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seq_nr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_USER_LOG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required uint64 seq_nr = 3;
  if (has_seq_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seq_nr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_USER_LOG::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required uint64 seq_nr = 3;
    if (has_seq_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq_nr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_USER_LOG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_USER_LOG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_USER_LOG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_USER_LOG::MergeFrom(const pb_MSG_SYS_MU_GET_USER_LOG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_seq_nr()) {
      set_seq_nr(from.seq_nr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_USER_LOG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_LOG::CopyFrom(const pb_MSG_SYS_MU_GET_USER_LOG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_USER_LOG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_SYS_MU_GET_USER_LOG::Swap(pb_MSG_SYS_MU_GET_USER_LOG* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(seq_nr_, other->seq_nr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_USER_LOG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_USER_LOG_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_USER_LOG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int File_Meta::kAttrFieldNumber;
const int File_Meta::kBlockListFieldNumber;
#endif  // !_MSC_VER

File_Meta::File_Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void File_Meta::InitAsDefaultInstance() {
  attr_ = const_cast< ::cstore::File_Attr*>(&::cstore::File_Attr::default_instance());
}

File_Meta::File_Meta(const File_Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void File_Meta::SharedCtor() {
  _cached_size_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File_Meta::~File_Meta() {
  SharedDtor();
}

void File_Meta::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void File_Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File_Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_Meta_descriptor_;
}

const File_Meta& File_Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

File_Meta* File_Meta::default_instance_ = NULL;

File_Meta* File_Meta::New() const {
  return new File_Meta;
}

void File_Meta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attr()) {
      if (attr_ != NULL) attr_->::cstore::File_Attr::Clear();
    }
  }
  block_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.File_Attr attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_list;
        break;
      }
      
      // repeated .cstore.Block_Meta block_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void File_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.File_Attr attr = 1;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(), output);
  }
  
  // repeated .cstore.Block_Meta block_list = 2;
  for (int i = 0; i < this->block_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* File_Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.File_Attr attr = 1;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(), target);
  }
  
  // repeated .cstore.Block_Meta block_list = 2;
  for (int i = 0; i < this->block_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int File_Meta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.File_Attr attr = 1;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  // repeated .cstore.Block_Meta block_list = 2;
  total_size += 1 * this->block_list_size();
  for (int i = 0; i < this->block_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File_Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File_Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File_Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File_Meta::MergeFrom(const File_Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_list_.MergeFrom(from.block_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr()) {
      mutable_attr()->::cstore::File_Attr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File_Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File_Meta::CopyFrom(const File_Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File_Meta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  for (int i = 0; i < block_list_size(); i++) {
    if (!this->block_list(i).IsInitialized()) return false;
  }
  return true;
}

void File_Meta::Swap(File_Meta* other) {
  if (other != this) {
    std::swap(attr_, other->attr_);
    block_list_.Swap(&other->block_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File_Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_Meta_descriptor_;
  metadata.reflection = File_Meta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Log_Entry::kSeqNrFieldNumber;
const int Log_Entry::kUidFieldNumber;
const int Log_Entry::kTokenFieldNumber;
const int Log_Entry::kOpCodeFieldNumber;
const int Log_Entry::kPathFieldNumber;
const int Log_Entry::kSrcPathFieldNumber;
const int Log_Entry::kDestPathFieldNumber;
const int Log_Entry::kFileMetaFieldNumber;
#endif  // !_MSC_VER

Log_Entry::Log_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Log_Entry::InitAsDefaultInstance() {
  file_meta_ = const_cast< ::cstore::File_Meta*>(&::cstore::File_Meta::default_instance());
}

Log_Entry::Log_Entry(const Log_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Log_Entry::SharedCtor() {
  _cached_size_ = 0;
  seq_nr_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_code_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_meta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log_Entry::~Log_Entry() {
  SharedDtor();
}

void Log_Entry::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (src_path_ != &::google::protobuf::internal::kEmptyString) {
    delete src_path_;
  }
  if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_path_;
  }
  if (this != default_instance_) {
    delete file_meta_;
  }
}

void Log_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_Entry_descriptor_;
}

const Log_Entry& Log_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Log_Entry* Log_Entry::default_instance_ = NULL;

Log_Entry* Log_Entry::New() const {
  return new Log_Entry;
}

void Log_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_nr_ = GOOGLE_ULONGLONG(0);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    op_code_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_src_path()) {
      if (src_path_ != &::google::protobuf::internal::kEmptyString) {
        src_path_->clear();
      }
    }
    if (has_dest_path()) {
      if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
        dest_path_->clear();
      }
    }
    if (has_file_meta()) {
      if (file_meta_ != NULL) file_meta_->::cstore::File_Meta::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Log_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seq_nr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_nr_)));
          set_has_seq_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_op_code;
        break;
      }
      
      // required uint32 op_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_code_)));
          set_has_op_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }
      
      // optional bytes path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_src_path;
        break;
      }
      
      // optional bytes src_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dest_path;
        break;
      }
      
      // optional bytes dest_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_file_meta;
        break;
      }
      
      // optional .cstore.File_Meta file_meta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Log_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 seq_nr = 1;
  if (has_seq_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seq_nr(), output);
  }
  
  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }
  
  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }
  
  // required uint32 op_code = 4;
  if (has_op_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->op_code(), output);
  }
  
  // optional bytes path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->path(), output);
  }
  
  // optional bytes src_path = 6;
  if (has_src_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->src_path(), output);
  }
  
  // optional bytes dest_path = 7;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->dest_path(), output);
  }
  
  // optional .cstore.File_Meta file_meta = 8;
  if (has_file_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->file_meta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Log_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 seq_nr = 1;
  if (has_seq_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seq_nr(), target);
  }
  
  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }
  
  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }
  
  // required uint32 op_code = 4;
  if (has_op_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->op_code(), target);
  }
  
  // optional bytes path = 5;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->path(), target);
  }
  
  // optional bytes src_path = 6;
  if (has_src_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->src_path(), target);
  }
  
  // optional bytes dest_path = 7;
  if (has_dest_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dest_path(), target);
  }
  
  // optional .cstore.File_Meta file_meta = 8;
  if (has_file_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->file_meta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Log_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 seq_nr = 1;
    if (has_seq_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq_nr());
    }
    
    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required uint32 op_code = 4;
    if (has_op_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_code());
    }
    
    // optional bytes path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
    // optional bytes src_path = 6;
    if (has_src_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_path());
    }
    
    // optional bytes dest_path = 7;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_path());
    }
    
    // optional .cstore.File_Meta file_meta = 8;
    if (has_file_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_meta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Log_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Log_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log_Entry::MergeFrom(const Log_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_nr()) {
      set_seq_nr(from.seq_nr());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_op_code()) {
      set_op_code(from.op_code());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_src_path()) {
      set_src_path(from.src_path());
    }
    if (from.has_dest_path()) {
      set_dest_path(from.dest_path());
    }
    if (from.has_file_meta()) {
      mutable_file_meta()->::cstore::File_Meta::MergeFrom(from.file_meta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Log_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log_Entry::CopyFrom(const Log_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_file_meta()) {
    if (!this->file_meta().IsInitialized()) return false;
  }
  return true;
}

void Log_Entry::Swap(Log_Entry* other) {
  if (other != this) {
    std::swap(seq_nr_, other->seq_nr_);
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(op_code_, other->op_code_);
    std::swap(path_, other->path_);
    std::swap(src_path_, other->src_path_);
    std::swap(dest_path_, other->dest_path_);
    std::swap(file_meta_, other->file_meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Log_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_Entry_descriptor_;
  metadata.reflection = Log_Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_MU_GET_USER_LOG_ACK::kLogListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_MU_GET_USER_LOG_ACK::pb_MSG_SYS_MU_GET_USER_LOG_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_MU_GET_USER_LOG_ACK::pb_MSG_SYS_MU_GET_USER_LOG_ACK(const pb_MSG_SYS_MU_GET_USER_LOG_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_MU_GET_USER_LOG_ACK::~pb_MSG_SYS_MU_GET_USER_LOG_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_MU_GET_USER_LOG_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_MU_GET_USER_LOG_ACK_descriptor_;
}

const pb_MSG_SYS_MU_GET_USER_LOG_ACK& pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_MU_GET_USER_LOG_ACK* pb_MSG_SYS_MU_GET_USER_LOG_ACK::default_instance_ = NULL;

pb_MSG_SYS_MU_GET_USER_LOG_ACK* pb_MSG_SYS_MU_GET_USER_LOG_ACK::New() const {
  return new pb_MSG_SYS_MU_GET_USER_LOG_ACK;
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::Clear() {
  log_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_MU_GET_USER_LOG_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Log_Entry log_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Log_Entry log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_MU_GET_USER_LOG_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Log_Entry log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_MU_GET_USER_LOG_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Log_Entry log_list = 1;
  total_size += 1 * this->log_list_size();
  for (int i = 0; i < this->log_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_MU_GET_USER_LOG_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_MU_GET_USER_LOG_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::MergeFrom(const pb_MSG_SYS_MU_GET_USER_LOG_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_list_.MergeFrom(from.log_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::CopyFrom(const pb_MSG_SYS_MU_GET_USER_LOG_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_MU_GET_USER_LOG_ACK::IsInitialized() const {
  
  for (int i = 0; i < log_list_size(); i++) {
    if (!this->log_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_MU_GET_USER_LOG_ACK::Swap(pb_MSG_SYS_MU_GET_USER_LOG_ACK* other) {
  if (other != this) {
    log_list_.Swap(&other->log_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_MU_GET_USER_LOG_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_MU_GET_USER_LOG_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_MU_GET_USER_LOG_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_MU_CREATE_USER::kUidFieldNumber;
const int pb_MSG_MPC_MU_CREATE_USER::kQuotaFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_MU_CREATE_USER::pb_MSG_MPC_MU_CREATE_USER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_MU_CREATE_USER::InitAsDefaultInstance() {
}

pb_MSG_MPC_MU_CREATE_USER::pb_MSG_MPC_MU_CREATE_USER(const pb_MSG_MPC_MU_CREATE_USER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_MU_CREATE_USER::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_MU_CREATE_USER::~pb_MSG_MPC_MU_CREATE_USER() {
  SharedDtor();
}

void pb_MSG_MPC_MU_CREATE_USER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_MU_CREATE_USER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_MU_CREATE_USER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_MU_CREATE_USER_descriptor_;
}

const pb_MSG_MPC_MU_CREATE_USER& pb_MSG_MPC_MU_CREATE_USER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_MU_CREATE_USER* pb_MSG_MPC_MU_CREATE_USER::default_instance_ = NULL;

pb_MSG_MPC_MU_CREATE_USER* pb_MSG_MPC_MU_CREATE_USER::New() const {
  return new pb_MSG_MPC_MU_CREATE_USER;
}

void pb_MSG_MPC_MU_CREATE_USER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    quota_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_MU_CREATE_USER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quota;
        break;
      }
      
      // required uint64 quota = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_MU_CREATE_USER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required uint64 quota = 2;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quota(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_MU_CREATE_USER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required uint64 quota = 2;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quota(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_MU_CREATE_USER::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required uint64 quota = 2;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_MU_CREATE_USER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_MU_CREATE_USER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_MU_CREATE_USER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_MU_CREATE_USER::MergeFrom(const pb_MSG_MPC_MU_CREATE_USER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_MU_CREATE_USER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_MU_CREATE_USER::CopyFrom(const pb_MSG_MPC_MU_CREATE_USER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_MU_CREATE_USER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_MPC_MU_CREATE_USER::Swap(pb_MSG_MPC_MU_CREATE_USER* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(quota_, other->quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_MU_CREATE_USER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_MU_CREATE_USER_descriptor_;
  metadata.reflection = pb_MSG_MPC_MU_CREATE_USER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_MU_DELETE_USER::kUidFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_MU_DELETE_USER::pb_MSG_MPC_MU_DELETE_USER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_MU_DELETE_USER::InitAsDefaultInstance() {
}

pb_MSG_MPC_MU_DELETE_USER::pb_MSG_MPC_MU_DELETE_USER(const pb_MSG_MPC_MU_DELETE_USER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_MU_DELETE_USER::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_MU_DELETE_USER::~pb_MSG_MPC_MU_DELETE_USER() {
  SharedDtor();
}

void pb_MSG_MPC_MU_DELETE_USER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_MU_DELETE_USER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_MU_DELETE_USER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_MU_DELETE_USER_descriptor_;
}

const pb_MSG_MPC_MU_DELETE_USER& pb_MSG_MPC_MU_DELETE_USER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_MU_DELETE_USER* pb_MSG_MPC_MU_DELETE_USER::default_instance_ = NULL;

pb_MSG_MPC_MU_DELETE_USER* pb_MSG_MPC_MU_DELETE_USER::New() const {
  return new pb_MSG_MPC_MU_DELETE_USER;
}

void pb_MSG_MPC_MU_DELETE_USER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_MU_DELETE_USER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_MU_DELETE_USER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_MU_DELETE_USER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_MU_DELETE_USER::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_MU_DELETE_USER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_MU_DELETE_USER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_MU_DELETE_USER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_MU_DELETE_USER::MergeFrom(const pb_MSG_MPC_MU_DELETE_USER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_MU_DELETE_USER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_MU_DELETE_USER::CopyFrom(const pb_MSG_MPC_MU_DELETE_USER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_MU_DELETE_USER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MPC_MU_DELETE_USER::Swap(pb_MSG_MPC_MU_DELETE_USER* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_MU_DELETE_USER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_MU_DELETE_USER_descriptor_;
  metadata.reflection = pb_MSG_MPC_MU_DELETE_USER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_MU_SET_BUCKET_STATE::kBucketIndexFieldNumber;
const int pb_MSG_CS_MU_SET_BUCKET_STATE::kStateFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_MU_SET_BUCKET_STATE::pb_MSG_CS_MU_SET_BUCKET_STATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::InitAsDefaultInstance() {
}

pb_MSG_CS_MU_SET_BUCKET_STATE::pb_MSG_CS_MU_SET_BUCKET_STATE(const pb_MSG_CS_MU_SET_BUCKET_STATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_MU_SET_BUCKET_STATE::~pb_MSG_CS_MU_SET_BUCKET_STATE() {
  SharedDtor();
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_SET_BUCKET_STATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_MU_SET_BUCKET_STATE_descriptor_;
}

const pb_MSG_CS_MU_SET_BUCKET_STATE& pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_MU_SET_BUCKET_STATE* pb_MSG_CS_MU_SET_BUCKET_STATE::default_instance_ = NULL;

pb_MSG_CS_MU_SET_BUCKET_STATE* pb_MSG_CS_MU_SET_BUCKET_STATE::New() const {
  return new pb_MSG_CS_MU_SET_BUCKET_STATE;
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_MU_SET_BUCKET_STATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bucket_index(), output);
  }
  
  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_MU_SET_BUCKET_STATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bucket_index(), target);
  }
  
  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_MU_SET_BUCKET_STATE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_index());
    }
    
    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_MU_SET_BUCKET_STATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_MU_SET_BUCKET_STATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::MergeFrom(const pb_MSG_CS_MU_SET_BUCKET_STATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::CopyFrom(const pb_MSG_CS_MU_SET_BUCKET_STATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_MU_SET_BUCKET_STATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_CS_MU_SET_BUCKET_STATE::Swap(pb_MSG_CS_MU_SET_BUCKET_STATE* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_MU_SET_BUCKET_STATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_MU_SET_BUCKET_STATE_descriptor_;
  metadata.reflection = pb_MSG_CS_MU_SET_BUCKET_STATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_MU_DELETE_BUCKET::kBucketIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_MU_DELETE_BUCKET::pb_MSG_CS_MU_DELETE_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_MU_DELETE_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_CS_MU_DELETE_BUCKET::pb_MSG_CS_MU_DELETE_BUCKET(const pb_MSG_CS_MU_DELETE_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_MU_DELETE_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_MU_DELETE_BUCKET::~pb_MSG_CS_MU_DELETE_BUCKET() {
  SharedDtor();
}

void pb_MSG_CS_MU_DELETE_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_MU_DELETE_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_DELETE_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_MU_DELETE_BUCKET_descriptor_;
}

const pb_MSG_CS_MU_DELETE_BUCKET& pb_MSG_CS_MU_DELETE_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_MU_DELETE_BUCKET* pb_MSG_CS_MU_DELETE_BUCKET::default_instance_ = NULL;

pb_MSG_CS_MU_DELETE_BUCKET* pb_MSG_CS_MU_DELETE_BUCKET::New() const {
  return new pb_MSG_CS_MU_DELETE_BUCKET;
}

void pb_MSG_CS_MU_DELETE_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_MU_DELETE_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_MU_DELETE_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bucket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_MU_DELETE_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bucket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_MU_DELETE_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_MU_DELETE_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_MU_DELETE_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_MU_DELETE_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_MU_DELETE_BUCKET::MergeFrom(const pb_MSG_CS_MU_DELETE_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_MU_DELETE_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_MU_DELETE_BUCKET::CopyFrom(const pb_MSG_CS_MU_DELETE_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_MU_DELETE_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_CS_MU_DELETE_BUCKET::Swap(pb_MSG_CS_MU_DELETE_BUCKET* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_MU_DELETE_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_MU_DELETE_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_CS_MU_DELETE_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_MU_MIGRATE_BUCKET::kSourceMuFieldNumber;
const int pb_MSG_CS_MU_MIGRATE_BUCKET::kBucketIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_MU_MIGRATE_BUCKET::pb_MSG_CS_MU_MIGRATE_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_CS_MU_MIGRATE_BUCKET::pb_MSG_CS_MU_MIGRATE_BUCKET(const pb_MSG_CS_MU_MIGRATE_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  source_mu_ = 0u;
  bucket_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_MU_MIGRATE_BUCKET::~pb_MSG_CS_MU_MIGRATE_BUCKET() {
  SharedDtor();
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_MIGRATE_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_MU_MIGRATE_BUCKET_descriptor_;
}

const pb_MSG_CS_MU_MIGRATE_BUCKET& pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_MU_MIGRATE_BUCKET* pb_MSG_CS_MU_MIGRATE_BUCKET::default_instance_ = NULL;

pb_MSG_CS_MU_MIGRATE_BUCKET* pb_MSG_CS_MU_MIGRATE_BUCKET::New() const {
  return new pb_MSG_CS_MU_MIGRATE_BUCKET;
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_mu_ = 0u;
    bucket_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_MU_MIGRATE_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source_mu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_mu_)));
          set_has_source_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bucket_index;
        break;
      }
      
      // required uint32 bucket_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bucket_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 source_mu = 1;
  if (has_source_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_mu(), output);
  }
  
  // required uint32 bucket_index = 2;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bucket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_MU_MIGRATE_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 source_mu = 1;
  if (has_source_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_mu(), target);
  }
  
  // required uint32 bucket_index = 2;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bucket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_MU_MIGRATE_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 source_mu = 1;
    if (has_source_mu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_mu());
    }
    
    // required uint32 bucket_index = 2;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_MU_MIGRATE_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_MU_MIGRATE_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::MergeFrom(const pb_MSG_CS_MU_MIGRATE_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_mu()) {
      set_source_mu(from.source_mu());
    }
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::CopyFrom(const pb_MSG_CS_MU_MIGRATE_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_MU_MIGRATE_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_CS_MU_MIGRATE_BUCKET::Swap(pb_MSG_CS_MU_MIGRATE_BUCKET* other) {
  if (other != this) {
    std::swap(source_mu_, other->source_mu_);
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_MU_MIGRATE_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_MU_MIGRATE_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_CS_MU_MIGRATE_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_MU_EXTENT_BUCKET::kNewModFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_MU_EXTENT_BUCKET::pb_MSG_CS_MU_EXTENT_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_MU_EXTENT_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_CS_MU_EXTENT_BUCKET::pb_MSG_CS_MU_EXTENT_BUCKET(const pb_MSG_CS_MU_EXTENT_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_MU_EXTENT_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  new_mod_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_MU_EXTENT_BUCKET::~pb_MSG_CS_MU_EXTENT_BUCKET() {
  SharedDtor();
}

void pb_MSG_CS_MU_EXTENT_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_MU_EXTENT_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_MU_EXTENT_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_MU_EXTENT_BUCKET_descriptor_;
}

const pb_MSG_CS_MU_EXTENT_BUCKET& pb_MSG_CS_MU_EXTENT_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_MU_EXTENT_BUCKET* pb_MSG_CS_MU_EXTENT_BUCKET::default_instance_ = NULL;

pb_MSG_CS_MU_EXTENT_BUCKET* pb_MSG_CS_MU_EXTENT_BUCKET::New() const {
  return new pb_MSG_CS_MU_EXTENT_BUCKET;
}

void pb_MSG_CS_MU_EXTENT_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_mod_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_MU_EXTENT_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 new_mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_mod_)));
          set_has_new_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_MU_EXTENT_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 new_mod = 1;
  if (has_new_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_mod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_MU_EXTENT_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 new_mod = 1;
  if (has_new_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_mod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_MU_EXTENT_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 new_mod = 1;
    if (has_new_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_mod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_MU_EXTENT_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_MU_EXTENT_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_MU_EXTENT_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_MU_EXTENT_BUCKET::MergeFrom(const pb_MSG_CS_MU_EXTENT_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_mod()) {
      set_new_mod(from.new_mod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_MU_EXTENT_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_MU_EXTENT_BUCKET::CopyFrom(const pb_MSG_CS_MU_EXTENT_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_MU_EXTENT_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_CS_MU_EXTENT_BUCKET::Swap(pb_MSG_CS_MU_EXTENT_BUCKET* other) {
  if (other != this) {
    std::swap(new_mod_, other->new_mod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_MU_EXTENT_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_MU_EXTENT_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_CS_MU_EXTENT_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::kBucketIndexFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::InitAsDefaultInstance() {
}

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE(const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::~pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE() {
  SharedDtor();
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_descriptor_;
}

const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE& pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::default_instance_ = NULL;

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::New() const {
  return new pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE;
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bucket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bucket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::MergeFrom(const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::CopyFrom(const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::Swap(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_descriptor_;
  metadata.reflection = pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::kSeqNrFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::InitAsDefaultInstance() {
}

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK(const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::SharedCtor() {
  _cached_size_ = 0;
  seq_nr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::~pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK() {
  SharedDtor();
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_descriptor_;
}

const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK& pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::default_instance_ = NULL;

pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::New() const {
  return new pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK;
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_nr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seq_nr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_nr_)));
          set_has_seq_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 seq_nr = 1;
  if (has_seq_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seq_nr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 seq_nr = 1;
  if (has_seq_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seq_nr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 seq_nr = 1;
    if (has_seq_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq_nr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::MergeFrom(const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_nr()) {
      set_seq_nr(from.seq_nr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::CopyFrom(const pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::Swap(pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK* other) {
  if (other != this) {
    std::swap(seq_nr_, other->seq_nr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_descriptor_;
  metadata.reflection = pb_MSG_MU_MU_MIGRATE_BUCKET_HANDSHAKE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_MU_SYNC_HANDSHAKE::kBucketIndexFieldNumber;
const int pb_MSG_MU_MU_SYNC_HANDSHAKE::kSeqNrFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_MU_SYNC_HANDSHAKE::pb_MSG_MU_MU_SYNC_HANDSHAKE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::InitAsDefaultInstance() {
}

pb_MSG_MU_MU_SYNC_HANDSHAKE::pb_MSG_MU_MU_SYNC_HANDSHAKE(const pb_MSG_MU_MU_SYNC_HANDSHAKE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::SharedCtor() {
  _cached_size_ = 0;
  bucket_index_ = GOOGLE_ULONGLONG(0);
  seq_nr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_MU_SYNC_HANDSHAKE::~pb_MSG_MU_MU_SYNC_HANDSHAKE() {
  SharedDtor();
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_SYNC_HANDSHAKE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_MU_SYNC_HANDSHAKE_descriptor_;
}

const pb_MSG_MU_MU_SYNC_HANDSHAKE& pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_MU_SYNC_HANDSHAKE* pb_MSG_MU_MU_SYNC_HANDSHAKE::default_instance_ = NULL;

pb_MSG_MU_MU_SYNC_HANDSHAKE* pb_MSG_MU_MU_SYNC_HANDSHAKE::New() const {
  return new pb_MSG_MU_MU_SYNC_HANDSHAKE;
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_index_ = GOOGLE_ULONGLONG(0);
    seq_nr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_MU_SYNC_HANDSHAKE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 bucket_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bucket_index_)));
          set_has_bucket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_nr;
        break;
      }
      
      // required uint64 seq_nr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_nr_)));
          set_has_seq_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 bucket_index = 1;
  if (has_bucket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bucket_index(), output);
  }
  
  // required uint64 seq_nr = 2;
  if (has_seq_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seq_nr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_MU_SYNC_HANDSHAKE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 bucket_index = 1;
  if (has_bucket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bucket_index(), target);
  }
  
  // required uint64 seq_nr = 2;
  if (has_seq_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seq_nr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_MU_SYNC_HANDSHAKE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 bucket_index = 1;
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bucket_index());
    }
    
    // required uint64 seq_nr = 2;
    if (has_seq_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq_nr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_MU_SYNC_HANDSHAKE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_MU_SYNC_HANDSHAKE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::MergeFrom(const pb_MSG_MU_MU_SYNC_HANDSHAKE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_index()) {
      set_bucket_index(from.bucket_index());
    }
    if (from.has_seq_nr()) {
      set_seq_nr(from.seq_nr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::CopyFrom(const pb_MSG_MU_MU_SYNC_HANDSHAKE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_MU_SYNC_HANDSHAKE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_MU_MU_SYNC_HANDSHAKE::Swap(pb_MSG_MU_MU_SYNC_HANDSHAKE* other) {
  if (other != this) {
    std::swap(bucket_index_, other->bucket_index_);
    std::swap(seq_nr_, other->seq_nr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_MU_SYNC_HANDSHAKE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_MU_SYNC_HANDSHAKE_descriptor_;
  metadata.reflection = pb_MSG_MU_MU_SYNC_HANDSHAKE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_MU_PUSH_LOG::kLogListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_MU_PUSH_LOG::pb_MSG_MU_MU_PUSH_LOG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_MU_PUSH_LOG::InitAsDefaultInstance() {
}

pb_MSG_MU_MU_PUSH_LOG::pb_MSG_MU_MU_PUSH_LOG(const pb_MSG_MU_MU_PUSH_LOG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_MU_PUSH_LOG::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_MU_PUSH_LOG::~pb_MSG_MU_MU_PUSH_LOG() {
  SharedDtor();
}

void pb_MSG_MU_MU_PUSH_LOG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_MU_PUSH_LOG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_PUSH_LOG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_MU_PUSH_LOG_descriptor_;
}

const pb_MSG_MU_MU_PUSH_LOG& pb_MSG_MU_MU_PUSH_LOG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_MU_PUSH_LOG* pb_MSG_MU_MU_PUSH_LOG::default_instance_ = NULL;

pb_MSG_MU_MU_PUSH_LOG* pb_MSG_MU_MU_PUSH_LOG::New() const {
  return new pb_MSG_MU_MU_PUSH_LOG;
}

void pb_MSG_MU_MU_PUSH_LOG::Clear() {
  log_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_MU_PUSH_LOG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Log_Entry log_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_MU_PUSH_LOG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Log_Entry log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_MU_PUSH_LOG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Log_Entry log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_MU_PUSH_LOG::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Log_Entry log_list = 1;
  total_size += 1 * this->log_list_size();
  for (int i = 0; i < this->log_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_MU_PUSH_LOG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_MU_PUSH_LOG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_MU_PUSH_LOG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_MU_PUSH_LOG::MergeFrom(const pb_MSG_MU_MU_PUSH_LOG& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_list_.MergeFrom(from.log_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_MU_PUSH_LOG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_MU_PUSH_LOG::CopyFrom(const pb_MSG_MU_MU_PUSH_LOG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_MU_PUSH_LOG::IsInitialized() const {
  
  for (int i = 0; i < log_list_size(); i++) {
    if (!this->log_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MU_MU_PUSH_LOG::Swap(pb_MSG_MU_MU_PUSH_LOG* other) {
  if (other != this) {
    log_list_.Swap(&other->log_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_MU_PUSH_LOG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_MU_PUSH_LOG_descriptor_;
  metadata.reflection = pb_MSG_MU_MU_PUSH_LOG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_MU_PULL_LOG_ACK::kLogListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_MU_PULL_LOG_ACK::pb_MSG_MU_MU_PULL_LOG_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_MU_PULL_LOG_ACK::InitAsDefaultInstance() {
}

pb_MSG_MU_MU_PULL_LOG_ACK::pb_MSG_MU_MU_PULL_LOG_ACK(const pb_MSG_MU_MU_PULL_LOG_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_MU_PULL_LOG_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_MU_PULL_LOG_ACK::~pb_MSG_MU_MU_PULL_LOG_ACK() {
  SharedDtor();
}

void pb_MSG_MU_MU_PULL_LOG_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_MU_PULL_LOG_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_MU_PULL_LOG_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_MU_PULL_LOG_ACK_descriptor_;
}

const pb_MSG_MU_MU_PULL_LOG_ACK& pb_MSG_MU_MU_PULL_LOG_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_MU_PULL_LOG_ACK* pb_MSG_MU_MU_PULL_LOG_ACK::default_instance_ = NULL;

pb_MSG_MU_MU_PULL_LOG_ACK* pb_MSG_MU_MU_PULL_LOG_ACK::New() const {
  return new pb_MSG_MU_MU_PULL_LOG_ACK;
}

void pb_MSG_MU_MU_PULL_LOG_ACK::Clear() {
  log_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_MU_PULL_LOG_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Log_Entry log_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_MU_PULL_LOG_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Log_Entry log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_MU_PULL_LOG_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Log_Entry log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_MU_PULL_LOG_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Log_Entry log_list = 1;
  total_size += 1 * this->log_list_size();
  for (int i = 0; i < this->log_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_MU_PULL_LOG_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_MU_PULL_LOG_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_MU_PULL_LOG_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_MU_PULL_LOG_ACK::MergeFrom(const pb_MSG_MU_MU_PULL_LOG_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_list_.MergeFrom(from.log_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_MU_PULL_LOG_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_MU_PULL_LOG_ACK::CopyFrom(const pb_MSG_MU_MU_PULL_LOG_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_MU_PULL_LOG_ACK::IsInitialized() const {
  
  for (int i = 0; i < log_list_size(); i++) {
    if (!this->log_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MU_MU_PULL_LOG_ACK::Swap(pb_MSG_MU_MU_PULL_LOG_ACK* other) {
  if (other != this) {
    log_list_.Swap(&other->log_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_MU_PULL_LOG_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_MU_PULL_LOG_ACK_descriptor_;
  metadata.reflection = pb_MSG_MU_MU_PULL_LOG_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map_Item::kModuleIPFieldNumber;
const int Map_Item::kBucketNumFieldNumber;
#endif  // !_MSC_VER

Map_Item::Map_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map_Item::InitAsDefaultInstance() {
}

Map_Item::Map_Item(const Map_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map_Item::SharedCtor() {
  _cached_size_ = 0;
  bucket_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map_Item::~Map_Item() {
  SharedDtor();
}

void Map_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_Item_descriptor_;
}

const Map_Item& Map_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Map_Item* Map_Item::default_instance_ = NULL;

Map_Item* Map_Item::New() const {
  return new Map_Item;
}

void Map_Item::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bucket_num_ = 0u;
  }
  module_ip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 Module_IP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Module_IP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_module_ip())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_module_ip())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Module_IP;
        if (input->ExpectTag(16)) goto parse_bucket_num;
        break;
      }
      
      // required uint32 bucket_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bucket_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_num_)));
          set_has_bucket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 Module_IP = 1;
  for (int i = 0; i < this->module_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->module_ip(i), output);
  }
  
  // required uint32 bucket_num = 2;
  if (has_bucket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bucket_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 Module_IP = 1;
  for (int i = 0; i < this->module_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->module_ip(i), target);
  }
  
  // required uint32 bucket_num = 2;
  if (has_bucket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bucket_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 bucket_num = 2;
    if (has_bucket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_num());
    }
    
  }
  // repeated uint32 Module_IP = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->module_ip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->module_ip(i));
    }
    total_size += 1 * this->module_ip_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map_Item::MergeFrom(const Map_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_ip_.MergeFrom(from.module_ip_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bucket_num()) {
      set_bucket_num(from.bucket_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_Item::CopyFrom(const Map_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Map_Item::Swap(Map_Item* other) {
  if (other != this) {
    module_ip_.Swap(&other->module_ip_);
    std::swap(bucket_num_, other->bucket_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_Item_descriptor_;
  metadata.reflection = Map_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hash_Version::kMapListFieldNumber;
const int Hash_Version::kHashVersionFieldNumber;
#endif  // !_MSC_VER

Hash_Version::Hash_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hash_Version::InitAsDefaultInstance() {
}

Hash_Version::Hash_Version(const Hash_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hash_Version::SharedCtor() {
  _cached_size_ = 0;
  hash_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hash_Version::~Hash_Version() {
  SharedDtor();
}

void Hash_Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hash_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hash_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hash_Version_descriptor_;
}

const Hash_Version& Hash_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Hash_Version* Hash_Version::default_instance_ = NULL;

Hash_Version* Hash_Version::New() const {
  return new Hash_Version;
}

void Hash_Version::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    hash_version_ = 0u;
  }
  map_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hash_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Map_Item map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_hash_version;
        break;
      }
      
      // required uint32 hash_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_version_)));
          set_has_hash_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hash_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Map_Item map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }
  
  // required uint32 hash_version = 2;
  if (has_hash_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hash_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Map_Item map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }
  
  // required uint32 hash_version = 2;
  if (has_hash_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hash_Version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 hash_version = 2;
    if (has_hash_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_version());
    }
    
  }
  // repeated .cstore.Map_Item map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hash_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hash_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hash_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hash_Version::MergeFrom(const Hash_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hash_version()) {
      set_hash_version(from.hash_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hash_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hash_Version::CopyFrom(const Hash_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  return true;
}

void Hash_Version::Swap(Hash_Version* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    std::swap(hash_version_, other->hash_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hash_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hash_Version_descriptor_;
  metadata.reflection = Hash_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sys_Order::kOrderHeaderFieldNumber;
const int Sys_Order::kOrderContentFieldNumber;
const int Sys_Order::kHashVersionFieldNumber;
#endif  // !_MSC_VER

Sys_Order::Sys_Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sys_Order::InitAsDefaultInstance() {
}

Sys_Order::Sys_Order(const Sys_Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sys_Order::SharedCtor() {
  _cached_size_ = 0;
  order_header_ = 0u;
  order_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sys_Order::~Sys_Order() {
  SharedDtor();
}

void Sys_Order::SharedDtor() {
  if (order_content_ != &::google::protobuf::internal::kEmptyString) {
    delete order_content_;
  }
  if (this != default_instance_) {
  }
}

void Sys_Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sys_Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sys_Order_descriptor_;
}

const Sys_Order& Sys_Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Sys_Order* Sys_Order::default_instance_ = NULL;

Sys_Order* Sys_Order::New() const {
  return new Sys_Order;
}

void Sys_Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_header_ = 0u;
    if (has_order_content()) {
      if (order_content_ != &::google::protobuf::internal::kEmptyString) {
        order_content_->clear();
      }
    }
    hash_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sys_Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 order_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_header_)));
          set_has_order_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_content;
        break;
      }
      
      // required bytes order_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_order_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hash_version;
        break;
      }
      
      // required uint32 hash_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_version_)));
          set_has_hash_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sys_Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 order_header = 1;
  if (has_order_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order_header(), output);
  }
  
  // required bytes order_content = 2;
  if (has_order_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->order_content(), output);
  }
  
  // required uint32 hash_version = 3;
  if (has_hash_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hash_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sys_Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 order_header = 1;
  if (has_order_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order_header(), target);
  }
  
  // required bytes order_content = 2;
  if (has_order_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->order_content(), target);
  }
  
  // required uint32 hash_version = 3;
  if (has_hash_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hash_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sys_Order::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 order_header = 1;
    if (has_order_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_header());
    }
    
    // required bytes order_content = 2;
    if (has_order_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->order_content());
    }
    
    // required uint32 hash_version = 3;
    if (has_hash_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sys_Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sys_Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sys_Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sys_Order::MergeFrom(const Sys_Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_header()) {
      set_order_header(from.order_header());
    }
    if (from.has_order_content()) {
      set_order_content(from.order_content());
    }
    if (from.has_hash_version()) {
      set_hash_version(from.hash_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sys_Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sys_Order::CopyFrom(const Sys_Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sys_Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Sys_Order::Swap(Sys_Order* other) {
  if (other != this) {
    std::swap(order_header_, other->order_header_);
    std::swap(order_content_, other->order_content_);
    std::swap(hash_version_, other->hash_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sys_Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sys_Order_descriptor_;
  metadata.reflection = Sys_Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::kLocalVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH(const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::SharedCtor() {
  _cached_size_ = 0;
  local_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::~pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH& pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::New() const {
  return new pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH;
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_version_)));
          set_has_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_version = 1;
    if (has_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::MergeFrom(const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_version()) {
      set_local_version(from.local_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::CopyFrom(const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::Swap(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH* other) {
  if (other != this) {
    std::swap(local_version_, other->local_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::kHashVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::InitAsDefaultInstance() {
  hash_version_ = const_cast< ::cstore::Hash_Version*>(&::cstore::Hash_Version::default_instance());
}

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK(const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  hash_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::~pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete hash_version_;
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK& pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::New() const {
  return new pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK;
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash_version()) {
      if (hash_version_ != NULL) hash_version_->::cstore::Hash_Version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Hash_Version hash_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hash_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Hash_Version hash_version = 1;
  if (has_hash_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hash_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Hash_Version hash_version = 1;
  if (has_hash_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hash_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Hash_Version hash_version = 1;
    if (has_hash_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hash_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::MergeFrom(const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash_version()) {
      mutable_hash_version()->::cstore::Hash_Version::MergeFrom(from.hash_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::CopyFrom(const pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hash_version()) {
    if (!this->hash_version().IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::Swap(pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK* other) {
  if (other != this) {
    std::swap(hash_version_, other->hash_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_ALL_MU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_MU_HASH::kLocalVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_MU_HASH::pb_MSG_SYS_RS_UPDATE_MU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_UPDATE_MU_HASH::pb_MSG_SYS_RS_UPDATE_MU_HASH(const pb_MSG_SYS_RS_UPDATE_MU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::SharedCtor() {
  _cached_size_ = 0;
  local_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_MU_HASH::~pb_MSG_SYS_RS_UPDATE_MU_HASH() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_MU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_MU_HASH_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_MU_HASH& pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_MU_HASH* pb_MSG_SYS_RS_UPDATE_MU_HASH::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_MU_HASH* pb_MSG_SYS_RS_UPDATE_MU_HASH::New() const {
  return new pb_MSG_SYS_RS_UPDATE_MU_HASH;
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_MU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_version_)));
          set_has_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_MU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_MU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_version = 1;
    if (has_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_MU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_MU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::MergeFrom(const pb_MSG_SYS_RS_UPDATE_MU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_version()) {
      set_local_version(from.local_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::CopyFrom(const pb_MSG_SYS_RS_UPDATE_MU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_MU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH::Swap(pb_MSG_SYS_RS_UPDATE_MU_HASH* other) {
  if (other != this) {
    std::swap(local_version_, other->local_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_MU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_MU_HASH_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_MU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::kSysOrderFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK(const pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::~pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK& pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::New() const {
  return new pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK;
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::Clear() {
  sys_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Sys_Order sys_order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sys_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sys_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Sys_Order sys_order = 1;
  total_size += 1 * this->sys_order_size();
  for (int i = 0; i < this->sys_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sys_order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::MergeFrom(const pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  sys_order_.MergeFrom(from.sys_order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::CopyFrom(const pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::IsInitialized() const {
  
  for (int i = 0; i < sys_order_size(); i++) {
    if (!this->sys_order(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::Swap(pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK* other) {
  if (other != this) {
    sys_order_.Swap(&other->sys_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_MU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::kLocalVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH(const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::SharedCtor() {
  _cached_size_ = 0;
  local_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::~pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH& pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::New() const {
  return new pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH;
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_version_)));
          set_has_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_version = 1;
    if (has_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::MergeFrom(const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_version()) {
      set_local_version(from.local_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::CopyFrom(const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::Swap(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH* other) {
  if (other != this) {
    std::swap(local_version_, other->local_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::kHashVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::InitAsDefaultInstance() {
  hash_version_ = const_cast< ::cstore::Hash_Version*>(&::cstore::Hash_Version::default_instance());
}

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK(const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  hash_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::~pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete hash_version_;
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK& pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::New() const {
  return new pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK;
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash_version()) {
      if (hash_version_ != NULL) hash_version_->::cstore::Hash_Version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Hash_Version hash_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hash_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Hash_Version hash_version = 1;
  if (has_hash_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hash_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Hash_Version hash_version = 1;
  if (has_hash_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hash_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Hash_Version hash_version = 1;
    if (has_hash_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hash_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::MergeFrom(const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash_version()) {
      mutable_hash_version()->::cstore::Hash_Version::MergeFrom(from.hash_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::CopyFrom(const pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hash_version()) {
    if (!this->hash_version().IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::Swap(pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK* other) {
  if (other != this) {
    std::swap(hash_version_, other->hash_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_ALL_SU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_SU_HASH::kLocalVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_SU_HASH::pb_MSG_SYS_RS_UPDATE_SU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_UPDATE_SU_HASH::pb_MSG_SYS_RS_UPDATE_SU_HASH(const pb_MSG_SYS_RS_UPDATE_SU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::SharedCtor() {
  _cached_size_ = 0;
  local_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_SU_HASH::~pb_MSG_SYS_RS_UPDATE_SU_HASH() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_SU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_SU_HASH_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_SU_HASH& pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_SU_HASH* pb_MSG_SYS_RS_UPDATE_SU_HASH::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_SU_HASH* pb_MSG_SYS_RS_UPDATE_SU_HASH::New() const {
  return new pb_MSG_SYS_RS_UPDATE_SU_HASH;
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_SU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_version_)));
          set_has_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_SU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_SU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_version = 1;
    if (has_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_SU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_SU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::MergeFrom(const pb_MSG_SYS_RS_UPDATE_SU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_version()) {
      set_local_version(from.local_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::CopyFrom(const pb_MSG_SYS_RS_UPDATE_SU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_SU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH::Swap(pb_MSG_SYS_RS_UPDATE_SU_HASH* other) {
  if (other != this) {
    std::swap(local_version_, other->local_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_SU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_SU_HASH_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_SU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::kSysOrderFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK(const pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::~pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_descriptor_;
}

const pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK& pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::default_instance_ = NULL;

pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK* pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::New() const {
  return new pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK;
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::Clear() {
  sys_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Sys_Order sys_order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sys_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sys_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Sys_Order sys_order = 1;
  total_size += 1 * this->sys_order_size();
  for (int i = 0; i < this->sys_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sys_order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::MergeFrom(const pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  sys_order_.MergeFrom(from.sys_order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::CopyFrom(const pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::IsInitialized() const {
  
  for (int i = 0; i < sys_order_size(); i++) {
    if (!this->sys_order(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::Swap(pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK* other) {
  if (other != this) {
    sys_order_.Swap(&other->sys_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_UPDATE_SU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::kBucketNumFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM(const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::SharedCtor() {
  _cached_size_ = 0;
  bucket_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::~pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM() {
  SharedDtor();
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_descriptor_;
}

const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM& pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::default_instance_ = NULL;

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::New() const {
  return new pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM;
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucket_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_num_)));
          set_has_bucket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucket_num = 1;
  if (has_bucket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bucket_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucket_num = 1;
  if (has_bucket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bucket_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucket_num = 1;
    if (has_bucket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::MergeFrom(const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_num()) {
      set_bucket_num(from.bucket_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::CopyFrom(const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::Swap(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM* other) {
  if (other != this) {
    std::swap(bucket_num_, other->bucket_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::kIpListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::InitAsDefaultInstance() {
  ip_list_ = const_cast< ::cstore::Map_Item*>(&::cstore::Map_Item::default_instance());
}

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK(const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::SharedCtor() {
  _cached_size_ = 0;
  ip_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::~pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete ip_list_;
  }
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_descriptor_;
}

const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK& pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::default_instance_ = NULL;

pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::New() const {
  return new pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK;
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip_list()) {
      if (ip_list_ != NULL) ip_list_->::cstore::Map_Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Map_Item ip_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Map_Item ip_list = 1;
  if (has_ip_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ip_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Map_Item ip_list = 1;
  if (has_ip_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ip_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Map_Item ip_list = 1;
    if (has_ip_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ip_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::MergeFrom(const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_list()) {
      mutable_ip_list()->::cstore::Map_Item::MergeFrom(from.ip_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::CopyFrom(const pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ip_list()) {
    if (!this->ip_list().IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::Swap(pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK* other) {
  if (other != this) {
    std::swap(ip_list_, other->ip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_GET_SU_BUCKET_ITEM_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::kBucketNumFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::InitAsDefaultInstance() {
}

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM(const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::SharedCtor() {
  _cached_size_ = 0;
  bucket_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::~pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM() {
  SharedDtor();
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_descriptor_;
}

const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM& pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::default_instance_ = NULL;

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::New() const {
  return new pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM;
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucket_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_num_)));
          set_has_bucket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucket_num = 1;
  if (has_bucket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bucket_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucket_num = 1;
  if (has_bucket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bucket_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucket_num = 1;
    if (has_bucket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::MergeFrom(const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_num()) {
      set_bucket_num(from.bucket_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::CopyFrom(const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::Swap(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM* other) {
  if (other != this) {
    std::swap(bucket_num_, other->bucket_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::kIpListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::InitAsDefaultInstance() {
  ip_list_ = const_cast< ::cstore::Map_Item*>(&::cstore::Map_Item::default_instance());
}

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK(const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::SharedCtor() {
  _cached_size_ = 0;
  ip_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::~pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK() {
  SharedDtor();
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete ip_list_;
  }
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_descriptor_;
}

const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK& pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::default_instance_ = NULL;

pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::New() const {
  return new pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK;
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip_list()) {
      if (ip_list_ != NULL) ip_list_->::cstore::Map_Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Map_Item ip_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Map_Item ip_list = 1;
  if (has_ip_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ip_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Map_Item ip_list = 1;
  if (has_ip_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ip_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Map_Item ip_list = 1;
    if (has_ip_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ip_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::MergeFrom(const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_list()) {
      mutable_ip_list()->::cstore::Map_Item::MergeFrom(from.ip_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::CopyFrom(const pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ip_list()) {
    if (!this->ip_list().IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::Swap(pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK* other) {
  if (other != this) {
    std::swap(ip_list_, other->ip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_descriptor_;
  metadata.reflection = pb_MSG_SYS_RS_GET_MU_BUCKET_ITEM_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_CS_REGISTER_NODE::kNodeIpFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_CS_REGISTER_NODE::pb_MSG_SU_CS_REGISTER_NODE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_CS_REGISTER_NODE::InitAsDefaultInstance() {
}

pb_MSG_SU_CS_REGISTER_NODE::pb_MSG_SU_CS_REGISTER_NODE(const pb_MSG_SU_CS_REGISTER_NODE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_CS_REGISTER_NODE::SharedCtor() {
  _cached_size_ = 0;
  node_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_CS_REGISTER_NODE::~pb_MSG_SU_CS_REGISTER_NODE() {
  SharedDtor();
}

void pb_MSG_SU_CS_REGISTER_NODE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_CS_REGISTER_NODE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_CS_REGISTER_NODE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_CS_REGISTER_NODE_descriptor_;
}

const pb_MSG_SU_CS_REGISTER_NODE& pb_MSG_SU_CS_REGISTER_NODE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_CS_REGISTER_NODE* pb_MSG_SU_CS_REGISTER_NODE::default_instance_ = NULL;

pb_MSG_SU_CS_REGISTER_NODE* pb_MSG_SU_CS_REGISTER_NODE::New() const {
  return new pb_MSG_SU_CS_REGISTER_NODE;
}

void pb_MSG_SU_CS_REGISTER_NODE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_CS_REGISTER_NODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 node_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_ip_)));
          set_has_node_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_CS_REGISTER_NODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_CS_REGISTER_NODE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 node_ip = 1;
  if (has_node_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_CS_REGISTER_NODE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 node_ip = 1;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_CS_REGISTER_NODE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_CS_REGISTER_NODE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_CS_REGISTER_NODE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_CS_REGISTER_NODE::MergeFrom(const pb_MSG_SU_CS_REGISTER_NODE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_CS_REGISTER_NODE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_CS_REGISTER_NODE::CopyFrom(const pb_MSG_SU_CS_REGISTER_NODE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_CS_REGISTER_NODE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SU_CS_REGISTER_NODE::Swap(pb_MSG_SU_CS_REGISTER_NODE* other) {
  if (other != this) {
    std::swap(node_ip_, other->node_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_CS_REGISTER_NODE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_CS_REGISTER_NODE_descriptor_;
  metadata.reflection = pb_MSG_SU_CS_REGISTER_NODE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_CS_REGISTER_NODE::kNodeIpFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_CS_REGISTER_NODE::pb_MSG_MU_CS_REGISTER_NODE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_CS_REGISTER_NODE::InitAsDefaultInstance() {
}

pb_MSG_MU_CS_REGISTER_NODE::pb_MSG_MU_CS_REGISTER_NODE(const pb_MSG_MU_CS_REGISTER_NODE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_CS_REGISTER_NODE::SharedCtor() {
  _cached_size_ = 0;
  node_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_CS_REGISTER_NODE::~pb_MSG_MU_CS_REGISTER_NODE() {
  SharedDtor();
}

void pb_MSG_MU_CS_REGISTER_NODE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_CS_REGISTER_NODE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_CS_REGISTER_NODE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_CS_REGISTER_NODE_descriptor_;
}

const pb_MSG_MU_CS_REGISTER_NODE& pb_MSG_MU_CS_REGISTER_NODE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_CS_REGISTER_NODE* pb_MSG_MU_CS_REGISTER_NODE::default_instance_ = NULL;

pb_MSG_MU_CS_REGISTER_NODE* pb_MSG_MU_CS_REGISTER_NODE::New() const {
  return new pb_MSG_MU_CS_REGISTER_NODE;
}

void pb_MSG_MU_CS_REGISTER_NODE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_CS_REGISTER_NODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 node_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_ip_)));
          set_has_node_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_CS_REGISTER_NODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_CS_REGISTER_NODE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 node_ip = 1;
  if (has_node_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_CS_REGISTER_NODE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 node_ip = 1;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_CS_REGISTER_NODE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_CS_REGISTER_NODE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_CS_REGISTER_NODE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_CS_REGISTER_NODE::MergeFrom(const pb_MSG_MU_CS_REGISTER_NODE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_CS_REGISTER_NODE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_CS_REGISTER_NODE::CopyFrom(const pb_MSG_MU_CS_REGISTER_NODE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_CS_REGISTER_NODE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MU_CS_REGISTER_NODE::Swap(pb_MSG_MU_CS_REGISTER_NODE* other) {
  if (other != this) {
    std::swap(node_ip_, other->node_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_CS_REGISTER_NODE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_CS_REGISTER_NODE_descriptor_;
  metadata.reflection = pb_MSG_MU_CS_REGISTER_NODE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bucket_Item::kBucketFieldNumber;
const int Bucket_Item::kBucketLoadFieldNumber;
#endif  // !_MSC_VER

Bucket_Item::Bucket_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bucket_Item::InitAsDefaultInstance() {
}

Bucket_Item::Bucket_Item(const Bucket_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bucket_Item::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = 0u;
  bucket_load_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bucket_Item::~Bucket_Item() {
  SharedDtor();
}

void Bucket_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bucket_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bucket_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bucket_Item_descriptor_;
}

const Bucket_Item& Bucket_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Bucket_Item* Bucket_Item::default_instance_ = NULL;

Bucket_Item* Bucket_Item::New() const {
  return new Bucket_Item;
}

void Bucket_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_ = 0u;
    bucket_load_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bucket_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_)));
          set_has_bucket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bucket_load;
        break;
      }
      
      // required uint32 bucket_load = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bucket_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_load_)));
          set_has_bucket_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bucket_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bucket(), output);
  }
  
  // required uint32 bucket_load = 2;
  if (has_bucket_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bucket_load(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bucket_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucket = 1;
  if (has_bucket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bucket(), target);
  }
  
  // required uint32 bucket_load = 2;
  if (has_bucket_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bucket_load(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bucket_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket());
    }
    
    // required uint32 bucket_load = 2;
    if (has_bucket_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket_load());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bucket_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bucket_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bucket_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bucket_Item::MergeFrom(const Bucket_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_bucket_load()) {
      set_bucket_load(from.bucket_load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bucket_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bucket_Item::CopyFrom(const Bucket_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bucket_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Bucket_Item::Swap(Bucket_Item* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(bucket_load_, other->bucket_load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bucket_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bucket_Item_descriptor_;
  metadata.reflection = Bucket_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Module_Ip::kIpFieldNumber;
const int Module_Ip::kContentFieldNumber;
#endif  // !_MSC_VER

Module_Ip::Module_Ip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Module_Ip::InitAsDefaultInstance() {
}

Module_Ip::Module_Ip(const Module_Ip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Module_Ip::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  content_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module_Ip::~Module_Ip() {
  SharedDtor();
}

void Module_Ip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Module_Ip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module_Ip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Module_Ip_descriptor_;
}

const Module_Ip& Module_Ip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Module_Ip* Module_Ip::default_instance_ = NULL;

Module_Ip* Module_Ip::New() const {
  return new Module_Ip;
}

void Module_Ip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    content_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Module_Ip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_content;
        break;
      }
      
      // required uint32 content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_)));
          set_has_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Module_Ip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required uint32 content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Module_Ip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required uint32 content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Module_Ip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required uint32 content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module_Ip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Module_Ip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Module_Ip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Module_Ip::MergeFrom(const Module_Ip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Module_Ip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module_Ip::CopyFrom(const Module_Ip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module_Ip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Module_Ip::Swap(Module_Ip* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Module_Ip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Module_Ip_descriptor_;
  metadata.reflection = Module_Ip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IP_scope::kStartIPFieldNumber;
const int IP_scope::kSerialNumFieldNumber;
#endif  // !_MSC_VER

IP_scope::IP_scope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IP_scope::InitAsDefaultInstance() {
}

IP_scope::IP_scope(const IP_scope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IP_scope::SharedCtor() {
  _cached_size_ = 0;
  start_ip_ = 0u;
  serial_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IP_scope::~IP_scope() {
  SharedDtor();
}

void IP_scope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IP_scope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IP_scope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IP_scope_descriptor_;
}

const IP_scope& IP_scope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

IP_scope* IP_scope::default_instance_ = NULL;

IP_scope* IP_scope::New() const {
  return new IP_scope;
}

void IP_scope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ip_ = 0u;
    serial_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IP_scope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Start_IP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_ip_)));
          set_has_start_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Serial_num;
        break;
      }
      
      // required uint32 Serial_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Serial_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_num_)));
          set_has_serial_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IP_scope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Start_IP = 1;
  if (has_start_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_ip(), output);
  }
  
  // required uint32 Serial_num = 2;
  if (has_serial_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IP_scope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Start_IP = 1;
  if (has_start_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_ip(), target);
  }
  
  // required uint32 Serial_num = 2;
  if (has_serial_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IP_scope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Start_IP = 1;
    if (has_start_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_ip());
    }
    
    // required uint32 Serial_num = 2;
    if (has_serial_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IP_scope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IP_scope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IP_scope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IP_scope::MergeFrom(const IP_scope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_ip()) {
      set_start_ip(from.start_ip());
    }
    if (from.has_serial_num()) {
      set_serial_num(from.serial_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IP_scope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IP_scope::CopyFrom(const IP_scope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IP_scope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IP_scope::Swap(IP_scope* other) {
  if (other != this) {
    std::swap(start_ip_, other->start_ip_);
    std::swap(serial_num_, other->serial_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IP_scope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IP_scope_descriptor_;
  metadata.reflection = IP_scope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bucket_List::kBucketItemFieldNumber;
const int Bucket_List::kMuIpFieldNumber;
#endif  // !_MSC_VER

Bucket_List::Bucket_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bucket_List::InitAsDefaultInstance() {
}

Bucket_List::Bucket_List(const Bucket_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bucket_List::SharedCtor() {
  _cached_size_ = 0;
  mu_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bucket_List::~Bucket_List() {
  SharedDtor();
}

void Bucket_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bucket_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bucket_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bucket_List_descriptor_;
}

const Bucket_List& Bucket_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Bucket_List* Bucket_List::default_instance_ = NULL;

Bucket_List* Bucket_List::New() const {
  return new Bucket_List;
}

void Bucket_List::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mu_ip_ = 0u;
  }
  bucket_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bucket_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Bucket_Item bucket_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bucket_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bucket_item;
        if (input->ExpectTag(16)) goto parse_mu_ip;
        break;
      }
      
      // required uint32 mu_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mu_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mu_ip_)));
          set_has_mu_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bucket_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Bucket_Item bucket_item = 1;
  for (int i = 0; i < this->bucket_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bucket_item(i), output);
  }
  
  // required uint32 mu_ip = 2;
  if (has_mu_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mu_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bucket_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Bucket_Item bucket_item = 1;
  for (int i = 0; i < this->bucket_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bucket_item(i), target);
  }
  
  // required uint32 mu_ip = 2;
  if (has_mu_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mu_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bucket_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 mu_ip = 2;
    if (has_mu_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mu_ip());
    }
    
  }
  // repeated .cstore.Bucket_Item bucket_item = 1;
  total_size += 1 * this->bucket_item_size();
  for (int i = 0; i < this->bucket_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bucket_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bucket_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bucket_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bucket_List::MergeFrom(const Bucket_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  bucket_item_.MergeFrom(from.bucket_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mu_ip()) {
      set_mu_ip(from.mu_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bucket_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bucket_List::CopyFrom(const Bucket_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bucket_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < bucket_item_size(); i++) {
    if (!this->bucket_item(i).IsInitialized()) return false;
  }
  return true;
}

void Bucket_List::Swap(Bucket_List* other) {
  if (other != this) {
    bucket_item_.Swap(&other->bucket_item_);
    std::swap(mu_ip_, other->mu_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bucket_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bucket_List_descriptor_;
  metadata.reflection = Bucket_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::kLocalVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::pb_MSG_RS_CS_UPDATE_ALL_MU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::pb_MSG_RS_CS_UPDATE_ALL_MU_HASH(const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::SharedCtor() {
  _cached_size_ = 0;
  local_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::~pb_MSG_RS_CS_UPDATE_ALL_MU_HASH() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH& pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::New() const {
  return new pb_MSG_RS_CS_UPDATE_ALL_MU_HASH;
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_version_)));
          set_has_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_version = 1;
    if (has_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::MergeFrom(const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_version()) {
      set_local_version(from.local_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::CopyFrom(const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::Swap(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH* other) {
  if (other != this) {
    std::swap(local_version_, other->local_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_ALL_MU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::kMapBucketFieldNumber;
const int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::kSysOrderFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK(const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::~pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK& pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::New() const {
  return new pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK;
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::Clear() {
  map_bucket_.Clear();
  sys_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Map_Item map_bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_bucket;
        if (input->ExpectTag(18)) goto parse_sys_order;
        break;
      }
      
      // repeated .cstore.Sys_Order sys_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sys_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sys_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_bucket(i), output);
  }
  
  // repeated .cstore.Sys_Order sys_order = 2;
  for (int i = 0; i < this->sys_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sys_order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_bucket(i), target);
  }
  
  // repeated .cstore.Sys_Order sys_order = 2;
  for (int i = 0; i < this->sys_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sys_order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Map_Item map_bucket = 1;
  total_size += 1 * this->map_bucket_size();
  for (int i = 0; i < this->map_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_bucket(i));
  }
  
  // repeated .cstore.Sys_Order sys_order = 2;
  total_size += 1 * this->sys_order_size();
  for (int i = 0; i < this->sys_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sys_order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::MergeFrom(const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_bucket_.MergeFrom(from.map_bucket_);
  sys_order_.MergeFrom(from.sys_order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::CopyFrom(const pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::IsInitialized() const {
  
  for (int i = 0; i < map_bucket_size(); i++) {
    if (!this->map_bucket(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sys_order_size(); i++) {
    if (!this->sys_order(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::Swap(pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK* other) {
  if (other != this) {
    map_bucket_.Swap(&other->map_bucket_);
    sys_order_.Swap(&other->sys_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_ALL_MU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_MU_HASH::kVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_MU_HASH::pb_MSG_RS_CS_UPDATE_MU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_MU_HASH::pb_MSG_RS_CS_UPDATE_MU_HASH(const pb_MSG_RS_CS_UPDATE_MU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_MU_HASH::~pb_MSG_RS_CS_UPDATE_MU_HASH() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_MU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_MU_HASH_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_MU_HASH& pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_MU_HASH* pb_MSG_RS_CS_UPDATE_MU_HASH::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_MU_HASH* pb_MSG_RS_CS_UPDATE_MU_HASH::New() const {
  return new pb_MSG_RS_CS_UPDATE_MU_HASH;
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_MU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_MU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_MU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_MU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_MU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::MergeFrom(const pb_MSG_RS_CS_UPDATE_MU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::CopyFrom(const pb_MSG_RS_CS_UPDATE_MU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_MU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_RS_CS_UPDATE_MU_HASH::Swap(pb_MSG_RS_CS_UPDATE_MU_HASH* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_MU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_MU_HASH_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_MU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::kSysOrderFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::pb_MSG_RS_CS_UPDATE_MU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::pb_MSG_RS_CS_UPDATE_MU_HASH_ACK(const pb_MSG_RS_CS_UPDATE_MU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::~pb_MSG_RS_CS_UPDATE_MU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_MU_HASH_ACK& pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_MU_HASH_ACK* pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_MU_HASH_ACK* pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::New() const {
  return new pb_MSG_RS_CS_UPDATE_MU_HASH_ACK;
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::Clear() {
  sys_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Sys_Order sys_order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sys_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sys_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Sys_Order sys_order = 1;
  total_size += 1 * this->sys_order_size();
  for (int i = 0; i < this->sys_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sys_order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_MU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_MU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::MergeFrom(const pb_MSG_RS_CS_UPDATE_MU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  sys_order_.MergeFrom(from.sys_order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::CopyFrom(const pb_MSG_RS_CS_UPDATE_MU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::IsInitialized() const {
  
  for (int i = 0; i < sys_order_size(); i++) {
    if (!this->sys_order(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::Swap(pb_MSG_RS_CS_UPDATE_MU_HASH_ACK* other) {
  if (other != this) {
    sys_order_.Swap(&other->sys_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_MU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_MU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::kLocalVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::pb_MSG_RS_CS_UPDATE_ALL_SU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::pb_MSG_RS_CS_UPDATE_ALL_SU_HASH(const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::SharedCtor() {
  _cached_size_ = 0;
  local_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::~pb_MSG_RS_CS_UPDATE_ALL_SU_HASH() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH& pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::New() const {
  return new pb_MSG_RS_CS_UPDATE_ALL_SU_HASH;
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_version_)));
          set_has_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 local_version = 1;
  if (has_local_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_version = 1;
    if (has_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::MergeFrom(const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_version()) {
      set_local_version(from.local_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::CopyFrom(const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::Swap(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH* other) {
  if (other != this) {
    std::swap(local_version_, other->local_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_ALL_SU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::kMapBucketFieldNumber;
const int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::kSysOrderFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK(const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::~pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK& pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::New() const {
  return new pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK;
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::Clear() {
  map_bucket_.Clear();
  sys_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Map_Item map_bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_bucket;
        if (input->ExpectTag(18)) goto parse_sys_order;
        break;
      }
      
      // repeated .cstore.Sys_Order sys_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sys_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sys_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_bucket(i), output);
  }
  
  // repeated .cstore.Sys_Order sys_order = 2;
  for (int i = 0; i < this->sys_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sys_order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_bucket(i), target);
  }
  
  // repeated .cstore.Sys_Order sys_order = 2;
  for (int i = 0; i < this->sys_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sys_order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Map_Item map_bucket = 1;
  total_size += 1 * this->map_bucket_size();
  for (int i = 0; i < this->map_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_bucket(i));
  }
  
  // repeated .cstore.Sys_Order sys_order = 2;
  total_size += 1 * this->sys_order_size();
  for (int i = 0; i < this->sys_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sys_order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::MergeFrom(const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_bucket_.MergeFrom(from.map_bucket_);
  sys_order_.MergeFrom(from.sys_order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::CopyFrom(const pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::IsInitialized() const {
  
  for (int i = 0; i < map_bucket_size(); i++) {
    if (!this->map_bucket(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sys_order_size(); i++) {
    if (!this->sys_order(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::Swap(pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK* other) {
  if (other != this) {
    map_bucket_.Swap(&other->map_bucket_);
    sys_order_.Swap(&other->sys_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_ALL_SU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_SU_HASH::kVersionFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_SU_HASH::pb_MSG_RS_CS_UPDATE_SU_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_SU_HASH::pb_MSG_RS_CS_UPDATE_SU_HASH(const pb_MSG_RS_CS_UPDATE_SU_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_SU_HASH::~pb_MSG_RS_CS_UPDATE_SU_HASH() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_SU_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_SU_HASH_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_SU_HASH& pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_SU_HASH* pb_MSG_RS_CS_UPDATE_SU_HASH::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_SU_HASH* pb_MSG_RS_CS_UPDATE_SU_HASH::New() const {
  return new pb_MSG_RS_CS_UPDATE_SU_HASH;
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_SU_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_SU_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_SU_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_SU_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_SU_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::MergeFrom(const pb_MSG_RS_CS_UPDATE_SU_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::CopyFrom(const pb_MSG_RS_CS_UPDATE_SU_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_SU_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_RS_CS_UPDATE_SU_HASH::Swap(pb_MSG_RS_CS_UPDATE_SU_HASH* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_SU_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_SU_HASH_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_SU_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::kSysOrderFieldNumber;
#endif  // !_MSC_VER

pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::pb_MSG_RS_CS_UPDATE_SU_HASH_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::InitAsDefaultInstance() {
}

pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::pb_MSG_RS_CS_UPDATE_SU_HASH_ACK(const pb_MSG_RS_CS_UPDATE_SU_HASH_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::~pb_MSG_RS_CS_UPDATE_SU_HASH_ACK() {
  SharedDtor();
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_descriptor_;
}

const pb_MSG_RS_CS_UPDATE_SU_HASH_ACK& pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_RS_CS_UPDATE_SU_HASH_ACK* pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::default_instance_ = NULL;

pb_MSG_RS_CS_UPDATE_SU_HASH_ACK* pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::New() const {
  return new pb_MSG_RS_CS_UPDATE_SU_HASH_ACK;
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::Clear() {
  sys_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Sys_Order sys_order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sys_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sys_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Sys_Order sys_order = 1;
  for (int i = 0; i < this->sys_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Sys_Order sys_order = 1;
  total_size += 1 * this->sys_order_size();
  for (int i = 0; i < this->sys_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sys_order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_RS_CS_UPDATE_SU_HASH_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_RS_CS_UPDATE_SU_HASH_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::MergeFrom(const pb_MSG_RS_CS_UPDATE_SU_HASH_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  sys_order_.MergeFrom(from.sys_order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::CopyFrom(const pb_MSG_RS_CS_UPDATE_SU_HASH_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::IsInitialized() const {
  
  for (int i = 0; i < sys_order_size(); i++) {
    if (!this->sys_order(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::Swap(pb_MSG_RS_CS_UPDATE_SU_HASH_ACK* other) {
  if (other != this) {
    sys_order_.Swap(&other->sys_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_RS_CS_UPDATE_SU_HASH_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_descriptor_;
  metadata.reflection = pb_MSG_RS_CS_UPDATE_SU_HASH_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::kStorageLoadLimitFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::InitAsDefaultInstance() {
}

pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE(const pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::SharedCtor() {
  _cached_size_ = 0;
  storage_load_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::~pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE() {
  SharedDtor();
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_descriptor_;
}

const pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE& pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE* pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::default_instance_ = NULL;

pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE* pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::New() const {
  return new pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE;
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storage_load_limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 storage_load_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_load_limit_)));
          set_has_storage_load_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 storage_load_limit = 1;
  if (has_storage_load_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storage_load_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 storage_load_limit = 1;
  if (has_storage_load_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storage_load_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 storage_load_limit = 1;
    if (has_storage_load_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_load_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::MergeFrom(const pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_load_limit()) {
      set_storage_load_limit(from.storage_load_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::CopyFrom(const pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::Swap(pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE* other) {
  if (other != this) {
    std::swap(storage_load_limit_, other->storage_load_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_descriptor_;
  metadata.reflection = pb_MSG_MU_CS_HEARTBEAT_HANDSHAKE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MU_CS_HEARTBEAT::kBucketItemFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MU_CS_HEARTBEAT::pb_MSG_MU_CS_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MU_CS_HEARTBEAT::InitAsDefaultInstance() {
}

pb_MSG_MU_CS_HEARTBEAT::pb_MSG_MU_CS_HEARTBEAT(const pb_MSG_MU_CS_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MU_CS_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MU_CS_HEARTBEAT::~pb_MSG_MU_CS_HEARTBEAT() {
  SharedDtor();
}

void pb_MSG_MU_CS_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MU_CS_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MU_CS_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MU_CS_HEARTBEAT_descriptor_;
}

const pb_MSG_MU_CS_HEARTBEAT& pb_MSG_MU_CS_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MU_CS_HEARTBEAT* pb_MSG_MU_CS_HEARTBEAT::default_instance_ = NULL;

pb_MSG_MU_CS_HEARTBEAT* pb_MSG_MU_CS_HEARTBEAT::New() const {
  return new pb_MSG_MU_CS_HEARTBEAT;
}

void pb_MSG_MU_CS_HEARTBEAT::Clear() {
  bucket_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MU_CS_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Bucket_Item bucket_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bucket_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bucket_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MU_CS_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Bucket_Item bucket_item = 1;
  for (int i = 0; i < this->bucket_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bucket_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MU_CS_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Bucket_Item bucket_item = 1;
  for (int i = 0; i < this->bucket_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bucket_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MU_CS_HEARTBEAT::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Bucket_Item bucket_item = 1;
  total_size += 1 * this->bucket_item_size();
  for (int i = 0; i < this->bucket_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MU_CS_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MU_CS_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MU_CS_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MU_CS_HEARTBEAT::MergeFrom(const pb_MSG_MU_CS_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  bucket_item_.MergeFrom(from.bucket_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MU_CS_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MU_CS_HEARTBEAT::CopyFrom(const pb_MSG_MU_CS_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MU_CS_HEARTBEAT::IsInitialized() const {
  
  for (int i = 0; i < bucket_item_size(); i++) {
    if (!this->bucket_item(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MU_CS_HEARTBEAT::Swap(pb_MSG_MU_CS_HEARTBEAT* other) {
  if (other != this) {
    bucket_item_.Swap(&other->bucket_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MU_CS_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MU_CS_HEARTBEAT_descriptor_;
  metadata.reflection = pb_MSG_MU_CS_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::kStorageLoadLimitFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::InitAsDefaultInstance() {
}

pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE(const pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::SharedCtor() {
  _cached_size_ = 0;
  storage_load_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::~pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE() {
  SharedDtor();
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_descriptor_;
}

const pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE& pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE* pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::default_instance_ = NULL;

pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE* pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::New() const {
  return new pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE;
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storage_load_limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 storage_load_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_load_limit_)));
          set_has_storage_load_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 storage_load_limit = 1;
  if (has_storage_load_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storage_load_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 storage_load_limit = 1;
  if (has_storage_load_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storage_load_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 storage_load_limit = 1;
    if (has_storage_load_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_load_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::MergeFrom(const pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_load_limit()) {
      set_storage_load_limit(from.storage_load_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::CopyFrom(const pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::Swap(pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE* other) {
  if (other != this) {
    std::swap(storage_load_limit_, other->storage_load_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_descriptor_;
  metadata.reflection = pb_MSG_SU_CS_HEARTBEAT_HANDSHAKE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_SU_CS_HEARTBEAT::kBucketItemFieldNumber;
#endif  // !_MSC_VER

pb_MSG_SU_CS_HEARTBEAT::pb_MSG_SU_CS_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_SU_CS_HEARTBEAT::InitAsDefaultInstance() {
}

pb_MSG_SU_CS_HEARTBEAT::pb_MSG_SU_CS_HEARTBEAT(const pb_MSG_SU_CS_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_SU_CS_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_SU_CS_HEARTBEAT::~pb_MSG_SU_CS_HEARTBEAT() {
  SharedDtor();
}

void pb_MSG_SU_CS_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_SU_CS_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_SU_CS_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_SU_CS_HEARTBEAT_descriptor_;
}

const pb_MSG_SU_CS_HEARTBEAT& pb_MSG_SU_CS_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_SU_CS_HEARTBEAT* pb_MSG_SU_CS_HEARTBEAT::default_instance_ = NULL;

pb_MSG_SU_CS_HEARTBEAT* pb_MSG_SU_CS_HEARTBEAT::New() const {
  return new pb_MSG_SU_CS_HEARTBEAT;
}

void pb_MSG_SU_CS_HEARTBEAT::Clear() {
  bucket_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_SU_CS_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Bucket_Item bucket_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bucket_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bucket_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_SU_CS_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Bucket_Item bucket_item = 1;
  for (int i = 0; i < this->bucket_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bucket_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_SU_CS_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Bucket_Item bucket_item = 1;
  for (int i = 0; i < this->bucket_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bucket_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_SU_CS_HEARTBEAT::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Bucket_Item bucket_item = 1;
  total_size += 1 * this->bucket_item_size();
  for (int i = 0; i < this->bucket_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_SU_CS_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_SU_CS_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_SU_CS_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_SU_CS_HEARTBEAT::MergeFrom(const pb_MSG_SU_CS_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  bucket_item_.MergeFrom(from.bucket_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_SU_CS_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_SU_CS_HEARTBEAT::CopyFrom(const pb_MSG_SU_CS_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_SU_CS_HEARTBEAT::IsInitialized() const {
  
  for (int i = 0; i < bucket_item_size(); i++) {
    if (!this->bucket_item(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_SU_CS_HEARTBEAT::Swap(pb_MSG_SU_CS_HEARTBEAT* other) {
  if (other != this) {
    bucket_item_.Swap(&other->bucket_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_SU_CS_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_SU_CS_HEARTBEAT_descriptor_;
  metadata.reflection = pb_MSG_SU_CS_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_RUBBISH_RECYCLE::kScaleFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_RUBBISH_RECYCLE::pb_MSG_MPC_CS_RUBBISH_RECYCLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_RUBBISH_RECYCLE::pb_MSG_MPC_CS_RUBBISH_RECYCLE(const pb_MSG_MPC_CS_RUBBISH_RECYCLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_RUBBISH_RECYCLE::~pb_MSG_MPC_CS_RUBBISH_RECYCLE() {
  SharedDtor();
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_RUBBISH_RECYCLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_RUBBISH_RECYCLE_descriptor_;
}

const pb_MSG_MPC_CS_RUBBISH_RECYCLE& pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_RUBBISH_RECYCLE* pb_MSG_MPC_CS_RUBBISH_RECYCLE::default_instance_ = NULL;

pb_MSG_MPC_CS_RUBBISH_RECYCLE* pb_MSG_MPC_CS_RUBBISH_RECYCLE::New() const {
  return new pb_MSG_MPC_CS_RUBBISH_RECYCLE;
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_RUBBISH_RECYCLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_RUBBISH_RECYCLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_RUBBISH_RECYCLE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_RUBBISH_RECYCLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_RUBBISH_RECYCLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::MergeFrom(const pb_MSG_MPC_CS_RUBBISH_RECYCLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::CopyFrom(const pb_MSG_MPC_CS_RUBBISH_RECYCLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_RUBBISH_RECYCLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MPC_CS_RUBBISH_RECYCLE::Swap(pb_MSG_MPC_CS_RUBBISH_RECYCLE* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_RUBBISH_RECYCLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_RUBBISH_RECYCLE_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_RUBBISH_RECYCLE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::kSourceIpFieldNumber;
const int pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::kDestinationIpFieldNumber;
const int pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::kBucketNumFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::pb_MSG_MPC_CS_SU_MIGRATE_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::pb_MSG_MPC_CS_SU_MIGRATE_BUCKET(const pb_MSG_MPC_CS_SU_MIGRATE_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  source_ip_ = 0u;
  destination_ip_ = 0u;
  bucket_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::~pb_MSG_MPC_CS_SU_MIGRATE_BUCKET() {
  SharedDtor();
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_descriptor_;
}

const pb_MSG_MPC_CS_SU_MIGRATE_BUCKET& pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_SU_MIGRATE_BUCKET* pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::default_instance_ = NULL;

pb_MSG_MPC_CS_SU_MIGRATE_BUCKET* pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::New() const {
  return new pb_MSG_MPC_CS_SU_MIGRATE_BUCKET;
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ip_ = 0u;
    destination_ip_ = 0u;
    bucket_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_ip_)));
          set_has_source_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destination_ip;
        break;
      }
      
      // required uint32 destination_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_ip_)));
          set_has_destination_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bucket_num;
        break;
      }
      
      // required int32 bucket_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bucket_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_num_)));
          set_has_bucket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 source_ip = 1;
  if (has_source_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_ip(), output);
  }
  
  // required uint32 destination_ip = 2;
  if (has_destination_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destination_ip(), output);
  }
  
  // required int32 bucket_num = 3;
  if (has_bucket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bucket_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 source_ip = 1;
  if (has_source_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_ip(), target);
  }
  
  // required uint32 destination_ip = 2;
  if (has_destination_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destination_ip(), target);
  }
  
  // required int32 bucket_num = 3;
  if (has_bucket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bucket_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 source_ip = 1;
    if (has_source_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_ip());
    }
    
    // required uint32 destination_ip = 2;
    if (has_destination_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_ip());
    }
    
    // required int32 bucket_num = 3;
    if (has_bucket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_SU_MIGRATE_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_SU_MIGRATE_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::MergeFrom(const pb_MSG_MPC_CS_SU_MIGRATE_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_ip()) {
      set_source_ip(from.source_ip());
    }
    if (from.has_destination_ip()) {
      set_destination_ip(from.destination_ip());
    }
    if (from.has_bucket_num()) {
      set_bucket_num(from.bucket_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::CopyFrom(const pb_MSG_MPC_CS_SU_MIGRATE_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::Swap(pb_MSG_MPC_CS_SU_MIGRATE_BUCKET* other) {
  if (other != this) {
    std::swap(source_ip_, other->source_ip_);
    std::swap(destination_ip_, other->destination_ip_);
    std::swap(bucket_num_, other->bucket_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_SU_MIGRATE_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_SU_MIGRATE_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::kSourceIpFieldNumber;
const int pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::kDestinationIpFieldNumber;
const int pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::kBucketNumFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::pb_MSG_MPC_CS_MU_MIGRATE_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::pb_MSG_MPC_CS_MU_MIGRATE_BUCKET(const pb_MSG_MPC_CS_MU_MIGRATE_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  source_ip_ = 0u;
  destination_ip_ = 0u;
  bucket_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::~pb_MSG_MPC_CS_MU_MIGRATE_BUCKET() {
  SharedDtor();
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_descriptor_;
}

const pb_MSG_MPC_CS_MU_MIGRATE_BUCKET& pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_MU_MIGRATE_BUCKET* pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::default_instance_ = NULL;

pb_MSG_MPC_CS_MU_MIGRATE_BUCKET* pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::New() const {
  return new pb_MSG_MPC_CS_MU_MIGRATE_BUCKET;
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ip_ = 0u;
    destination_ip_ = 0u;
    bucket_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_ip_)));
          set_has_source_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destination_ip;
        break;
      }
      
      // required uint32 destination_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_ip_)));
          set_has_destination_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bucket_num;
        break;
      }
      
      // required int32 bucket_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bucket_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_num_)));
          set_has_bucket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 source_ip = 1;
  if (has_source_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_ip(), output);
  }
  
  // required uint32 destination_ip = 2;
  if (has_destination_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destination_ip(), output);
  }
  
  // required int32 bucket_num = 3;
  if (has_bucket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bucket_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 source_ip = 1;
  if (has_source_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_ip(), target);
  }
  
  // required uint32 destination_ip = 2;
  if (has_destination_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destination_ip(), target);
  }
  
  // required int32 bucket_num = 3;
  if (has_bucket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bucket_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 source_ip = 1;
    if (has_source_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_ip());
    }
    
    // required uint32 destination_ip = 2;
    if (has_destination_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_ip());
    }
    
    // required int32 bucket_num = 3;
    if (has_bucket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_MU_MIGRATE_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_MU_MIGRATE_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::MergeFrom(const pb_MSG_MPC_CS_MU_MIGRATE_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_ip()) {
      set_source_ip(from.source_ip());
    }
    if (from.has_destination_ip()) {
      set_destination_ip(from.destination_ip());
    }
    if (from.has_bucket_num()) {
      set_bucket_num(from.bucket_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::CopyFrom(const pb_MSG_MPC_CS_MU_MIGRATE_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::Swap(pb_MSG_MPC_CS_MU_MIGRATE_BUCKET* other) {
  if (other != this) {
    std::swap(source_ip_, other->source_ip_);
    std::swap(destination_ip_, other->destination_ip_);
    std::swap(bucket_num_, other->bucket_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_MU_MIGRATE_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_MU_MIGRATE_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_MU_EXTENT_BUCKET::kNewModFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_MU_EXTENT_BUCKET::pb_MSG_MPC_CS_MU_EXTENT_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_MU_EXTENT_BUCKET::pb_MSG_MPC_CS_MU_EXTENT_BUCKET(const pb_MSG_MPC_CS_MU_EXTENT_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  new_mod_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_MU_EXTENT_BUCKET::~pb_MSG_MPC_CS_MU_EXTENT_BUCKET() {
  SharedDtor();
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_EXTENT_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_MU_EXTENT_BUCKET_descriptor_;
}

const pb_MSG_MPC_CS_MU_EXTENT_BUCKET& pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_MU_EXTENT_BUCKET* pb_MSG_MPC_CS_MU_EXTENT_BUCKET::default_instance_ = NULL;

pb_MSG_MPC_CS_MU_EXTENT_BUCKET* pb_MSG_MPC_CS_MU_EXTENT_BUCKET::New() const {
  return new pb_MSG_MPC_CS_MU_EXTENT_BUCKET;
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_mod_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_MU_EXTENT_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 new_mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_mod_)));
          set_has_new_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 new_mod = 1;
  if (has_new_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_mod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_MU_EXTENT_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 new_mod = 1;
  if (has_new_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_mod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_MU_EXTENT_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 new_mod = 1;
    if (has_new_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_mod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_MU_EXTENT_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_MU_EXTENT_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::MergeFrom(const pb_MSG_MPC_CS_MU_EXTENT_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_mod()) {
      set_new_mod(from.new_mod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::CopyFrom(const pb_MSG_MPC_CS_MU_EXTENT_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_MU_EXTENT_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MPC_CS_MU_EXTENT_BUCKET::Swap(pb_MSG_MPC_CS_MU_EXTENT_BUCKET* other) {
  if (other != this) {
    std::swap(new_mod_, other->new_mod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_MU_EXTENT_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_MU_EXTENT_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_MU_EXTENT_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_SU_EXTENT_BUCKET::kNewModFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_SU_EXTENT_BUCKET::pb_MSG_MPC_CS_SU_EXTENT_BUCKET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_SU_EXTENT_BUCKET::pb_MSG_MPC_CS_SU_EXTENT_BUCKET(const pb_MSG_MPC_CS_SU_EXTENT_BUCKET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::SharedCtor() {
  _cached_size_ = 0;
  new_mod_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_SU_EXTENT_BUCKET::~pb_MSG_MPC_CS_SU_EXTENT_BUCKET() {
  SharedDtor();
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_EXTENT_BUCKET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_SU_EXTENT_BUCKET_descriptor_;
}

const pb_MSG_MPC_CS_SU_EXTENT_BUCKET& pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_SU_EXTENT_BUCKET* pb_MSG_MPC_CS_SU_EXTENT_BUCKET::default_instance_ = NULL;

pb_MSG_MPC_CS_SU_EXTENT_BUCKET* pb_MSG_MPC_CS_SU_EXTENT_BUCKET::New() const {
  return new pb_MSG_MPC_CS_SU_EXTENT_BUCKET;
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_mod_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_SU_EXTENT_BUCKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 new_mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_mod_)));
          set_has_new_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 new_mod = 1;
  if (has_new_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_mod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_SU_EXTENT_BUCKET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 new_mod = 1;
  if (has_new_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_mod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_SU_EXTENT_BUCKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 new_mod = 1;
    if (has_new_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_mod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_SU_EXTENT_BUCKET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_SU_EXTENT_BUCKET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::MergeFrom(const pb_MSG_MPC_CS_SU_EXTENT_BUCKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_mod()) {
      set_new_mod(from.new_mod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::CopyFrom(const pb_MSG_MPC_CS_SU_EXTENT_BUCKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_SU_EXTENT_BUCKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MPC_CS_SU_EXTENT_BUCKET::Swap(pb_MSG_MPC_CS_SU_EXTENT_BUCKET* other) {
  if (other != this) {
    std::swap(new_mod_, other->new_mod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_SU_EXTENT_BUCKET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_SU_EXTENT_BUCKET_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_SU_EXTENT_BUCKET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_GET_SU_RULE_ACK::kMapBucketFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_GET_SU_RULE_ACK::pb_MSG_MPC_CS_GET_SU_RULE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_GET_SU_RULE_ACK::pb_MSG_MPC_CS_GET_SU_RULE_ACK(const pb_MSG_MPC_CS_GET_SU_RULE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_GET_SU_RULE_ACK::~pb_MSG_MPC_CS_GET_SU_RULE_ACK() {
  SharedDtor();
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_GET_SU_RULE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_GET_SU_RULE_ACK_descriptor_;
}

const pb_MSG_MPC_CS_GET_SU_RULE_ACK& pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_GET_SU_RULE_ACK* pb_MSG_MPC_CS_GET_SU_RULE_ACK::default_instance_ = NULL;

pb_MSG_MPC_CS_GET_SU_RULE_ACK* pb_MSG_MPC_CS_GET_SU_RULE_ACK::New() const {
  return new pb_MSG_MPC_CS_GET_SU_RULE_ACK;
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::Clear() {
  map_bucket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_GET_SU_RULE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Map_Item map_bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_bucket;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_bucket(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_GET_SU_RULE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_bucket(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_GET_SU_RULE_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Map_Item map_bucket = 1;
  total_size += 1 * this->map_bucket_size();
  for (int i = 0; i < this->map_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_bucket(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_GET_SU_RULE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_GET_SU_RULE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::MergeFrom(const pb_MSG_MPC_CS_GET_SU_RULE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_bucket_.MergeFrom(from.map_bucket_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::CopyFrom(const pb_MSG_MPC_CS_GET_SU_RULE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_GET_SU_RULE_ACK::IsInitialized() const {
  
  for (int i = 0; i < map_bucket_size(); i++) {
    if (!this->map_bucket(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_GET_SU_RULE_ACK::Swap(pb_MSG_MPC_CS_GET_SU_RULE_ACK* other) {
  if (other != this) {
    map_bucket_.Swap(&other->map_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_GET_SU_RULE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_GET_SU_RULE_ACK_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_GET_SU_RULE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_GET_MU_RULE_ACK::kMapBucketFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_GET_MU_RULE_ACK::pb_MSG_MPC_CS_GET_MU_RULE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_GET_MU_RULE_ACK::pb_MSG_MPC_CS_GET_MU_RULE_ACK(const pb_MSG_MPC_CS_GET_MU_RULE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_GET_MU_RULE_ACK::~pb_MSG_MPC_CS_GET_MU_RULE_ACK() {
  SharedDtor();
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_GET_MU_RULE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_GET_MU_RULE_ACK_descriptor_;
}

const pb_MSG_MPC_CS_GET_MU_RULE_ACK& pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_GET_MU_RULE_ACK* pb_MSG_MPC_CS_GET_MU_RULE_ACK::default_instance_ = NULL;

pb_MSG_MPC_CS_GET_MU_RULE_ACK* pb_MSG_MPC_CS_GET_MU_RULE_ACK::New() const {
  return new pb_MSG_MPC_CS_GET_MU_RULE_ACK;
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::Clear() {
  map_bucket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_GET_MU_RULE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Map_Item map_bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_bucket;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_bucket(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_GET_MU_RULE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Map_Item map_bucket = 1;
  for (int i = 0; i < this->map_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_bucket(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_GET_MU_RULE_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Map_Item map_bucket = 1;
  total_size += 1 * this->map_bucket_size();
  for (int i = 0; i < this->map_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_bucket(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_GET_MU_RULE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_GET_MU_RULE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::MergeFrom(const pb_MSG_MPC_CS_GET_MU_RULE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_bucket_.MergeFrom(from.map_bucket_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::CopyFrom(const pb_MSG_MPC_CS_GET_MU_RULE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_GET_MU_RULE_ACK::IsInitialized() const {
  
  for (int i = 0; i < map_bucket_size(); i++) {
    if (!this->map_bucket(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_GET_MU_RULE_ACK::Swap(pb_MSG_MPC_CS_GET_MU_RULE_ACK* other) {
  if (other != this) {
    map_bucket_.Swap(&other->map_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_GET_MU_RULE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_GET_MU_RULE_ACK_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_GET_MU_RULE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IP_bucket::kIpFieldNumber;
const int IP_bucket::kBucketsFieldNumber;
#endif  // !_MSC_VER

IP_bucket::IP_bucket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IP_bucket::InitAsDefaultInstance() {
}

IP_bucket::IP_bucket(const IP_bucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IP_bucket::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IP_bucket::~IP_bucket() {
  SharedDtor();
}

void IP_bucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IP_bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IP_bucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IP_bucket_descriptor_;
}

const IP_bucket& IP_bucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

IP_bucket* IP_bucket::default_instance_ = NULL;

IP_bucket* IP_bucket::New() const {
  return new IP_bucket;
}

void IP_bucket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
  }
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IP_bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buckets;
        break;
      }
      
      // repeated uint32 buckets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buckets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buckets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buckets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buckets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IP_bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // repeated uint32 buckets = 2;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buckets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IP_bucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // repeated uint32 buckets = 2;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buckets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IP_bucket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
  }
  // repeated uint32 buckets = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buckets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buckets(i));
    }
    total_size += 1 * this->buckets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IP_bucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IP_bucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IP_bucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IP_bucket::MergeFrom(const IP_bucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IP_bucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IP_bucket::CopyFrom(const IP_bucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IP_bucket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IP_bucket::Swap(IP_bucket* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    buckets_.Swap(&other->buckets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IP_bucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IP_bucket_descriptor_;
  metadata.reflection = IP_bucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_SU_INIT_HASH::kModuleIpFieldNumber;
const int pb_MSG_MPC_CS_SU_INIT_HASH::kModFieldNumber;
const int pb_MSG_MPC_CS_SU_INIT_HASH::kDuplicateNumFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_SU_INIT_HASH::pb_MSG_MPC_CS_SU_INIT_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_SU_INIT_HASH::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_SU_INIT_HASH::pb_MSG_MPC_CS_SU_INIT_HASH(const pb_MSG_MPC_CS_SU_INIT_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_INIT_HASH::SharedCtor() {
  _cached_size_ = 0;
  mod_ = 0u;
  duplicate_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_SU_INIT_HASH::~pb_MSG_MPC_CS_SU_INIT_HASH() {
  SharedDtor();
}

void pb_MSG_MPC_CS_SU_INIT_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_SU_INIT_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_INIT_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_SU_INIT_HASH_descriptor_;
}

const pb_MSG_MPC_CS_SU_INIT_HASH& pb_MSG_MPC_CS_SU_INIT_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_SU_INIT_HASH* pb_MSG_MPC_CS_SU_INIT_HASH::default_instance_ = NULL;

pb_MSG_MPC_CS_SU_INIT_HASH* pb_MSG_MPC_CS_SU_INIT_HASH::New() const {
  return new pb_MSG_MPC_CS_SU_INIT_HASH;
}

void pb_MSG_MPC_CS_SU_INIT_HASH::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mod_ = 0u;
    duplicate_num_ = 0u;
  }
  module_ip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_SU_INIT_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.IP_scope module_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_module_ip;
        if (input->ExpectTag(16)) goto parse_mod;
        break;
      }
      
      // required uint32 mod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mod_)));
          set_has_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_num;
        break;
      }
      
      // required uint32 duplicate_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_num_)));
          set_has_duplicate_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_SU_INIT_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.IP_scope module_ip = 1;
  for (int i = 0; i < this->module_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module_ip(i), output);
  }
  
  // required uint32 mod = 2;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mod(), output);
  }
  
  // required uint32 duplicate_num = 3;
  if (has_duplicate_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_SU_INIT_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.IP_scope module_ip = 1;
  for (int i = 0; i < this->module_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module_ip(i), target);
  }
  
  // required uint32 mod = 2;
  if (has_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mod(), target);
  }
  
  // required uint32 duplicate_num = 3;
  if (has_duplicate_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_SU_INIT_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 mod = 2;
    if (has_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mod());
    }
    
    // required uint32 duplicate_num = 3;
    if (has_duplicate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_num());
    }
    
  }
  // repeated .cstore.IP_scope module_ip = 1;
  total_size += 1 * this->module_ip_size();
  for (int i = 0; i < this->module_ip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_ip(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_SU_INIT_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_SU_INIT_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_SU_INIT_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_SU_INIT_HASH::MergeFrom(const pb_MSG_MPC_CS_SU_INIT_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_ip_.MergeFrom(from.module_ip_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mod()) {
      set_mod(from.mod());
    }
    if (from.has_duplicate_num()) {
      set_duplicate_num(from.duplicate_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_SU_INIT_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_INIT_HASH::CopyFrom(const pb_MSG_MPC_CS_SU_INIT_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_SU_INIT_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < module_ip_size(); i++) {
    if (!this->module_ip(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_SU_INIT_HASH::Swap(pb_MSG_MPC_CS_SU_INIT_HASH* other) {
  if (other != this) {
    module_ip_.Swap(&other->module_ip_);
    std::swap(mod_, other->mod_);
    std::swap(duplicate_num_, other->duplicate_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_SU_INIT_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_SU_INIT_HASH_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_SU_INIT_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_MU_INIT_HASH::kModuleIpFieldNumber;
const int pb_MSG_MPC_CS_MU_INIT_HASH::kModFieldNumber;
const int pb_MSG_MPC_CS_MU_INIT_HASH::kDuplicateNumFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_MU_INIT_HASH::pb_MSG_MPC_CS_MU_INIT_HASH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_MU_INIT_HASH::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_MU_INIT_HASH::pb_MSG_MPC_CS_MU_INIT_HASH(const pb_MSG_MPC_CS_MU_INIT_HASH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_INIT_HASH::SharedCtor() {
  _cached_size_ = 0;
  mod_ = 0u;
  duplicate_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_MU_INIT_HASH::~pb_MSG_MPC_CS_MU_INIT_HASH() {
  SharedDtor();
}

void pb_MSG_MPC_CS_MU_INIT_HASH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_MU_INIT_HASH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_INIT_HASH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_MU_INIT_HASH_descriptor_;
}

const pb_MSG_MPC_CS_MU_INIT_HASH& pb_MSG_MPC_CS_MU_INIT_HASH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_MU_INIT_HASH* pb_MSG_MPC_CS_MU_INIT_HASH::default_instance_ = NULL;

pb_MSG_MPC_CS_MU_INIT_HASH* pb_MSG_MPC_CS_MU_INIT_HASH::New() const {
  return new pb_MSG_MPC_CS_MU_INIT_HASH;
}

void pb_MSG_MPC_CS_MU_INIT_HASH::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mod_ = 0u;
    duplicate_num_ = 0u;
  }
  module_ip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_MU_INIT_HASH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.IP_scope module_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_module_ip;
        if (input->ExpectTag(16)) goto parse_mod;
        break;
      }
      
      // required uint32 mod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mod_)));
          set_has_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_num;
        break;
      }
      
      // required uint32 duplicate_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_num_)));
          set_has_duplicate_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_MU_INIT_HASH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.IP_scope module_ip = 1;
  for (int i = 0; i < this->module_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module_ip(i), output);
  }
  
  // required uint32 mod = 2;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mod(), output);
  }
  
  // required uint32 duplicate_num = 3;
  if (has_duplicate_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_MU_INIT_HASH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.IP_scope module_ip = 1;
  for (int i = 0; i < this->module_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module_ip(i), target);
  }
  
  // required uint32 mod = 2;
  if (has_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mod(), target);
  }
  
  // required uint32 duplicate_num = 3;
  if (has_duplicate_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_MU_INIT_HASH::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 mod = 2;
    if (has_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mod());
    }
    
    // required uint32 duplicate_num = 3;
    if (has_duplicate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_num());
    }
    
  }
  // repeated .cstore.IP_scope module_ip = 1;
  total_size += 1 * this->module_ip_size();
  for (int i = 0; i < this->module_ip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_ip(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_MU_INIT_HASH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_MU_INIT_HASH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_MU_INIT_HASH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_MU_INIT_HASH::MergeFrom(const pb_MSG_MPC_CS_MU_INIT_HASH& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_ip_.MergeFrom(from.module_ip_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mod()) {
      set_mod(from.mod());
    }
    if (from.has_duplicate_num()) {
      set_duplicate_num(from.duplicate_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_MU_INIT_HASH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_INIT_HASH::CopyFrom(const pb_MSG_MPC_CS_MU_INIT_HASH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_MU_INIT_HASH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < module_ip_size(); i++) {
    if (!this->module_ip(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_MU_INIT_HASH::Swap(pb_MSG_MPC_CS_MU_INIT_HASH* other) {
  if (other != this) {
    module_ip_.Swap(&other->module_ip_);
    std::swap(mod_, other->mod_);
    std::swap(duplicate_num_, other->duplicate_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_MU_INIT_HASH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_MU_INIT_HASH_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_MU_INIT_HASH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_MU_BUCKET_ACK::kBucketListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_MU_BUCKET_ACK::pb_MSG_MPC_CS_MU_BUCKET_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_MU_BUCKET_ACK::pb_MSG_MPC_CS_MU_BUCKET_ACK(const pb_MSG_MPC_CS_MU_BUCKET_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_MU_BUCKET_ACK::~pb_MSG_MPC_CS_MU_BUCKET_ACK() {
  SharedDtor();
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_MU_BUCKET_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_MU_BUCKET_ACK_descriptor_;
}

const pb_MSG_MPC_CS_MU_BUCKET_ACK& pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_MU_BUCKET_ACK* pb_MSG_MPC_CS_MU_BUCKET_ACK::default_instance_ = NULL;

pb_MSG_MPC_CS_MU_BUCKET_ACK* pb_MSG_MPC_CS_MU_BUCKET_ACK::New() const {
  return new pb_MSG_MPC_CS_MU_BUCKET_ACK;
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::Clear() {
  bucket_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_MU_BUCKET_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Bucket_List bucket_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bucket_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bucket_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Bucket_List bucket_list = 1;
  for (int i = 0; i < this->bucket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bucket_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_MU_BUCKET_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Bucket_List bucket_list = 1;
  for (int i = 0; i < this->bucket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bucket_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_MU_BUCKET_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Bucket_List bucket_list = 1;
  total_size += 1 * this->bucket_list_size();
  for (int i = 0; i < this->bucket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_MU_BUCKET_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_MU_BUCKET_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::MergeFrom(const pb_MSG_MPC_CS_MU_BUCKET_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  bucket_list_.MergeFrom(from.bucket_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::CopyFrom(const pb_MSG_MPC_CS_MU_BUCKET_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_MU_BUCKET_ACK::IsInitialized() const {
  
  for (int i = 0; i < bucket_list_size(); i++) {
    if (!this->bucket_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_MU_BUCKET_ACK::Swap(pb_MSG_MPC_CS_MU_BUCKET_ACK* other) {
  if (other != this) {
    bucket_list_.Swap(&other->bucket_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_MU_BUCKET_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_MU_BUCKET_ACK_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_MU_BUCKET_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_SU_BUCKET_ACK::kBucketListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_SU_BUCKET_ACK::pb_MSG_MPC_CS_SU_BUCKET_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_SU_BUCKET_ACK::pb_MSG_MPC_CS_SU_BUCKET_ACK(const pb_MSG_MPC_CS_SU_BUCKET_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_SU_BUCKET_ACK::~pb_MSG_MPC_CS_SU_BUCKET_ACK() {
  SharedDtor();
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_SU_BUCKET_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_SU_BUCKET_ACK_descriptor_;
}

const pb_MSG_MPC_CS_SU_BUCKET_ACK& pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_SU_BUCKET_ACK* pb_MSG_MPC_CS_SU_BUCKET_ACK::default_instance_ = NULL;

pb_MSG_MPC_CS_SU_BUCKET_ACK* pb_MSG_MPC_CS_SU_BUCKET_ACK::New() const {
  return new pb_MSG_MPC_CS_SU_BUCKET_ACK;
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::Clear() {
  bucket_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_SU_BUCKET_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Bucket_List bucket_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bucket_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bucket_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Bucket_List bucket_list = 1;
  for (int i = 0; i < this->bucket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bucket_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_SU_BUCKET_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Bucket_List bucket_list = 1;
  for (int i = 0; i < this->bucket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bucket_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_SU_BUCKET_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.Bucket_List bucket_list = 1;
  total_size += 1 * this->bucket_list_size();
  for (int i = 0; i < this->bucket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_SU_BUCKET_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_SU_BUCKET_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::MergeFrom(const pb_MSG_MPC_CS_SU_BUCKET_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  bucket_list_.MergeFrom(from.bucket_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::CopyFrom(const pb_MSG_MPC_CS_SU_BUCKET_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_SU_BUCKET_ACK::IsInitialized() const {
  
  for (int i = 0; i < bucket_list_size(); i++) {
    if (!this->bucket_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_SU_BUCKET_ACK::Swap(pb_MSG_MPC_CS_SU_BUCKET_ACK* other) {
  if (other != this) {
    bucket_list_.Swap(&other->bucket_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_SU_BUCKET_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_SU_BUCKET_ACK_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_SU_BUCKET_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node_Block::kNodeIpFieldNumber;
const int Node_Block::kBucketNumberFieldNumber;
const int Node_Block::kBlockNumberFieldNumber;
const int Node_Block::kStorageLimitFieldNumber;
#endif  // !_MSC_VER

Node_Block::Node_Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node_Block::InitAsDefaultInstance() {
}

Node_Block::Node_Block(const Node_Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node_Block::SharedCtor() {
  _cached_size_ = 0;
  node_ip_ = 0;
  bucket_number_ = 0;
  block_number_ = 0;
  storage_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node_Block::~Node_Block() {
  SharedDtor();
}

void Node_Block::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Node_Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node_Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_Block_descriptor_;
}

const Node_Block& Node_Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Node_Block* Node_Block::default_instance_ = NULL;

Node_Block* Node_Block::New() const {
  return new Node_Block;
}

void Node_Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_ip_ = 0;
    bucket_number_ = 0;
    block_number_ = 0;
    storage_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node_Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_ip_)));
          set_has_node_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bucket_number;
        break;
      }
      
      // required int32 bucket_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bucket_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_number_)));
          set_has_bucket_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_number;
        break;
      }
      
      // required int32 block_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_number_)));
          set_has_block_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_storage_limit;
        break;
      }
      
      // required int32 storage_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storage_limit_)));
          set_has_storage_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node_Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_ip(), output);
  }
  
  // required int32 bucket_number = 2;
  if (has_bucket_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bucket_number(), output);
  }
  
  // required int32 block_number = 3;
  if (has_block_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block_number(), output);
  }
  
  // required int32 storage_limit = 4;
  if (has_storage_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->storage_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node_Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 node_ip = 1;
  if (has_node_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_ip(), target);
  }
  
  // required int32 bucket_number = 2;
  if (has_bucket_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bucket_number(), target);
  }
  
  // required int32 block_number = 3;
  if (has_block_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->block_number(), target);
  }
  
  // required int32 storage_limit = 4;
  if (has_storage_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->storage_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node_Block::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node_ip = 1;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_ip());
    }
    
    // required int32 bucket_number = 2;
    if (has_bucket_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_number());
    }
    
    // required int32 block_number = 3;
    if (has_block_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_number());
    }
    
    // required int32 storage_limit = 4;
    if (has_storage_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storage_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node_Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node_Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node_Block::MergeFrom(const Node_Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_bucket_number()) {
      set_bucket_number(from.bucket_number());
    }
    if (from.has_block_number()) {
      set_block_number(from.block_number());
    }
    if (from.has_storage_limit()) {
      set_storage_limit(from.storage_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node_Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_Block::CopyFrom(const Node_Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Node_Block::Swap(Node_Block* other) {
  if (other != this) {
    std::swap(node_ip_, other->node_ip_);
    std::swap(bucket_number_, other->bucket_number_);
    std::swap(block_number_, other->block_number_);
    std::swap(storage_limit_, other->storage_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node_Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_Block_descriptor_;
  metadata.reflection = Node_Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::kSuNodeListFieldNumber;
const int pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::kMuNodeListFieldNumber;
const int pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::kSuDupFieldNumber;
const int pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::kMuDupFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::InitAsDefaultInstance() {
}

pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK(const pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::SharedCtor() {
  _cached_size_ = 0;
  su_dup_ = 0;
  mu_dup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::~pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK() {
  SharedDtor();
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_descriptor_;
}

const pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK& pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK* pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::default_instance_ = NULL;

pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK* pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::New() const {
  return new pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK;
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    su_dup_ = 0;
    mu_dup_ = 0;
  }
  su_node_list_.Clear();
  mu_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Node_Block su_node_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_su_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_su_node_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_su_node_list;
        if (input->ExpectTag(18)) goto parse_mu_node_list;
        break;
      }
      
      // repeated .cstore.Node_Block mu_node_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mu_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mu_node_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mu_node_list;
        if (input->ExpectTag(24)) goto parse_su_dup;
        break;
      }
      
      // required int32 su_dup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_su_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &su_dup_)));
          set_has_su_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mu_dup;
        break;
      }
      
      // required int32 mu_dup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mu_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mu_dup_)));
          set_has_mu_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Node_Block su_node_list = 1;
  for (int i = 0; i < this->su_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->su_node_list(i), output);
  }
  
  // repeated .cstore.Node_Block mu_node_list = 2;
  for (int i = 0; i < this->mu_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mu_node_list(i), output);
  }
  
  // required int32 su_dup = 3;
  if (has_su_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->su_dup(), output);
  }
  
  // required int32 mu_dup = 4;
  if (has_mu_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mu_dup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Node_Block su_node_list = 1;
  for (int i = 0; i < this->su_node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->su_node_list(i), target);
  }
  
  // repeated .cstore.Node_Block mu_node_list = 2;
  for (int i = 0; i < this->mu_node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mu_node_list(i), target);
  }
  
  // required int32 su_dup = 3;
  if (has_su_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->su_dup(), target);
  }
  
  // required int32 mu_dup = 4;
  if (has_mu_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mu_dup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 su_dup = 3;
    if (has_su_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->su_dup());
    }
    
    // required int32 mu_dup = 4;
    if (has_mu_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mu_dup());
    }
    
  }
  // repeated .cstore.Node_Block su_node_list = 1;
  total_size += 1 * this->su_node_list_size();
  for (int i = 0; i < this->su_node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->su_node_list(i));
  }
  
  // repeated .cstore.Node_Block mu_node_list = 2;
  total_size += 1 * this->mu_node_list_size();
  for (int i = 0; i < this->mu_node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mu_node_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::MergeFrom(const pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  su_node_list_.MergeFrom(from.su_node_list_);
  mu_node_list_.MergeFrom(from.mu_node_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_su_dup()) {
      set_su_dup(from.su_dup());
    }
    if (from.has_mu_dup()) {
      set_mu_dup(from.mu_dup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::CopyFrom(const pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  for (int i = 0; i < su_node_list_size(); i++) {
    if (!this->su_node_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mu_node_list_size(); i++) {
    if (!this->mu_node_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::Swap(pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK* other) {
  if (other != this) {
    su_node_list_.Swap(&other->su_node_list_);
    mu_node_list_.Swap(&other->mu_node_list_);
    std::swap(su_dup_, other->su_dup_);
    std::swap(mu_dup_, other->mu_dup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_descriptor_;
  metadata.reflection = pb_MSG_MPC_CS_GET_BLOCK_NUM_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Report_Bucket_List::kNodeBucketListFieldNumber;
const int Report_Bucket_List::kNodeStorageLimitFieldNumber;
#endif  // !_MSC_VER

Report_Bucket_List::Report_Bucket_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report_Bucket_List::InitAsDefaultInstance() {
  node_bucket_list_ = const_cast< ::cstore::Bucket_List*>(&::cstore::Bucket_List::default_instance());
}

Report_Bucket_List::Report_Bucket_List(const Report_Bucket_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report_Bucket_List::SharedCtor() {
  _cached_size_ = 0;
  node_bucket_list_ = NULL;
  node_storage_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report_Bucket_List::~Report_Bucket_List() {
  SharedDtor();
}

void Report_Bucket_List::SharedDtor() {
  if (this != default_instance_) {
    delete node_bucket_list_;
  }
}

void Report_Bucket_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_Bucket_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_Bucket_List_descriptor_;
}

const Report_Bucket_List& Report_Bucket_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

Report_Bucket_List* Report_Bucket_List::default_instance_ = NULL;

Report_Bucket_List* Report_Bucket_List::New() const {
  return new Report_Bucket_List;
}

void Report_Bucket_List::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_bucket_list()) {
      if (node_bucket_list_ != NULL) node_bucket_list_->::cstore::Bucket_List::Clear();
    }
    node_storage_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report_Bucket_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Bucket_List node_bucket_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_bucket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_storage_limit;
        break;
      }
      
      // required int32 node_storage_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_storage_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_storage_limit_)));
          set_has_node_storage_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report_Bucket_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Bucket_List node_bucket_list = 1;
  if (has_node_bucket_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_bucket_list(), output);
  }
  
  // required int32 node_storage_limit = 2;
  if (has_node_storage_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_storage_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report_Bucket_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Bucket_List node_bucket_list = 1;
  if (has_node_bucket_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_bucket_list(), target);
  }
  
  // required int32 node_storage_limit = 2;
  if (has_node_storage_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_storage_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report_Bucket_List::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Bucket_List node_bucket_list = 1;
    if (has_node_bucket_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_bucket_list());
    }
    
    // required int32 node_storage_limit = 2;
    if (has_node_storage_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_storage_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_Bucket_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report_Bucket_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report_Bucket_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report_Bucket_List::MergeFrom(const Report_Bucket_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_bucket_list()) {
      mutable_node_bucket_list()->::cstore::Bucket_List::MergeFrom(from.node_bucket_list());
    }
    if (from.has_node_storage_limit()) {
      set_node_storage_limit(from.node_storage_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report_Bucket_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_Bucket_List::CopyFrom(const Report_Bucket_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_Bucket_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_node_bucket_list()) {
    if (!this->node_bucket_list().IsInitialized()) return false;
  }
  return true;
}

void Report_Bucket_List::Swap(Report_Bucket_List* other) {
  if (other != this) {
    std::swap(node_bucket_list_, other->node_bucket_list_);
    std::swap(node_storage_limit_, other->node_storage_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report_Bucket_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_Bucket_List_descriptor_;
  metadata.reflection = Report_Bucket_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_CS_MPC_REPORT_BUCKET_LIST::kMuBucketListFieldNumber;
const int pb_MSG_CS_MPC_REPORT_BUCKET_LIST::kSuBucketListFieldNumber;
const int pb_MSG_CS_MPC_REPORT_BUCKET_LIST::kSuDupFieldNumber;
const int pb_MSG_CS_MPC_REPORT_BUCKET_LIST::kMuDupFieldNumber;
#endif  // !_MSC_VER

pb_MSG_CS_MPC_REPORT_BUCKET_LIST::pb_MSG_CS_MPC_REPORT_BUCKET_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::InitAsDefaultInstance() {
}

pb_MSG_CS_MPC_REPORT_BUCKET_LIST::pb_MSG_CS_MPC_REPORT_BUCKET_LIST(const pb_MSG_CS_MPC_REPORT_BUCKET_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::SharedCtor() {
  _cached_size_ = 0;
  su_dup_ = 0;
  mu_dup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_CS_MPC_REPORT_BUCKET_LIST::~pb_MSG_CS_MPC_REPORT_BUCKET_LIST() {
  SharedDtor();
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_CS_MPC_REPORT_BUCKET_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_CS_MPC_REPORT_BUCKET_LIST_descriptor_;
}

const pb_MSG_CS_MPC_REPORT_BUCKET_LIST& pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_CS_MPC_REPORT_BUCKET_LIST* pb_MSG_CS_MPC_REPORT_BUCKET_LIST::default_instance_ = NULL;

pb_MSG_CS_MPC_REPORT_BUCKET_LIST* pb_MSG_CS_MPC_REPORT_BUCKET_LIST::New() const {
  return new pb_MSG_CS_MPC_REPORT_BUCKET_LIST;
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    su_dup_ = 0;
    mu_dup_ = 0;
  }
  mu_bucket_list_.Clear();
  su_bucket_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_CS_MPC_REPORT_BUCKET_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.Report_Bucket_List mu_bucket_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mu_bucket_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mu_bucket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mu_bucket_list;
        if (input->ExpectTag(18)) goto parse_su_bucket_list;
        break;
      }
      
      // repeated .cstore.Report_Bucket_List su_bucket_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_su_bucket_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_su_bucket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_su_bucket_list;
        if (input->ExpectTag(24)) goto parse_su_dup;
        break;
      }
      
      // required int32 su_dup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_su_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &su_dup_)));
          set_has_su_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mu_dup;
        break;
      }
      
      // required int32 mu_dup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mu_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mu_dup_)));
          set_has_mu_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.Report_Bucket_List mu_bucket_list = 1;
  for (int i = 0; i < this->mu_bucket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mu_bucket_list(i), output);
  }
  
  // repeated .cstore.Report_Bucket_List su_bucket_list = 2;
  for (int i = 0; i < this->su_bucket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->su_bucket_list(i), output);
  }
  
  // required int32 su_dup = 3;
  if (has_su_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->su_dup(), output);
  }
  
  // required int32 mu_dup = 4;
  if (has_mu_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mu_dup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_CS_MPC_REPORT_BUCKET_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.Report_Bucket_List mu_bucket_list = 1;
  for (int i = 0; i < this->mu_bucket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mu_bucket_list(i), target);
  }
  
  // repeated .cstore.Report_Bucket_List su_bucket_list = 2;
  for (int i = 0; i < this->su_bucket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->su_bucket_list(i), target);
  }
  
  // required int32 su_dup = 3;
  if (has_su_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->su_dup(), target);
  }
  
  // required int32 mu_dup = 4;
  if (has_mu_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mu_dup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_CS_MPC_REPORT_BUCKET_LIST::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 su_dup = 3;
    if (has_su_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->su_dup());
    }
    
    // required int32 mu_dup = 4;
    if (has_mu_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mu_dup());
    }
    
  }
  // repeated .cstore.Report_Bucket_List mu_bucket_list = 1;
  total_size += 1 * this->mu_bucket_list_size();
  for (int i = 0; i < this->mu_bucket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mu_bucket_list(i));
  }
  
  // repeated .cstore.Report_Bucket_List su_bucket_list = 2;
  total_size += 1 * this->su_bucket_list_size();
  for (int i = 0; i < this->su_bucket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->su_bucket_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_CS_MPC_REPORT_BUCKET_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_CS_MPC_REPORT_BUCKET_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::MergeFrom(const pb_MSG_CS_MPC_REPORT_BUCKET_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  mu_bucket_list_.MergeFrom(from.mu_bucket_list_);
  su_bucket_list_.MergeFrom(from.su_bucket_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_su_dup()) {
      set_su_dup(from.su_dup());
    }
    if (from.has_mu_dup()) {
      set_mu_dup(from.mu_dup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::CopyFrom(const pb_MSG_CS_MPC_REPORT_BUCKET_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_CS_MPC_REPORT_BUCKET_LIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  for (int i = 0; i < mu_bucket_list_size(); i++) {
    if (!this->mu_bucket_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < su_bucket_list_size(); i++) {
    if (!this->su_bucket_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_CS_MPC_REPORT_BUCKET_LIST::Swap(pb_MSG_CS_MPC_REPORT_BUCKET_LIST* other) {
  if (other != this) {
    mu_bucket_list_.Swap(&other->mu_bucket_list_);
    su_bucket_list_.Swap(&other->su_bucket_list_);
    std::swap(su_dup_, other->su_dup_);
    std::swap(mu_dup_, other->mu_dup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_CS_MPC_REPORT_BUCKET_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_CS_MPC_REPORT_BUCKET_LIST_descriptor_;
  metadata.reflection = pb_MSG_CS_MPC_REPORT_BUCKET_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_DS_WD_START_MODULE::kModuleFieldNumber;
const int pb_MSG_DS_WD_START_MODULE::kArgsFieldNumber;
#endif  // !_MSC_VER

pb_MSG_DS_WD_START_MODULE::pb_MSG_DS_WD_START_MODULE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_DS_WD_START_MODULE::InitAsDefaultInstance() {
}

pb_MSG_DS_WD_START_MODULE::pb_MSG_DS_WD_START_MODULE(const pb_MSG_DS_WD_START_MODULE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_DS_WD_START_MODULE::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_DS_WD_START_MODULE::~pb_MSG_DS_WD_START_MODULE() {
  SharedDtor();
}

void pb_MSG_DS_WD_START_MODULE::SharedDtor() {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_DS_WD_START_MODULE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_DS_WD_START_MODULE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_DS_WD_START_MODULE_descriptor_;
}

const pb_MSG_DS_WD_START_MODULE& pb_MSG_DS_WD_START_MODULE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_DS_WD_START_MODULE* pb_MSG_DS_WD_START_MODULE::default_instance_ = NULL;

pb_MSG_DS_WD_START_MODULE* pb_MSG_DS_WD_START_MODULE::New() const {
  return new pb_MSG_DS_WD_START_MODULE;
}

void pb_MSG_DS_WD_START_MODULE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::kEmptyString) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_DS_WD_START_MODULE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Module_Name module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cstore::Module_Name_IsValid(value)) {
            set_module(static_cast< cstore::Module_Name >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }
      
      // optional string args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_DS_WD_START_MODULE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Module_Name module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->module(), output);
  }
  
  // optional string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_DS_WD_START_MODULE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Module_Name module = 1;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->module(), target);
  }
  
  // optional string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_DS_WD_START_MODULE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Module_Name module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->module());
    }
    
    // optional string args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_DS_WD_START_MODULE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_DS_WD_START_MODULE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_DS_WD_START_MODULE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_DS_WD_START_MODULE::MergeFrom(const pb_MSG_DS_WD_START_MODULE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_DS_WD_START_MODULE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_DS_WD_START_MODULE::CopyFrom(const pb_MSG_DS_WD_START_MODULE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_DS_WD_START_MODULE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_DS_WD_START_MODULE::Swap(pb_MSG_DS_WD_START_MODULE* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_DS_WD_START_MODULE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_DS_WD_START_MODULE_descriptor_;
  metadata.reflection = pb_MSG_DS_WD_START_MODULE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_DS_WD_UPDATE_TIME::kSecFieldNumber;
#endif  // !_MSC_VER

pb_MSG_DS_WD_UPDATE_TIME::pb_MSG_DS_WD_UPDATE_TIME()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_DS_WD_UPDATE_TIME::InitAsDefaultInstance() {
}

pb_MSG_DS_WD_UPDATE_TIME::pb_MSG_DS_WD_UPDATE_TIME(const pb_MSG_DS_WD_UPDATE_TIME& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_DS_WD_UPDATE_TIME::SharedCtor() {
  _cached_size_ = 0;
  sec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_DS_WD_UPDATE_TIME::~pb_MSG_DS_WD_UPDATE_TIME() {
  SharedDtor();
}

void pb_MSG_DS_WD_UPDATE_TIME::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_DS_WD_UPDATE_TIME::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_DS_WD_UPDATE_TIME::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_DS_WD_UPDATE_TIME_descriptor_;
}

const pb_MSG_DS_WD_UPDATE_TIME& pb_MSG_DS_WD_UPDATE_TIME::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_DS_WD_UPDATE_TIME* pb_MSG_DS_WD_UPDATE_TIME::default_instance_ = NULL;

pb_MSG_DS_WD_UPDATE_TIME* pb_MSG_DS_WD_UPDATE_TIME::New() const {
  return new pb_MSG_DS_WD_UPDATE_TIME;
}

void pb_MSG_DS_WD_UPDATE_TIME::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_DS_WD_UPDATE_TIME::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_DS_WD_UPDATE_TIME::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sec = 1;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_DS_WD_UPDATE_TIME::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sec = 1;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_DS_WD_UPDATE_TIME::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sec = 1;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_DS_WD_UPDATE_TIME::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_DS_WD_UPDATE_TIME* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_DS_WD_UPDATE_TIME*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_DS_WD_UPDATE_TIME::MergeFrom(const pb_MSG_DS_WD_UPDATE_TIME& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sec()) {
      set_sec(from.sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_DS_WD_UPDATE_TIME::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_DS_WD_UPDATE_TIME::CopyFrom(const pb_MSG_DS_WD_UPDATE_TIME& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_DS_WD_UPDATE_TIME::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_DS_WD_UPDATE_TIME::Swap(pb_MSG_DS_WD_UPDATE_TIME* other) {
  if (other != this) {
    std::swap(sec_, other->sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_DS_WD_UPDATE_TIME::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_DS_WD_UPDATE_TIME_descriptor_;
  metadata.reflection = pb_MSG_DS_WD_UPDATE_TIME_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_WD_DS_HEART_BEAT::kModuleFieldNumber;
const int pb_MSG_WD_DS_HEART_BEAT::kMemFieldNumber;
const int pb_MSG_WD_DS_HEART_BEAT::kDiskFieldNumber;
const int pb_MSG_WD_DS_HEART_BEAT::kNetFieldNumber;
#endif  // !_MSC_VER

pb_MSG_WD_DS_HEART_BEAT::pb_MSG_WD_DS_HEART_BEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_WD_DS_HEART_BEAT::InitAsDefaultInstance() {
}

pb_MSG_WD_DS_HEART_BEAT::pb_MSG_WD_DS_HEART_BEAT(const pb_MSG_WD_DS_HEART_BEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_WD_DS_HEART_BEAT::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  mem_ = 0u;
  disk_ = 0u;
  net_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_WD_DS_HEART_BEAT::~pb_MSG_WD_DS_HEART_BEAT() {
  SharedDtor();
}

void pb_MSG_WD_DS_HEART_BEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_WD_DS_HEART_BEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_WD_DS_HEART_BEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_WD_DS_HEART_BEAT_descriptor_;
}

const pb_MSG_WD_DS_HEART_BEAT& pb_MSG_WD_DS_HEART_BEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_WD_DS_HEART_BEAT* pb_MSG_WD_DS_HEART_BEAT::default_instance_ = NULL;

pb_MSG_WD_DS_HEART_BEAT* pb_MSG_WD_DS_HEART_BEAT::New() const {
  return new pb_MSG_WD_DS_HEART_BEAT;
}

void pb_MSG_WD_DS_HEART_BEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
    mem_ = 0u;
    disk_ = 0u;
    net_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_WD_DS_HEART_BEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cstore.Module_Name module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cstore::Module_Name_IsValid(value)) {
            set_module(static_cast< cstore::Module_Name >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mem;
        break;
      }
      
      // required uint32 mem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_)));
          set_has_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_disk;
        break;
      }
      
      // required uint32 disk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_)));
          set_has_disk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_net;
        break;
      }
      
      // required uint32 net = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_)));
          set_has_net();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_WD_DS_HEART_BEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cstore.Module_Name module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->module(), output);
  }
  
  // required uint32 mem = 2;
  if (has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mem(), output);
  }
  
  // required uint32 disk = 3;
  if (has_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->disk(), output);
  }
  
  // required uint32 net = 4;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->net(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_WD_DS_HEART_BEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cstore.Module_Name module = 1;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->module(), target);
  }
  
  // required uint32 mem = 2;
  if (has_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mem(), target);
  }
  
  // required uint32 disk = 3;
  if (has_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->disk(), target);
  }
  
  // required uint32 net = 4;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->net(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_WD_DS_HEART_BEAT::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cstore.Module_Name module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->module());
    }
    
    // required uint32 mem = 2;
    if (has_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem());
    }
    
    // required uint32 disk = 3;
    if (has_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk());
    }
    
    // required uint32 net = 4;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_WD_DS_HEART_BEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_WD_DS_HEART_BEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_WD_DS_HEART_BEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_WD_DS_HEART_BEAT::MergeFrom(const pb_MSG_WD_DS_HEART_BEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_mem()) {
      set_mem(from.mem());
    }
    if (from.has_disk()) {
      set_disk(from.disk());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_WD_DS_HEART_BEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_WD_DS_HEART_BEAT::CopyFrom(const pb_MSG_WD_DS_HEART_BEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_WD_DS_HEART_BEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void pb_MSG_WD_DS_HEART_BEAT::Swap(pb_MSG_WD_DS_HEART_BEAT* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(mem_, other->mem_);
    std::swap(disk_, other->disk_);
    std::swap(net_, other->net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_WD_DS_HEART_BEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_WD_DS_HEART_BEAT_descriptor_;
  metadata.reflection = pb_MSG_WD_DS_HEART_BEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::kModuleIPFieldNumber;
const int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::kModuleFieldNumber;
const int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::kMemFieldNumber;
const int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::kDiskFieldNumber;
const int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::kNetFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::InitAsDefaultInstance() {
}

pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item(const pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::SharedCtor() {
  _cached_size_ = 0;
  module_ip_ = 0u;
  module_ = 0;
  mem_ = 0u;
  disk_ = 0u;
  net_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::~pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item() {
  SharedDtor();
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_descriptor_;
}

const pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item& pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item* pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::default_instance_ = NULL;

pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item* pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::New() const {
  return new pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item;
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ip_ = 0u;
    module_ = 0;
    mem_ = 0u;
    disk_ = 0u;
    net_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Module_IP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_ip_)));
          set_has_module_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module;
        break;
      }
      
      // required .cstore.Module_Name module = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cstore::Module_Name_IsValid(value)) {
            set_module(static_cast< cstore::Module_Name >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mem;
        break;
      }
      
      // required uint32 mem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_)));
          set_has_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_disk;
        break;
      }
      
      // required uint32 disk = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_)));
          set_has_disk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_net;
        break;
      }
      
      // required uint32 net = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_)));
          set_has_net();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Module_IP = 1;
  if (has_module_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_ip(), output);
  }
  
  // required .cstore.Module_Name module = 2;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->module(), output);
  }
  
  // required uint32 mem = 3;
  if (has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mem(), output);
  }
  
  // required uint32 disk = 4;
  if (has_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->disk(), output);
  }
  
  // required uint32 net = 5;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->net(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Module_IP = 1;
  if (has_module_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_ip(), target);
  }
  
  // required .cstore.Module_Name module = 2;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->module(), target);
  }
  
  // required uint32 mem = 3;
  if (has_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mem(), target);
  }
  
  // required uint32 disk = 4;
  if (has_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->disk(), target);
  }
  
  // required uint32 net = 5;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->net(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Module_IP = 1;
    if (has_module_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_ip());
    }
    
    // required .cstore.Module_Name module = 2;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->module());
    }
    
    // required uint32 mem = 3;
    if (has_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem());
    }
    
    // required uint32 disk = 4;
    if (has_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk());
    }
    
    // required uint32 net = 5;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::MergeFrom(const pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_ip()) {
      set_module_ip(from.module_ip());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_mem()) {
      set_mem(from.mem());
    }
    if (from.has_disk()) {
      set_disk(from.disk());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::CopyFrom(const pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::Swap(pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item* other) {
  if (other != this) {
    std::swap(module_ip_, other->module_ip_);
    std::swap(module_, other->module_);
    std::swap(mem_, other->mem_);
    std::swap(disk_, other->disk_);
    std::swap(net_, other->net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_descriptor_;
  metadata.reflection = pb_MSG_MPC_DS_MODULES_INFO_ACK_Module_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_MPC_DS_MODULES_INFO_ACK::kModuleListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_DS_MODULES_INFO_ACK::pb_MSG_MPC_DS_MODULES_INFO_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::InitAsDefaultInstance() {
}

pb_MSG_MPC_DS_MODULES_INFO_ACK::pb_MSG_MPC_DS_MODULES_INFO_ACK(const pb_MSG_MPC_DS_MODULES_INFO_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_DS_MODULES_INFO_ACK::~pb_MSG_MPC_DS_MODULES_INFO_ACK() {
  SharedDtor();
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_MODULES_INFO_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_;
}

const pb_MSG_MPC_DS_MODULES_INFO_ACK& pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_DS_MODULES_INFO_ACK* pb_MSG_MPC_DS_MODULES_INFO_ACK::default_instance_ = NULL;

pb_MSG_MPC_DS_MODULES_INFO_ACK* pb_MSG_MPC_DS_MODULES_INFO_ACK::New() const {
  return new pb_MSG_MPC_DS_MODULES_INFO_ACK;
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::Clear() {
  module_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_DS_MODULES_INFO_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cstore.pb_MSG_MPC_DS_MODULES_INFO_ACK.Module_Item module_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_module_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cstore.pb_MSG_MPC_DS_MODULES_INFO_ACK.Module_Item module_list = 1;
  for (int i = 0; i < this->module_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_DS_MODULES_INFO_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cstore.pb_MSG_MPC_DS_MODULES_INFO_ACK.Module_Item module_list = 1;
  for (int i = 0; i < this->module_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_DS_MODULES_INFO_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .cstore.pb_MSG_MPC_DS_MODULES_INFO_ACK.Module_Item module_list = 1;
  total_size += 1 * this->module_list_size();
  for (int i = 0; i < this->module_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_DS_MODULES_INFO_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_DS_MODULES_INFO_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::MergeFrom(const pb_MSG_MPC_DS_MODULES_INFO_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_list_.MergeFrom(from.module_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::CopyFrom(const pb_MSG_MPC_DS_MODULES_INFO_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_DS_MODULES_INFO_ACK::IsInitialized() const {
  
  for (int i = 0; i < module_list_size(); i++) {
    if (!this->module_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_MPC_DS_MODULES_INFO_ACK::Swap(pb_MSG_MPC_DS_MODULES_INFO_ACK* other) {
  if (other != this) {
    module_list_.Swap(&other->module_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_DS_MODULES_INFO_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_DS_MODULES_INFO_ACK_descriptor_;
  metadata.reflection = pb_MSG_MPC_DS_MODULES_INFO_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_DS_START_MODULE::kModuleIPFieldNumber;
const int pb_MSG_MPC_DS_START_MODULE::kModuleNameFieldNumber;
const int pb_MSG_MPC_DS_START_MODULE::kArgsFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_DS_START_MODULE::pb_MSG_MPC_DS_START_MODULE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_DS_START_MODULE::InitAsDefaultInstance() {
}

pb_MSG_MPC_DS_START_MODULE::pb_MSG_MPC_DS_START_MODULE(const pb_MSG_MPC_DS_START_MODULE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_START_MODULE::SharedCtor() {
  _cached_size_ = 0;
  module_ip_ = 0u;
  module_name_ = 0;
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_DS_START_MODULE::~pb_MSG_MPC_DS_START_MODULE() {
  SharedDtor();
}

void pb_MSG_MPC_DS_START_MODULE::SharedDtor() {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_DS_START_MODULE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_START_MODULE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_DS_START_MODULE_descriptor_;
}

const pb_MSG_MPC_DS_START_MODULE& pb_MSG_MPC_DS_START_MODULE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_DS_START_MODULE* pb_MSG_MPC_DS_START_MODULE::default_instance_ = NULL;

pb_MSG_MPC_DS_START_MODULE* pb_MSG_MPC_DS_START_MODULE::New() const {
  return new pb_MSG_MPC_DS_START_MODULE;
}

void pb_MSG_MPC_DS_START_MODULE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ip_ = 0u;
    module_name_ = 0;
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::kEmptyString) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_DS_START_MODULE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Module_IP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_ip_)));
          set_has_module_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_name;
        break;
      }
      
      // required .cstore.Module_Name module_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_name:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cstore::Module_Name_IsValid(value)) {
            set_module_name(static_cast< cstore::Module_Name >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // optional string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_DS_START_MODULE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Module_IP = 1;
  if (has_module_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_ip(), output);
  }
  
  // required .cstore.Module_Name module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->module_name(), output);
  }
  
  // optional string args = 3;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_DS_START_MODULE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Module_IP = 1;
  if (has_module_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_ip(), target);
  }
  
  // required .cstore.Module_Name module_name = 2;
  if (has_module_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->module_name(), target);
  }
  
  // optional string args = 3;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->args(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_DS_START_MODULE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Module_IP = 1;
    if (has_module_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_ip());
    }
    
    // required .cstore.Module_Name module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_name());
    }
    
    // optional string args = 3;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_DS_START_MODULE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_DS_START_MODULE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_DS_START_MODULE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_DS_START_MODULE::MergeFrom(const pb_MSG_MPC_DS_START_MODULE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_ip()) {
      set_module_ip(from.module_ip());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_DS_START_MODULE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_START_MODULE::CopyFrom(const pb_MSG_MPC_DS_START_MODULE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_DS_START_MODULE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_MPC_DS_START_MODULE::Swap(pb_MSG_MPC_DS_START_MODULE* other) {
  if (other != this) {
    std::swap(module_ip_, other->module_ip_);
    std::swap(module_name_, other->module_name_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_DS_START_MODULE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_DS_START_MODULE_descriptor_;
  metadata.reflection = pb_MSG_MPC_DS_START_MODULE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_MPC_DS_STOP_MODULE::kModuleIPFieldNumber;
#endif  // !_MSC_VER

pb_MSG_MPC_DS_STOP_MODULE::pb_MSG_MPC_DS_STOP_MODULE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_MPC_DS_STOP_MODULE::InitAsDefaultInstance() {
}

pb_MSG_MPC_DS_STOP_MODULE::pb_MSG_MPC_DS_STOP_MODULE(const pb_MSG_MPC_DS_STOP_MODULE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_STOP_MODULE::SharedCtor() {
  _cached_size_ = 0;
  module_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_MPC_DS_STOP_MODULE::~pb_MSG_MPC_DS_STOP_MODULE() {
  SharedDtor();
}

void pb_MSG_MPC_DS_STOP_MODULE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_MPC_DS_STOP_MODULE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_MPC_DS_STOP_MODULE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_MPC_DS_STOP_MODULE_descriptor_;
}

const pb_MSG_MPC_DS_STOP_MODULE& pb_MSG_MPC_DS_STOP_MODULE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstore_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_MPC_DS_STOP_MODULE* pb_MSG_MPC_DS_STOP_MODULE::default_instance_ = NULL;

pb_MSG_MPC_DS_STOP_MODULE* pb_MSG_MPC_DS_STOP_MODULE::New() const {
  return new pb_MSG_MPC_DS_STOP_MODULE;
}

void pb_MSG_MPC_DS_STOP_MODULE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_MPC_DS_STOP_MODULE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Module_IP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_ip_)));
          set_has_module_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_MPC_DS_STOP_MODULE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Module_IP = 1;
  if (has_module_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_MPC_DS_STOP_MODULE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Module_IP = 1;
  if (has_module_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_MPC_DS_STOP_MODULE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Module_IP = 1;
    if (has_module_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_MPC_DS_STOP_MODULE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_MPC_DS_STOP_MODULE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_MPC_DS_STOP_MODULE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_MPC_DS_STOP_MODULE::MergeFrom(const pb_MSG_MPC_DS_STOP_MODULE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_ip()) {
      set_module_ip(from.module_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_MPC_DS_STOP_MODULE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_MPC_DS_STOP_MODULE::CopyFrom(const pb_MSG_MPC_DS_STOP_MODULE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_MPC_DS_STOP_MODULE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pb_MSG_MPC_DS_STOP_MODULE::Swap(pb_MSG_MPC_DS_STOP_MODULE* other) {
  if (other != this) {
    std::swap(module_ip_, other->module_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_MPC_DS_STOP_MODULE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_MPC_DS_STOP_MODULE_descriptor_;
  metadata.reflection = pb_MSG_MPC_DS_STOP_MODULE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cstore

// @@protoc_insertion_point(global_scope)
